/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/rest/animal": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single animal */
    get: operations["v1GetAnimal"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/animal/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over animals */
    get: operations["v1PageAnimals"];
    put?: never;
    /** @description Searching animals */
    post: operations["v1SearchAnimals"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/astronomicalObject": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single astronomical object
     */
    get: operations["v1GetAstronomicalObject"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/astronomicalObject/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over astronomical objects
     */
    get: operations["v1PageAstronomicalObjects"];
    put?: never;
    /**
     * @deprecated
     * @description Searching astronomical objects
     */
    post: operations["v1SearchAstronomicalObjects"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/astronomicalObject": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single astronomical object (V2) */
    get: operations["v2GetAstronomicalObject"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/astronomicalObject/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over astronomical objects (V2) */
    get: operations["v2PageAstronomicalObjects"];
    put?: never;
    /** @description Searching astronomical objects (v2) */
    post: operations["v2SearchAstronomicalObjects"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/book": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single book
     */
    get: operations["v1GetBook"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/book/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over books
     */
    get: operations["v1PageBooks"];
    put?: never;
    /**
     * @deprecated
     * @description Searching books
     */
    post: operations["v1SearchBooks"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/book": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single book (V2) */
    get: operations["v2GetBook"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/book/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over books (V2) */
    get: operations["v2PageBooks"];
    put?: never;
    /** @description Searching books (V2) */
    post: operations["v2SearchBooks"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/bookCollection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single book collection */
    get: operations["v1GetBookCollection"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/bookCollection/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over book collections */
    get: operations["v1PageBookCollections"];
    put?: never;
    /** @description Searching book collections */
    post: operations["v1SearchBookCollections"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/bookSeries": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single book series */
    get: operations["v1GetBookSeries"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/bookSeries/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over book series */
    get: operations["v1PageBookSeries"];
    put?: never;
    /** @description Searching book series */
    post: operations["v1SearchBookSeries"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/character": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single character */
    get: operations["v1GetCharacter"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/character/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over characters */
    get: operations["v1PageCharacter"];
    put?: never;
    /** @description Searching characters */
    post: operations["v1SearchCharacters"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/comics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single comics */
    get: operations["v1GetComics"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/comics/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over comics */
    get: operations["v1PageComics"];
    put?: never;
    /** @description Searching comics */
    post: operations["v1SearchComics"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/comicCollection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single comic collection
     */
    get: operations["v1GetComicCollection"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/comicCollection/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over comic collections */
    get: operations["v1PageComicCollections"];
    put?: never;
    /** @description Searching comic collections */
    post: operations["v1SearchComicCollections"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/comicCollection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single comic collection (V2) */
    get: operations["v2GetComicCollection"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/comicSeries": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single comic series */
    get: operations["v1GetComicSeries"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/comicSeries/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over comic series */
    get: operations["v1PageComicSeries"];
    put?: never;
    /** @description Searching comic series */
    post: operations["v1SearchComicSeries"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/comicStrip": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single comic strip */
    get: operations["v1GetComicStrip"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/comicStrip/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over comic strips */
    get: operations["v1PageComicStrips"];
    put?: never;
    /** @description Searching comic strips */
    post: operations["v1SearchComicStrips"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/company": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single company
     */
    get: operations["v1GetCompany"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/company/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over companies
     */
    get: operations["v1PageCompanies"];
    put?: never;
    /**
     * @deprecated
     * @description Searching companies
     */
    post: operations["v1SearchCompanies"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/company": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single company (V2) */
    get: operations["v2GetCompany"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/company/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over companies (V2) */
    get: operations["v2PageCompanies"];
    put?: never;
    /** @description Searching companies (V2) */
    post: operations["v2SearchCompanies"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/conflict": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single conflict
     */
    get: operations["v1GetConflict"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/conflict/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over conflicts */
    get: operations["v1PageConflicts"];
    put?: never;
    /** @description Searching conflicts */
    post: operations["v1SearchConflicts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/conflict": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single conflict (V2) */
    get: operations["v2GetConflict"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/common/dataVersion": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a data version */
    get: operations["v1GetDataVersion"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/element": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single element
     */
    get: operations["v1GetElement"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/element/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over elements
     */
    get: operations["v1PageElements"];
    put?: never;
    /**
     * @deprecated
     * @description Searching elements
     */
    post: operations["v1SearchElements"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/element": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single element (V2) */
    get: operations["v2GetElement"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/element/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over elements (V2) */
    get: operations["v2PageElements"];
    put?: never;
    /** @description Searching elements (V2) */
    post: operations["v2SearchElements"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/episode": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single episode */
    get: operations["v1GetEpisode"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/episode/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over episodes */
    get: operations["v1PageEpisodes"];
    put?: never;
    /** @description Searching episodes */
    post: operations["v1SearchEpisodes"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/food": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single food */
    get: operations["v1GetFood"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/food/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over foods */
    get: operations["v1PageFoods"];
    put?: never;
    /** @description Searching foods */
    post: operations["v1SearchFoods"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/literature": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single literature */
    get: operations["v1GetLiterature"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/literature/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over literature */
    get: operations["v1PageLiterature"];
    put?: never;
    /** @description Searching literature */
    post: operations["v1SearchLiterature"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/location": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single location
     */
    get: operations["v1GetLocation"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/location/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over locations
     */
    get: operations["v1PageLocations"];
    put?: never;
    /**
     * @deprecated
     * @description Searching locations
     */
    post: operations["v1SearchLocations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/location": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single location (V2) */
    get: operations["v2GetLocation"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/location/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over locations (V2) */
    get: operations["v2PageLocations"];
    put?: never;
    /** @description Searching locations (V2) */
    post: operations["v2SearchLocations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/magazine": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single magazine */
    get: operations["v1GetMagazine"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/magazine/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over magazines */
    get: operations["v1PageMagazines"];
    put?: never;
    /** @description Searching magazines */
    post: operations["v1SearchMagazines"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/magazineSeries": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single magazine series */
    get: operations["v1GetMagazineSeries"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/magazineSeries/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over magazine series */
    get: operations["v1PageMagazineSeries"];
    put?: never;
    /** @description Searching magazine series */
    post: operations["v1SearchMagazineSeries"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/material": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single material */
    get: operations["v1GetMaterial"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/material/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over materials */
    get: operations["v1PageMaterials"];
    put?: never;
    /** @description Searching materials */
    post: operations["v1SearchMaterials"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/medicalCondition": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single medical condition */
    get: operations["v1GetMedicalCondition"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/medicalCondition/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over medical conditions */
    get: operations["v1PageMedicalConditions"];
    put?: never;
    /** @description Searching medical conditions */
    post: operations["v1SearchMedicalConditions"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/movie": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single movie */
    get: operations["v1GetMovie"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/movie/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over movies */
    get: operations["v1PageMovies"];
    put?: never;
    /** @description Searching movies */
    post: operations["v1SearchMovies"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/occupation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single occupation
     */
    get: operations["v1GetOccupation"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/occupation/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over occupations
     */
    get: operations["v1PageOccupations"];
    put?: never;
    /**
     * @deprecated
     * @description Searching occupations
     */
    post: operations["v1SearchOccupations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/occupation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single occupation (V2) */
    get: operations["v2GetOccupation"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/occupation/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over occupations (V2) */
    get: operations["v2PageOccupations"];
    put?: never;
    /** @description Searching occupations (V2) */
    post: operations["v2SearchOccupations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/organization": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single organization */
    get: operations["v1GetOrganization"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/organization/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over organizations */
    get: operations["v1PageOrganizations"];
    put?: never;
    /** @description Searching organizations */
    post: operations["v1SearchOrganizations"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/performer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single performer
     */
    get: operations["v1GetPerformer"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/performer/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over performers
     */
    get: operations["v1PagePerformers"];
    put?: never;
    /**
     * @deprecated
     * @description Searching performers
     */
    post: operations["v1SearchPerformers"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/performer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single performer (V2) */
    get: operations["v2GetPerformer"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/performer/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over performers (V2) */
    get: operations["v2PagePerformers"];
    put?: never;
    /** @description Searching performers (V2) */
    post: operations["v2SearchPerformers"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/season": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single season */
    get: operations["v1GetSeason"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/season/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over seasons */
    get: operations["v1PageSeasons"];
    put?: never;
    /** @description Searching seasons */
    post: operations["v1SearchSeasons"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/series": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single series */
    get: operations["v1GetSeries"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/series/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over series */
    get: operations["v1PageSeries"];
    put?: never;
    /** @description Searching series */
    post: operations["v1SearchSeries"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/soundtrack": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single soundtrack */
    get: operations["v1GetSoundtrack"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/soundtrack/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over soundtracks */
    get: operations["v1PageSoundtracks"];
    put?: never;
    /** @description Searching soundtracks */
    post: operations["v1SearchSoundtracks"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/spacecraft": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single spacecraft
     */
    get: operations["v1GetSpacecraft"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/spacecraft/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over spacecrafts
     */
    get: operations["v1PageSpacecrafts"];
    put?: never;
    /**
     * @deprecated
     * @description Searching spacecrafts
     */
    post: operations["v1SearchSpacecrafts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/spacecraft": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single spacecraft (V2) */
    get: operations["v2GetSpacecraft"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/spacecraft/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over spacecrafts (V2) */
    get: operations["v2PageSpacecrafts"];
    put?: never;
    /** @description Searching spacecrafts (V2) */
    post: operations["v2SearchSpacecrafts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/spacecraftClass": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single spacecraft class
     */
    get: operations["v1GetSpacecraftClass"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/spacecraftClass/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over spacecraft classes
     */
    get: operations["v1PageSpacecraftClasses"];
    put?: never;
    /**
     * @deprecated
     * @description Searching spacecraft classes
     */
    post: operations["v1SearchSpacecraftClasses"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/spacecraftClass": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single spacecraft class (V2)
     */
    get: operations["v2GetSpacecraftClass"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/spacecraftClass/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over spacecraft classes (V2) */
    get: operations["v2PageSpacecraftClasses"];
    put?: never;
    /** @description Searching spacecraft classes (V2) */
    post: operations["v2SearchSpacecraftClasses"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/rest/spacecraftClass": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single spacecraft class (V3) */
    get: operations["v3GetSpacecraftClass"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/species": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single species
     */
    get: operations["v1GetSpecies"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/species/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over species
     */
    get: operations["v1PageSpecies"];
    put?: never;
    /**
     * @deprecated
     * @description Searching species
     */
    post: operations["v1SearchSpecies"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/species": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single species (V2) */
    get: operations["v2GetSpecies"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/species/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over species (V2) */
    get: operations["v2PageSpecies"];
    put?: never;
    /** @description Searching species (V2) */
    post: operations["v2SearchSpecies"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/staff": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single staff member
     */
    get: operations["v1GetStaff"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/staff/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over staff members
     */
    get: operations["v1PageStaff"];
    put?: never;
    /**
     * @deprecated
     * @description Searching staff members
     */
    post: operations["v1SearchStaff"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/staff": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single staff member (V2) */
    get: operations["v2GetStaff"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/staff/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over staff members (V2) */
    get: operations["v2PageStaff"];
    put?: never;
    /** @description Searching staff members (v2) */
    post: operations["v2SearchStaff"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/technology": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single technology piece
     */
    get: operations["v1GetTechnology"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/technology/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over technology pieces
     */
    get: operations["v1PageTechnology"];
    put?: never;
    /**
     * @deprecated
     * @description Searching technology pieces
     */
    post: operations["v1SearchTechnology"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/technology": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single technology piece (V2) */
    get: operations["v2GetTechnology"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/technology/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over technology pieces (V2) */
    get: operations["v2PageTechnology"];
    put?: never;
    /** @description Searching technology pieces (V2) */
    post: operations["v2SearchTechnology"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single title
     */
    get: operations["v1GetTitle"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/title/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over titles
     */
    get: operations["v1PageTitles"];
    put?: never;
    /**
     * @deprecated
     * @description Searching titles
     */
    post: operations["v1SearchTitles"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single title (V2) */
    get: operations["v2GetTitle"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/title/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over titles (V2) */
    get: operations["v2PageTitles"];
    put?: never;
    /** @description Searching titles (V2) */
    post: operations["v2SearchTitles"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/tradingCard": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single trading card */
    get: operations["v1GetTradingCard"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/tradingCard/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over trading cards */
    get: operations["v1PageTradingCards"];
    put?: never;
    /** @description Searching trading cards */
    post: operations["v1SearchTradingCards"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/tradingCardDeck": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single trading card deck */
    get: operations["v1GetTradingCardDeck"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/tradingCardDeck/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over trading card decks */
    get: operations["v1PageTradingCardDecks"];
    put?: never;
    /** @description Searching trading card decks */
    post: operations["v1SearchTradingCardDecks"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/tradingCardSet": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single trading card set */
    get: operations["v1GetTradingCardSet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/tradingCardSet/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over trading card sets */
    get: operations["v1PageTradingCardSets"];
    put?: never;
    /** @description Searching trading card sets */
    post: operations["v1SearchTradingCardSets"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/videoGame": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single video game */
    get: operations["v1GetVideoGame"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/videoGame/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over video games */
    get: operations["v1PageVideoGames"];
    put?: never;
    /** @description Searching video games */
    post: operations["v1SearchVideoGames"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/videoRelease": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single video release
     */
    get: operations["v1GetVideoRelease"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/videoRelease/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over video releases
     */
    get: operations["v1PageVideoReleases"];
    put?: never;
    /**
     * @deprecated
     * @description Searching video releases
     */
    post: operations["v1SearchVideoReleases"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/videoRelease": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single video release (V2) */
    get: operations["v2GetVideoRelease"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/videoRelease/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over video releases (V2) */
    get: operations["v2PageVideoReleases"];
    put?: never;
    /** @description Searching video releases (V2) */
    post: operations["v2SearchVideoReleases"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/weapon": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Retrieval of a single weapon
     */
    get: operations["v1GetWeapon"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rest/weapon/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * @deprecated
     * @description Pagination over weapons
     */
    get: operations["v1PageWeapons"];
    put?: never;
    /**
     * @deprecated
     * @description Searching weapons
     */
    post: operations["v1SearchWeapons"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/weapon": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Retrieval of a single weapon (V2) */
    get: operations["v2GetWeapon"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/rest/weapon/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Pagination over weapons (V2) */
    get: operations["v2PageWeapons"];
    put?: never;
    /** @description Searching weapons (V2) */
    post: operations["v2SearchWeapons"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Animal search criteria */
    AnimalSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Animal name */
      name?: string;
      /** @description Whether it should be an earth animal */
      earthAnimal?: boolean;
      /** @description Whether it should be an earth insect */
      earthInsect?: boolean;
      /** @description Whether it should be an avian */
      avian?: boolean;
      /** @description Whether it should be a canine */
      canine?: boolean;
      /** @description Whether it should be a feline */
      feline?: boolean;
    };
    /** @description Header animal, embedded in other objects */
    AnimalHeader: {
      /** @description Animal unique ID */
      uid: string;
      /** @description Animal name */
      name: string;
    };
    /** @description Base animal, returned in search results */
    AnimalBase: {
      /** @description Animal unique ID */
      uid: string;
      /** @description Animal name */
      name: string;
      /** @description Whether it's an earth animal */
      earthAnimal?: boolean;
      /** @description Whether it's an earth insect */
      earthInsect?: boolean;
      /** @description Whether it's an avian */
      avian?: boolean;
      /** @description Whether it's a canine */
      canine?: boolean;
      /** @description Whether it's a feline */
      feline?: boolean;
    };
    /** @description Full animal, returned when queried using UID */
    AnimalFull: {
      /** @description Animal unique ID */
      uid: string;
      /** @description Animal name */
      name: string;
      /** @description Whether it's an earth animal */
      earthAnimal?: boolean;
      /** @description Whether it's an earth insect */
      earthInsect?: boolean;
      /** @description Whether it's an avian */
      avian?: boolean;
      /** @description Whether it's a canine */
      canine?: boolean;
      /** @description Whether it's a feline */
      feline?: boolean;
    };
    /** @description Response object for animals search */
    AnimalBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of animals matching given criteria
       * @default [
       *       []
       *     ]
       */
      animals: components["schemas"]["AnimalBase"][];
    };
    /** @description Response object for single animal query */
    AnimalFullResponse: {
      animal?: components["schemas"]["AnimalFull"];
    };
    /** @description Header astronomical object, embedded in other objects */
    AstronomicalObjectHeader: {
      /** @description Astronomical object's unique ID */
      uid: string;
      /** @description Astronomical object name */
      name: string;
    };
    /** @description Base astronomical object, returned in search results */
    AstronomicalObjectBase: {
      /** @description Astronomical object's unique ID */
      uid: string;
      /** @description Astronomical object name */
      name: string;
      astronomicalObjectType: components["schemas"]["AstronomicalObjectType"];
      location?: components["schemas"]["AstronomicalObjectHeader"];
    };
    /** @description Full astronomical object, returned when queried using UID */
    AstronomicalObjectFull: {
      /** @description Astronomical object's unique ID */
      uid: string;
      /** @description Astronomical object name */
      name: string;
      astronomicalObjectType?: components["schemas"]["AstronomicalObjectType"];
      location?: components["schemas"]["AstronomicalObjectBase"];
      /**
       * @description Astronomical objects located in this astronomical object, like planets in a star system
       * @default [
       *       []
       *     ]
       */
      astronomicalObjects: components["schemas"]["AstronomicalObjectBase"][];
    };
    /** @description Response object for astronomical objects search */
    AstronomicalObjectBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /** @default [
       *       []
       *     ] */
      astronomicalObjects: components["schemas"]["AstronomicalObjectBase"][];
    };
    /** @description Response object for single astronomical object query */
    AstronomicalObjectFullResponse: {
      astronomicalObject?: components["schemas"]["AstronomicalObjectFull"];
    };
    /**
     * @description Astronomical object type
     * @enum {string}
     */
    AstronomicalObjectType:
      | "PLANET"
      | "D_CLASS_PLANET"
      | "H_CLASS_PLANET"
      | "GAS_GIANT_PLANET"
      | "K_CLASS_PLANET"
      | "L_CLASS_PLANET"
      | "M_CLASS_PLANET"
      | "Y_CLASS_PLANET"
      | "ROGUE_PLANET"
      | "ARTIFICIAL_PLANET"
      | "ASTEROID"
      | "ASTEROIDAL_MOON"
      | "ASTEROID_BELT"
      | "CLUSTER"
      | "COMET"
      | "CONSTELLATION"
      | "GALAXY"
      | "MOON"
      | "M_CLASS_MOON"
      | "NEBULA"
      | "PLANETOID"
      | "D_CLASS_PLANETOID"
      | "QUASAR"
      | "STAR"
      | "STAR_SYSTEM"
      | "SECTOR"
      | "REGION";
    /** @description Base astronomical object, returned in search results (V2) */
    AstronomicalObjectV2Base: {
      /** @description Astronomical object's unique ID */
      uid: string;
      /** @description Astronomical object name */
      name: string;
      astronomicalObjectType: components["schemas"]["AstronomicalObjectV2Type"];
      location?: components["schemas"]["AstronomicalObjectHeader"];
    };
    /** @description Astronomical object search criteria (V2) */
    AstronomicalObjectV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Astronomical object name */
      name?: string;
      astronomicalObjectType?: components["schemas"]["AstronomicalObjectV2Type"];
      /** @description Astronomical object's location unique ID */
      locationUid?: string;
    };
    /** @description Full astronomical object, returned when queried using UID (V2) */
    AstronomicalObjectV2Full: {
      /** @description Astronomical object's unique ID */
      uid: string;
      /** @description Astronomical object name */
      name: string;
      astronomicalObjectType: components["schemas"]["AstronomicalObjectV2Type"];
      location?: components["schemas"]["AstronomicalObjectV2Base"];
      /**
       * @description Astronomical objects located in this astronomical object, like planets in a star system
       * @default [
       *       []
       *     ]
       */
      astronomicalObjects: components["schemas"]["AstronomicalObjectV2Base"][];
    };
    /** @description Response object for astronomical objects search (v2) */
    AstronomicalObjectV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of astronomical objects matching given criteria
       * @default [
       *       []
       *     ]
       */
      astronomicalObjects: components["schemas"]["AstronomicalObjectV2Base"][];
    };
    /** @description Response object for single astronomical object query (V2) */
    AstronomicalObjectV2FullResponse: {
      astronomicalObject?: components["schemas"]["AstronomicalObjectV2Full"];
    };
    /**
     * @description Astronomical object type (V2)
     * @enum {string}
     */
    AstronomicalObjectV2Type:
      | "PLANET"
      | "D_CLASS_PLANET"
      | "H_CLASS_PLANET"
      | "GAS_GIANT_PLANET"
      | "K_CLASS_PLANET"
      | "L_CLASS_PLANET"
      | "M_CLASS_PLANET"
      | "Y_CLASS_PLANET"
      | "ROGUE_PLANET"
      | "ARTIFICIAL_PLANET"
      | "ASTEROID"
      | "ASTEROIDAL_MOON"
      | "ASTEROID_BELT"
      | "BORG_SPATIAL_DESIGNATION"
      | "CLUSTER"
      | "COMET"
      | "CONSTELLATION"
      | "GALAXY"
      | "MOON"
      | "M_CLASS_MOON"
      | "NEBULA"
      | "PLANETOID"
      | "D_CLASS_PLANETOID"
      | "QUADRANT"
      | "QUASAR"
      | "STAR"
      | "STAR_SYSTEM"
      | "SECTOR"
      | "REGION";
    /**
     * @description Blood type
     * @enum {string}
     */
    BloodType: "B_NEGATIVE" | "O_NEGATIVE" | "T_NEGATIVE";
    /** @description Header book, embedded in other objects */
    BookHeader: {
      /** @description Book unique ID */
      uid: string;
      /** @description Book title */
      title: string;
    };
    /** @description Base book, returned in search results */
    BookBase: {
      /** @description Book unique ID */
      uid: string;
      /** @description Book title */
      title: string;
      /** @description Year the book was published */
      publishedYear?: number;
      /** @description Month the book was published */
      publishedMonth?: number;
      /** @description Day the book was published */
      publishedDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of book story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of book story
       */
      stardateTo?: number;
      /** @description Starting year of book story */
      yearFrom?: number;
      /** @description Ending year of book story */
      yearTo?: number;
      /** @description Whether it's a novel */
      novel: boolean;
      /** @description Whether it's a reference book */
      referenceBook: boolean;
      /** @description Whether it's a biography book */
      biographyBook: boolean;
      /** @description Whether it's a role playing book */
      rolePlayingBook: boolean;
      /** @description Whether it's an e-book */
      ebook: boolean;
      /** @description Whether it's an anthology */
      anthology: boolean;
      /** @description Whether it's a novelization */
      novelization: boolean;
      /** @description Whether it's an audiobook, or has been release as an audiobook in addition to other form */
      audiobook: boolean;
      /** @description If it's an audiobook, whether it's been abridged */
      audiobookAbridged: boolean;
      /** @description Year the audiobook was published */
      audiobookPublishedYear?: number;
      /** @description Month the audiobook was published */
      audiobookPublishedMonth?: number;
      /** @description Day the audiobook was published */
      audiobookPublishedDay?: number;
      /** @description Audiobook run time, in minutes */
      audiobookRunTime?: number;
      /** @description Book's production number */
      productionNumber?: string;
    };
    /** @description Full book, returned when queried using UID */
    BookFull: {
      /** @description Book unique ID */
      uid: string;
      /** @description Book title */
      title: string;
      /** @description Year the book was published */
      publishedYear?: number;
      /** @description Month the book was published */
      publishedMonth?: number;
      /** @description Day the book was published */
      publishedDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of book story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of book story
       */
      stardateTo?: number;
      /** @description Starting year of book story */
      yearFrom?: number;
      /** @description Ending year of book story */
      yearTo?: number;
      /** @description Whether it's a novel */
      novel: boolean;
      /** @description Whether it's a reference book */
      referenceBook: boolean;
      /** @description Whether it's a biography book */
      biographyBook: boolean;
      /** @description Whether it's a role playing book */
      rolePlayingBook: boolean;
      /** @description Whether it's an e-book */
      ebook: boolean;
      /** @description Whether it's an anthology */
      anthology: boolean;
      /** @description Whether it's a novelization */
      novelization: boolean;
      /** @description Whether it's an audiobook, or has been release as an audiobook in addition to other form */
      audiobook: boolean;
      /** @description If it's an audiobook, whether it's been abridged */
      audiobookAbridged: boolean;
      /** @description Year the audiobook was published */
      audiobookPublishedYear?: number;
      /** @description Month the audiobook was published */
      audiobookPublishedMonth?: number;
      /** @description Day the audiobook was published */
      audiobookPublishedDay?: number;
      /** @description Audiobook run time, in minutes */
      audiobookRunTime?: number;
      /** @description Book production number */
      productionNumber?: string;
      /**
       * @description Book series this book is included in
       * @default [
       *       []
       *     ]
       */
      bookSeries: components["schemas"]["BookSeriesBase"][];
      /**
       * @description Authors of the book
       * @default [
       *       []
       *     ]
       */
      authors: components["schemas"]["StaffBase"][];
      /**
       * @description Artists involved in the book
       * @default [
       *       []
       *     ]
       */
      artists: components["schemas"]["StaffBase"][];
      /**
       * @description Editors involved in the book
       * @default [
       *       []
       *     ]
       */
      editors: components["schemas"]["StaffBase"][];
      /**
       * @description Audiobook narrators
       * @default [
       *       []
       *     ]
       */
      audiobookNarrators: components["schemas"]["StaffBase"][];
      /**
       * @description Book publishers
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Audiobook publishers
       * @default [
       *       []
       *     ]
       */
      audiobookPublishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Characters appearing the book
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
      /**
       * @description Audiobook references
       * @default [
       *       []
       *     ]
       */
      audiobookReferences: components["schemas"]["Reference"][];
      /**
       * @description Book collections this book is included in
       * @default [
       *       []
       *     ]
       */
      bookCollections: components["schemas"]["BookCollectionBase"][];
    };
    /** @description Response object for books search */
    BookBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of books matching given criteria
       * @default [
       *       []
       *     ]
       */
      books: components["schemas"]["BookBase"][];
    };
    /** @description Response object for single book query */
    BookFullResponse: {
      book?: components["schemas"]["BookFull"];
    };
    /** @description Book search criteria (V2) */
    BookV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Book title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the book was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the book was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of pages
       */
      numberOfPagesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of pages
       */
      numberOfPagesTo?: number;
      /**
       * Format: float
       * @description Starting stardate of book story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of book story
       */
      stardateTo?: number;
      /**
       * Format: int32
       * @description Starting year of book story
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of book story
       */
      yearTo?: number;
      /** @description Whether it should be a novel */
      novel?: boolean;
      /** @description Whether it should be a reference book */
      referenceBook?: boolean;
      /** @description Whether it should be a biography book */
      biographyBook?: boolean;
      /** @description Whether it should be a role playing book */
      rolePlayingBook?: boolean;
      /** @description Whether it should be an unauthorized publication */
      unauthorizedPublication?: boolean;
      /** @description Whether it should be an e-book */
      ebook?: boolean;
      /** @description Whether it should be an anthology */
      anthology?: boolean;
      /** @description Whether it should be novelization */
      novelization?: boolean;
      /** @description Whether it should be an audiobook */
      audiobook?: boolean;
      /** @description Whether it should be an audiobook, abridged */
      audiobookAbridged?: boolean;
      /**
       * Format: int32
       * @description Starting year the audiobook was published
       */
      audiobookPublishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the audiobook was published
       */
      audiobookPublishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal audiobook run time, in minutes
       */
      audiobookRunTimeFrom?: number;
      /**
       * Format: int32
       * @description Maximal audiobook run time, in minutes
       */
      audiobookRunTimeTo?: number;
    };
    /** @description Base book, returned in search results (V2) */
    BookV2Base: {
      /** @description Book unique ID */
      uid: string;
      /** @description Book title */
      title: string;
      /** @description Year the book was published */
      publishedYear?: number;
      /** @description Month the book was published */
      publishedMonth?: number;
      /** @description Day the book was published */
      publishedDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of book story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of book story
       */
      stardateTo?: number;
      /** @description Starting year of book story */
      yearFrom?: number;
      /** @description Ending year of book story */
      yearTo?: number;
      /** @description Whether it's a novel */
      novel: boolean;
      /** @description Whether it's a reference book */
      referenceBook: boolean;
      /** @description Whether it's a biography book */
      biographyBook: boolean;
      /** @description Whether it's a role playing book */
      rolePlayingBook: boolean;
      /** @description Whether it's an e-book */
      ebook: boolean;
      /** @description Whether it's an anthology */
      anthology: boolean;
      /** @description Whether it's a novelization */
      novelization: boolean;
      /** @description Whether it's an unauthorized publication */
      unauthorizedPublication: boolean;
      /** @description Whether it's an audiobook, or has been release as an audiobook in addition to other form */
      audiobook: boolean;
      /** @description If it's an audiobook, whether it's been abridged */
      audiobookAbridged: boolean;
      /** @description Year the audiobook was published */
      audiobookPublishedYear?: number;
      /** @description Month the audiobook was published */
      audiobookPublishedMonth?: number;
      /** @description Day the audiobook was published */
      audiobookPublishedDay?: number;
      /** @description Audiobook run time, in minutes */
      audiobookRunTime?: number;
      /** @description Book's production number */
      productionNumber?: string;
    };
    /** @description Full book, returned when queried using UID (V2) */
    BookV2Full: {
      /** @description Book unique ID */
      uid: string;
      /** @description Book title */
      title: string;
      /** @description Year the book was published */
      publishedYear?: number;
      /** @description Month the book was published */
      publishedMonth?: number;
      /** @description Day the book was published */
      publishedDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of book story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of book story
       */
      stardateTo?: number;
      /** @description Starting year of book story */
      yearFrom?: number;
      /** @description Ending year of book story */
      yearTo?: number;
      /** @description Whether it's a novel */
      novel: boolean;
      /** @description Whether it's a reference book */
      referenceBook: boolean;
      /** @description Whether it's a biography book */
      biographyBook: boolean;
      /** @description Whether it's a role playing book */
      rolePlayingBook: boolean;
      /** @description Whether it's an e-book */
      ebook: boolean;
      /** @description Whether it's an anthology */
      anthology: boolean;
      /** @description Whether it's a novelization */
      novelization: boolean;
      /** @description Whether it's an unauthorized publication */
      unauthorizedPublication: boolean;
      /** @description Whether it's an audiobook, or has been release as an audiobook in addition to other form */
      audiobook: boolean;
      /** @description If it's an audiobook, whether it's been abridged */
      audiobookAbridged: boolean;
      /** @description Year the audiobook was published */
      audiobookPublishedYear?: number;
      /** @description Month the audiobook was published */
      audiobookPublishedMonth?: number;
      /** @description Day the audiobook was published */
      audiobookPublishedDay?: number;
      /** @description Audiobook run time, in minutes */
      audiobookRunTime?: number;
      /** @description Book production number */
      productionNumber?: string;
      /**
       * @description Book series this book is included in
       * @default [
       *       []
       *     ]
       */
      bookSeries: components["schemas"]["BookSeriesBase"][];
      /**
       * @description Authors of the book
       * @default [
       *       []
       *     ]
       */
      authors: components["schemas"]["StaffV2Base"][];
      /**
       * @description Artists involved in the book
       * @default [
       *       []
       *     ]
       */
      artists: components["schemas"]["StaffV2Base"][];
      /**
       * @description Editors involved in the book
       * @default [
       *       []
       *     ]
       */
      editors: components["schemas"]["StaffV2Base"][];
      /**
       * @description Audiobook narrators
       * @default [
       *       []
       *     ]
       */
      audiobookNarrators: components["schemas"]["StaffV2Base"][];
      /**
       * @description Book publishers
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyV2Base"][];
      /**
       * @description Audiobook publishers
       * @default [
       *       []
       *     ]
       */
      audiobookPublishers: components["schemas"]["CompanyV2Base"][];
      /**
       * @description Characters appearing the book
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
      /**
       * @description Audiobook references
       * @default [
       *       []
       *     ]
       */
      audiobookReferences: components["schemas"]["Reference"][];
      /**
       * @description Book collections this book is included in
       * @default [
       *       []
       *     ]
       */
      bookCollections: components["schemas"]["BookCollectionBase"][];
    };
    /** @description Response object for books search (V2) */
    BookV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of books matching given criteria
       * @default [
       *       []
       *     ]
       */
      books: components["schemas"]["BookV2Base"][];
    };
    /** @description Response object for single book query (V2) */
    BookV2FullResponse: {
      book?: components["schemas"]["BookV2Full"];
    };
    /** @description Book collection search criteria */
    BookCollectionSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Book collection title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the book collection was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the book collection was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of pages
       */
      numberOfPagesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of pages
       */
      numberOfPagesTo?: number;
      /**
       * Format: float
       * @description Starting stardate of book collection stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of book collections stories
       */
      stardateTo?: number;
      /**
       * Format: int32
       * @description Starting year of book collection stories
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of book collections stories
       */
      yearTo?: number;
    };
    /** @description Header book collection, embedded in other objects */
    BookCollectionHeader: {
      /** @description Book collection unique ID */
      uid?: string;
      /** @description Book collection title */
      title?: string;
    };
    /** @description Base book collection, returned in search results */
    BookCollectionBase: {
      /** @description Book collection unique ID */
      uid?: string;
      /** @description Book collection title */
      title?: string;
      /** @description Year the book collection was published */
      publishedYear?: number;
      /** @description Month the book collection was published */
      publishedMonth?: number;
      /** @description Day the book collection was published */
      publishedDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of book collection stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of book collection stories
       */
      stardateTo?: number;
      /** @description Starting year of book collection stories */
      yearFrom?: number;
      /** @description Ending year of book collection stories */
      yearTo?: number;
    };
    /** @description Full book collection, returned when queried using UID */
    BookCollectionFull: {
      /** @description Book collection unique ID */
      uid?: string;
      /** @description Book collection title */
      title?: string;
      /** @description Year the book collection was published */
      publishedYear?: number;
      /** @description Month the book collection was published */
      publishedMonth?: number;
      /** @description Day the book collection was published */
      publishedDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of book collection stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of book collection stories
       */
      stardateTo?: number;
      /** @description Starting year of book collection stories */
      yearFrom?: number;
      /** @description Ending year of book collection stories */
      yearTo?: number;
      /**
       * @description Book series this book collection is included in
       * @default [
       *       []
       *     ]
       */
      bookSeries: components["schemas"]["BookSeriesBase"][];
      /**
       * @description Authors of the book collection
       * @default [
       *       []
       *     ]
       */
      authors: components["schemas"]["StaffBase"][];
      /**
       * @description Artists involved in the book collection
       * @default [
       *       []
       *     ]
       */
      artists: components["schemas"]["StaffBase"][];
      /**
       * @description Editors involved in the book collection
       * @default [
       *       []
       *     ]
       */
      editors: components["schemas"]["StaffBase"][];
      /**
       * @description Book collection publishers
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Characters appearing in the book collection
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
      /**
       * @description Books included in this book collection
       * @default [
       *       []
       *     ]
       */
      books: components["schemas"]["BookBase"][];
    };
    /** @description Response object for book collections search */
    BookCollectionBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of book collections matching given criteria
       * @default [
       *       []
       *     ]
       */
      bookCollections: components["schemas"]["BookCollectionBase"][];
    };
    /** @description Response object for single book collection query */
    BookCollectionFullResponse: {
      bookCollection?: components["schemas"]["BookCollectionFull"];
    };
    /** @description Book series search criteria */
    BookSeriesSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Book series title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the book series was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the book series was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of books
       */
      numberOfBooksFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of books
       */
      numberOfBooksTo?: number;
      /**
       * Format: int32
       * @description Starting year of book series stories
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of book series stories
       */
      yearTo?: number;
      /** @description Whether it should be a miniseries */
      miniseries?: boolean;
      /** @description Whether it should be an e-book series */
      ebookSeries?: boolean;
    };
    /** @description Header book series, embedded in other objects */
    BookSeriesHeader: {
      /** @description Book series unique ID */
      uid?: string;
      /** @description Book series title */
      title?: string;
    };
    /** @description Base book series, returned in search results */
    BookSeriesBase: {
      /** @description Book series unique ID */
      uid: string;
      /** @description Book series title */
      title: string;
      /** @description Year from which the book series was published */
      publishedYearFrom?: number;
      /** @description Month from which the book series was published */
      publishedMonthFrom?: number;
      /** @description Year to which the book series was published */
      publishedYearTo?: number;
      /** @description Month to which the book series was published */
      publishedMonthTo?: number;
      /** @description Number of pages */
      numberOfBooks?: number;
      /** @description Starting year of book series stories */
      yearFrom?: number;
      /** @description Ending year of book series stories */
      yearTo?: number;
      /** @description Whether it's a miniseries */
      miniseries?: boolean;
      /** @description Whether it's a e-book series */
      ebookSeries?: boolean;
    };
    /** @description Full book series, returned when queried using UID */
    BookSeriesFull: {
      /** @description Book series unique ID */
      uid: string;
      /** @description Book series title */
      title: string;
      /** @description Year from which the book series was published */
      publishedYearFrom?: number;
      /** @description Month from which the book series was published */
      publishedMonthFrom?: number;
      /** @description Year to which the book series was published */
      publishedYearTo?: number;
      /** @description Month to which the book series was published */
      publishedMonthTo?: number;
      /** @description Number of books in book series */
      numberOfBooks?: number;
      /** @description Starting year of book series stories */
      yearFrom?: number;
      /** @description Ending year of book series stories */
      yearTo?: number;
      /** @description Whether it's a miniseries */
      miniseries?: boolean;
      /** @description Whether it's a e-book series */
      ebookSeries?: boolean;
      /**
       * @description Book series this book series is included in
       * @default [
       *       []
       *     ]
       */
      parentSeries: components["schemas"]["BookSeriesBase"][];
      /**
       * @description Child book series included in this book series
       * @default [
       *       []
       *     ]
       */
      childSeries: components["schemas"]["BookSeriesBase"][];
      /**
       * @description Companies that published this book series
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Books included in this book series
       * @default [
       *       []
       *     ]
       */
      books: components["schemas"]["BookBase"][];
    };
    /** @description Response object for book series search */
    BookSeriesBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of book series matching given criteria
       * @default [
       *       []
       *     ]
       */
      bookSeries: components["schemas"]["BookSeriesBase"][];
    };
    /** @description Response object for single book series query */
    BookSeriesFullResponse: {
      bookSeries?: components["schemas"]["BookSeriesFull"];
    };
    /** @description Character search criteria */
    CharacterSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Character name */
      name?: string;
      /** @description Character gender */
      gender?: string;
      /** @description Whether it should be a deceased character */
      deceased?: boolean;
      /** @description Whether it should be a hologram */
      hologram?: boolean;
      /** @description Whether it should be a fictional character (from universe point of view) */
      fictionalCharacter?: boolean;
      /** @description Whether it should be a mirror universe character */
      mirror?: boolean;
      /** @description Whether it should be a alternate reality character */
      alternateReality?: boolean;
    };
    /** @description Header character, embedded in other objects */
    CharacterHeader: {
      /** @description Character unique ID */
      uid: string;
      /** @description Character name */
      name: string;
    };
    /** @description Base character, returned in search results */
    CharacterBase: {
      /** @description Character unique ID */
      uid: string;
      /** @description Character name */
      name: string;
      gender?: components["schemas"]["Gender"];
      /** @description Year the character was born */
      yearOfBirth?: number;
      /** @description Month the character was born */
      monthOfBirth?: number;
      /** @description Day the character was born */
      dayOfBirth?: number;
      /** @description Place of birth */
      placeOfBirth?: string;
      /** @description Year the character died */
      yearOfDeath?: number;
      /** @description Month the character died */
      monthOfDeath?: number;
      /** @description Day the character died */
      dayOfDeath?: number;
      /** @description Place of death */
      placeOfDeath?: string;
      /** @description Height in centimeters */
      height?: number;
      /** @description Weight in kilograms */
      weight?: number;
      /** @description Whether this character is deceased */
      deceased?: boolean;
      bloodType?: components["schemas"]["BloodType"];
      maritalStatus?: components["schemas"]["MaritalStatus"];
      /** @description Serial number */
      serialNumber?: string;
      /** @description Hologram activation date */
      hologramActivationDate?: string;
      /** @description Hologram status */
      hologramStatus?: string;
      /** @description Hologram date status */
      hologramDateStatus?: string;
      /** @description Whether this character is a hologram */
      hologram?: boolean;
      /** @description Whether this character is a fictional character (from universe point of view) */
      fictionalCharacter?: boolean;
      /** @description Whether this character is from mirror universe */
      mirror?: boolean;
      /** @description Whether this character is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Full character, returned when queried using UID */
    CharacterFull: {
      /** @description Character unique ID */
      uid: string;
      /** @description Character name */
      name: string;
      gender?: components["schemas"]["Gender"];
      /** @description Year the character was born */
      yearOfBirth?: number;
      /** @description Month the character was born */
      monthOfBirth?: number;
      /** @description Day the character was born */
      dayOfBirth?: number;
      /** @description Place of birth */
      placeOfBirth?: string;
      /** @description Year the character died */
      yearOfDeath?: number;
      /** @description Month the character died */
      monthOfDeath?: number;
      /** @description Day the character died */
      dayOfDeath?: number;
      /** @description Place of death */
      placeOfDeath?: string;
      /** @description Height in centimeters */
      height?: number;
      /** @description Weight in kilograms */
      weight?: number;
      /** @description Whether this character is deceased */
      deceased?: boolean;
      bloodType?: components["schemas"]["BloodType"];
      maritalStatus?: components["schemas"]["MaritalStatus"];
      /** @description Serial number */
      serialNumber?: string;
      /** @description Hologram activation date */
      hologramActivationDate?: string;
      /** @description Hologram status */
      hologramStatus?: string;
      /** @description Hologram date status */
      hologramDateStatus?: string;
      /** @description Whether this character is a hologram */
      hologram?: boolean;
      /** @description Whether this character is a fictional character (from universe point of view) */
      fictionalCharacter?: boolean;
      /** @description Whether this character is from mirror universe */
      mirror?: boolean;
      /** @description Whether this character is from alternate reality */
      alternateReality?: boolean;
      /**
       * @description Performers who played this character
       * @default [
       *       []
       *     ]
       */
      performers: components["schemas"]["PerformerBase"][];
      /**
       * @description Episodes in which this character appeared
       * @default [
       *       []
       *     ]
       */
      episodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Movies in which this character appeared
       * @default [
       *       []
       *     ]
       */
      movies: components["schemas"]["MovieBase"][];
      /**
       * @description Species this character belongs to
       * @default [
       *       []
       *     ]
       */
      characterSpecies: components["schemas"]["CharacterSpecies"][];
      /**
       * @description Relations with other characters
       * @default [
       *       []
       *     ]
       */
      characterRelations: components["schemas"]["CharacterRelation"][];
      /**
       * @description Titles this character holds
       * @default [
       *       []
       *     ]
       */
      titles: components["schemas"]["TitleBase"][];
      /**
       * @description Occupations of this character
       * @default [
       *       []
       *     ]
       */
      occupations: components["schemas"]["OccupationBase"][];
      /**
       * @description Organizations this character has affiliation with
       * @default [
       *       []
       *     ]
       */
      organizations: components["schemas"]["OrganizationBase"][];
    };
    /** @description Response object for characters search */
    CharacterBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of characters matching given criteria
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for single character query */
    CharacterFullResponse: {
      character?: components["schemas"]["CharacterFull"];
    };
    /** @description Relation between characters */
    CharacterRelation: {
      /** @description Relation type */
      type?: string;
      source?: components["schemas"]["CharacterHeader"];
      target?: components["schemas"]["CharacterHeader"];
    };
    /** @description Species a character belongs to */
    CharacterSpecies: {
      /** @description Entity unique ID */
      uid?: string;
      /** @description Species name */
      name?: string;
      /** @description Numerator */
      numerator?: number;
      /** @description Denominator */
      denominator?: number;
    };
    /** @description Comics search criteria */
    ComicsSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Comics title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the comics was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the comics was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of pages
       */
      numberOfPagesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of pages
       */
      numberOfPagesTo?: number;
      /**
       * Format: float
       * @description Starting stardate of comics story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comics story
       */
      stardateTo?: number;
      /**
       * Format: int32
       * @description Starting year of comics story
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of comics story
       */
      yearTo?: number;
      /** @description Whether it should be a photonovel */
      photonovel?: boolean;
      /** @description Whether it should be an adaptation of an episode or a movie */
      adaptation?: boolean;
    };
    /** @description Header comics, embedded in other objects */
    ComicsHeader: {
      /** @description Comics unique ID */
      uid: string;
      /** @description Comics title */
      title: string;
    };
    /** @description Base comics, returned in search results */
    ComicsBase: {
      /** @description Comics unique ID */
      uid: string;
      /** @description Comics title */
      title: string;
      /** @description Year the comics was published */
      publishedYear?: number;
      /** @description Month the comics was published */
      publishedMonth?: number;
      /** @description Day the comics was published */
      publishedDay?: number;
      /** @description Cover publication year */
      coverYear?: number;
      /** @description Cover publication month */
      coverMonth?: number;
      /** @description Cover publication day */
      coverDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of comic story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comic story
       */
      stardateTo?: number;
      /** @description Starting year of comic story */
      yearFrom?: number;
      /** @description Ending year of comic story */
      yearTo?: number;
      /** @description Whether it's a photonovel */
      photonovel?: boolean;
      /** @description Whether it's an adaptation of an episode or a movie */
      adaptation?: boolean;
    };
    /** @description Full comics, returned when queried using UID */
    ComicsFull: {
      /** @description Comics unique ID */
      uid: string;
      /** @description Comics title */
      title: string;
      /** @description Year the comics was published */
      publishedYear?: number;
      /** @description Month the comics was published */
      publishedMonth?: number;
      /** @description Day the comics was published */
      publishedDay?: number;
      /** @description Cover publication year */
      coverYear?: number;
      /** @description Cover publication month */
      coverMonth?: number;
      /** @description Cover publication day */
      coverDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of comic story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comic story
       */
      stardateTo?: number;
      /** @description Starting year of comic  story */
      yearFrom?: number;
      /** @description Ending year of comic story */
      yearTo?: number;
      /** @description Whether it's a photonovel */
      photonovel?: boolean;
      /** @description Whether it's an adaptation of an episode or a movie */
      adaptation?: boolean;
      /**
       * @description Comic series this comics is included in
       * @default [
       *       []
       *     ]
       */
      comicSeries: components["schemas"]["ComicSeriesBase"][];
      /**
       * @description Writers involved in the comics
       * @default [
       *       []
       *     ]
       */
      writers: components["schemas"]["StaffBase"][];
      /**
       * @description Artists involved in the comics
       * @default [
       *       []
       *     ]
       */
      artists: components["schemas"]["StaffBase"][];
      /**
       * @description Editors involved in the comics
       * @default [
       *       []
       *     ]
       */
      editors: components["schemas"]["StaffBase"][];
      /**
       * @description Other staff involved in the comics
       * @default [
       *       []
       *     ]
       */
      staff: components["schemas"]["StaffBase"][];
      /**
       * @description Comics publishers
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Characters appearing in the comics
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
      /**
       * @description Comic collections this comics is included in
       * @default [
       *       []
       *     ]
       */
      comicCollections: components["schemas"]["ComicCollectionBase"][];
    };
    /** @description Response object for comics search */
    ComicsBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of comics matching given criteria
       * @default [
       *       []
       *     ]
       */
      comics: components["schemas"]["ComicsBase"][];
    };
    /** @description Response object for single comics query */
    ComicsFullResponse: {
      comics?: components["schemas"]["ComicsFull"];
    };
    /** @description Comic collection search criteria */
    ComicCollectionSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Comic collection title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the comic collection was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the comic collection was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of pages
       */
      numberOfPagesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of pages
       */
      numberOfPagesTo?: number;
      /**
       * Format: float
       * @description Starting stardate of comic collection stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comic collections stories
       */
      stardateTo?: number;
      /**
       * Format: int32
       * @description Starting year of comic collection stories
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of comic collections stories
       */
      yearTo?: number;
      /** @description Whether it should be an photonovel collection */
      photonovel?: boolean;
    };
    /** @description Header comic collection, embedded in other objects */
    ComicCollectionHeader: {
      /** @description Comic collection unique ID */
      uid: string;
      /** @description Comic collection title */
      title: string;
    };
    /** @description Base comic collection, returned in search results */
    ComicCollectionBase: {
      /** @description Comic collection unique ID */
      uid: string;
      /** @description Comic collection title */
      title: string;
      /** @description Year the comic collection was published */
      publishedYear?: number;
      /** @description Month the comic collection was published */
      publishedMonth?: number;
      /** @description Day the comic collection was published */
      publishedDay?: number;
      /** @description Cover publication year */
      coverYear?: number;
      /** @description Cover publication month */
      coverMonth?: number;
      /** @description Cover publication day */
      coverDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of comic collection stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comic collection stories
       */
      stardateTo?: number;
      /** @description Starting year of comic collection stories */
      yearFrom?: number;
      /** @description Ending year of comic collection stories */
      yearTo?: number;
      /** @description Whether it's a photonovel collection */
      photonovel?: boolean;
    };
    /** @description Full comic collection, returned when queried using UID */
    ComicCollectionFull: {
      /** @description Comic collection unique ID */
      uid: string;
      /** @description Comic collection title */
      title: string;
      /** @description Year the comic collection was published */
      publishedYear?: number;
      /** @description Month the comic collection was published */
      publishedMonth?: number;
      /** @description Day the comic collection was published */
      publishedDay?: number;
      /** @description Cover publication year */
      coverYear?: number;
      /** @description Cover publication month */
      coverMonth?: number;
      /** @description Cover publication day */
      coverDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of comic collection stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comic collection stories
       */
      stardateTo?: number;
      /** @description Starting year of comic collection stories */
      yearFrom?: number;
      /** @description Ending year of comic collection stories */
      yearTo?: number;
      /** @description Whether it's a photonovel collection */
      photonovel?: boolean;
      /**
       * @description Comic series this comic collection is included in
       * @default [
       *       []
       *     ]
       */
      comicSeries: components["schemas"]["ComicSeriesBase"][];
      /**
       * @description Writers involved in the comic collection
       * @default [
       *       []
       *     ]
       */
      writers: components["schemas"]["StaffBase"][];
      /**
       * @description Artists involved in the comic collection
       * @default [
       *       []
       *     ]
       */
      artists: components["schemas"]["StaffBase"][];
      /**
       * @description Editors involved in the comic collection
       * @default [
       *       []
       *     ]
       */
      editors: components["schemas"]["StaffBase"][];
      /**
       * @description Other staff involved in the comic collection
       * @default [
       *       []
       *     ]
       */
      staff: components["schemas"]["StaffBase"][];
      /**
       * @description Comic collection publishers
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Characters appearing in the comic collection
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
      /**
       * @description Comics included in this comic collection
       * @default [
       *       []
       *     ]
       */
      comics: components["schemas"]["ComicsBase"][];
    };
    /** @description Response object for comic collections search */
    ComicCollectionBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of comic collections matching given criteria
       * @default [
       *       []
       *     ]
       */
      comicCollections: components["schemas"]["ComicCollectionBase"][];
    };
    /** @description Response object for single comic collection query */
    ComicCollectionFullResponse: {
      comicCollection?: components["schemas"]["ComicCollectionFull"];
    };
    /** @description Full comic collection, returned when queried using UID (V2) */
    ComicCollectionV2Full: {
      /** @description Comic collection unique ID */
      uid: string;
      /** @description Comic collection title */
      title: string;
      /** @description Year the comic collection was published */
      publishedYear?: number;
      /** @description Month the comic collection was published */
      publishedMonth?: number;
      /** @description Day the comic collection was published */
      publishedDay?: number;
      /** @description Cover publication year */
      coverYear?: number;
      /** @description Cover publication month */
      coverMonth?: number;
      /** @description Cover publication day */
      coverDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /**
       * Format: float
       * @description Starting stardate of comic collection stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comic collection stories
       */
      stardateTo?: number;
      /** @description Starting year of comic collection stories */
      yearFrom?: number;
      /** @description Ending year of comic collection stories */
      yearTo?: number;
      /** @description Whether it's a photonovel collection */
      photonovel?: boolean;
      /**
       * @description Comic series this comic collection is included in
       * @default [
       *       []
       *     ]
       */
      comicSeries: components["schemas"]["ComicSeriesBase"][];
      /**
       * @description Comic series this comic collection includes
       * @default [
       *       []
       *     ]
       */
      childComicSeries: components["schemas"]["ComicSeriesBase"][];
      /**
       * @description Writers involved in the comic collection
       * @default [
       *       []
       *     ]
       */
      writers: components["schemas"]["StaffV2Base"][];
      /**
       * @description Artists involved in the comic collection
       * @default [
       *       []
       *     ]
       */
      artists: components["schemas"]["StaffV2Base"][];
      /**
       * @description Editors involved in the comic collection
       * @default [
       *       []
       *     ]
       */
      editors: components["schemas"]["StaffV2Base"][];
      /**
       * @description Other staff involved in the comic collection
       * @default [
       *       []
       *     ]
       */
      staff: components["schemas"]["StaffV2Base"][];
      /**
       * @description Comic collection publishers
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyV2Base"][];
      /**
       * @description Characters appearing in the comic collection
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
      /**
       * @description Comics included in this comic collection
       * @default [
       *       []
       *     ]
       */
      comics: components["schemas"]["ComicsBase"][];
    };
    /** @description Response object for single comic collection query (V2) */
    ComicCollectionV2FullResponse: {
      comicCollection?: components["schemas"]["ComicCollectionV2Full"];
    };
    /** @description Comic series search criteria */
    ComicSeriesSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Comic series title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the comic series was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the comic series was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of issues
       */
      numberOfIssuesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of issues
       */
      numberOfIssuesTo?: number;
      /**
       * Format: float
       * @description Starting stardate of comic series stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Starting stardate of comic series stories
       */
      stardateTo?: number;
      /**
       * Format: int32
       * @description Starting year of comic series stories
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of comic series stories
       */
      yearTo?: number;
      /** @description Whether it should be a miniseries */
      miniseries?: boolean;
      /** @description Whether it should be photonovel series */
      photonovelSeries?: boolean;
    };
    /** @description Header book series, embedded in other objects */
    ComicSeriesHeader: {
      /** @description Comic series unique ID */
      uid: string;
      /** @description Comic series title */
      title: string;
    };
    /** @description Base comic series, returned in search results */
    ComicSeriesBase: {
      /** @description Comic series unique ID */
      uid: string;
      /** @description Comic series title */
      title: string;
      /** @description Year from which the comic series was published */
      publishedYearFrom?: number;
      /** @description Month from which the comic series was published */
      publishedMonthFrom?: number;
      /** @description Day from which the comic series was published */
      publishedDayFrom?: number;
      /** @description Year to which the comic series was published */
      publishedYearTo?: number;
      /** @description Month to which the comic series was published */
      publishedMonthTo?: number;
      /** @description Day to which the comic series was published */
      publishedDayTo?: number;
      /** @description Number of issues */
      numberOfIssues?: number;
      /**
       * Format: float
       * @description Starting stardate of comic series stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comic series stories
       */
      stardateTo?: number;
      /** @description Starting year of comic series stories */
      yearFrom?: number;
      /** @description Ending year of comic series stories */
      yearTo?: number;
      /** @description Whether it's a miniseries */
      miniseries?: boolean;
      /** @description Whether it's a photonovel series */
      photonovelSeries?: boolean;
    };
    /** @description Full comic series, returned when queried using UID */
    ComicSeriesFull: {
      /** @description Comic series unique ID */
      uid: string;
      /** @description Comic series title */
      title: string;
      /** @description Year from which the comic series was published */
      publishedYearFrom?: number;
      /** @description Month from which the comic series was published */
      publishedMonthFrom?: number;
      /** @description Day from which the comic series was published */
      publishedDayFrom?: number;
      /** @description Year to which the comic series was published */
      publishedYearTo?: number;
      /** @description Month to which the comic series was published */
      publishedMonthTo?: number;
      /** @description Day to which the comic series was published */
      publishedDayTo?: number;
      /** @description Number of issues */
      numberOfIssues?: number;
      /**
       * Format: float
       * @description Starting stardate of comic series stories
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of comic series stories
       */
      stardateTo?: number;
      /** @description Starting year of comic series stories */
      yearFrom?: number;
      /** @description Ending year of comic series stories */
      yearTo?: number;
      /** @description Whether it's a miniseries */
      miniseries?: boolean;
      /** @description Whether it's a photonovel series */
      photonovelSeries?: boolean;
      /**
       * @description Comic series this comic series is included in
       * @default [
       *       []
       *     ]
       */
      parentSeries: components["schemas"]["ComicSeriesBase"][];
      /**
       * @description Child comic series included in this comic series
       * @default [
       *       []
       *     ]
       */
      childSeries: components["schemas"]["ComicSeriesBase"][];
      /**
       * @description Companies that published this comic series
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Comics included in this comic series
       * @default [
       *       []
       *     ]
       */
      comics: components["schemas"]["ComicsBase"][];
    };
    /** @description Response object for comic series search */
    ComicSeriesBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of comic series matching given criteria
       * @default [
       *       []
       *     ]
       */
      comicSeries: components["schemas"]["ComicSeriesBase"][];
    };
    /** @description Response object for single comic series query */
    ComicSeriesFullResponse: {
      comicSeries?: components["schemas"]["ComicSeriesFull"];
    };
    /** @description Comic strip search criteria */
    ComicStripSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Comic strip title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the comic strip was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the comic strip was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of pages
       */
      numberOfPagesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of pages
       */
      numberOfPagesTo?: number;
      /**
       * Format: int32
       * @description Starting year of comic strip story
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of comic strip story
       */
      yearTo?: number;
    };
    /** @description Header comic strip, embedded in other objects */
    ComicStripHeader: {
      /** @description Comic strip unique ID */
      uid: string;
      /** @description Comic strip title */
      title: string;
    };
    /** @description Base comic strip, returned in search results */
    ComicStripBase: {
      /** @description Comic strip unique ID */
      uid: string;
      /** @description Comic strip title */
      title: string;
      /** @description Title of the periodical the comic strip was published in */
      periodical?: string;
      /** @description Year from which the comic strip was published */
      publishedYearFrom?: number;
      /** @description Month from which the comic strip was published */
      publishedMonthFrom?: number;
      /** @description Day from which the comic strip was published */
      publishedDayFrom?: number;
      /** @description Year to which the comic strip was published */
      publishedYearTo?: number;
      /** @description Month to which the comic strip was published */
      publishedMonthTo?: number;
      /** @description Day to which the comic strip was published */
      publishedDayTo?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /** @description Starting year of comic strip story */
      yearFrom?: number;
      /** @description Ending year of comic strip story */
      yearTo?: number;
    };
    /** @description Full comic strip, returned when queried using UID */
    ComicStripFull: {
      /** @description Comic strip unique ID */
      uid: string;
      /** @description Comic strip title */
      title: string;
      /** @description Title of the periodical the comic strip was published in */
      periodical?: string;
      /** @description Year from which the comic strip was published */
      publishedYearFrom?: number;
      /** @description Month from which the comic strip was published */
      publishedMonthFrom?: number;
      /** @description Day from which the comic strip was published */
      publishedDayFrom?: number;
      /** @description Year to which the comic strip was published */
      publishedYearTo?: number;
      /** @description Month to which the comic strip was published */
      publishedMonthTo?: number;
      /** @description Day to which the comic strip was published */
      publishedDayTo?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /** @description Starting year of comic strip stories */
      yearFrom?: number;
      /** @description Ending year of comic strip stories */
      yearTo?: number;
      /**
       * @description Comic series this comic strip is included in
       * @default [
       *       []
       *     ]
       */
      comicSeries: components["schemas"]["ComicSeriesBase"][];
      /**
       * @description Writers involved in the comic strip
       * @default [
       *       []
       *     ]
       */
      writers: components["schemas"]["StaffBase"][];
      /**
       * @description Artists involved in the comic strip
       * @default [
       *       []
       *     ]
       */
      artists: components["schemas"]["StaffBase"][];
      /**
       * @description Characters appearing in the comic strip
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for comic strip search */
    ComicStripBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of comic strips matching given criteria
       * @default [
       *       []
       *     ]
       */
      comicStrips: components["schemas"]["ComicStripBase"][];
    };
    /** @description Response object for single comic strip query */
    ComicStripFullResponse: {
      comicStrip?: components["schemas"]["ComicStripFull"];
    };
    /** @description Company search criteria (V2) */
    CompanyV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Company name */
      name?: string;
      /** @description Whether it should be a broadcaster */
      broadcaster?: boolean;
      /** @description Whether it should be a streaming service */
      streamingService?: boolean;
      /** @description Whether it should be a collectible company */
      collectibleCompany?: boolean;
      /** @description Whether it should be a conglomerate */
      conglomerate?: boolean;
      /** @description Whether it should be a visual effects company */
      visualEffectsCompany?: boolean;
      /** @description Whether it should be a digital visual effects company */
      digitalVisualEffectsCompany?: boolean;
      /** @description Whether it should be a distributor */
      distributor?: boolean;
      /** @description Whether it should be a game company */
      gameCompany?: boolean;
      /** @description Whether it should be a film equipment company */
      filmEquipmentCompany?: boolean;
      /** @description Whether it should be a make-up effects studio */
      makeUpEffectsStudio?: boolean;
      /** @description Whether it should be a matte painting company */
      mattePaintingCompany?: boolean;
      /** @description Whether it should be a model and miniature effects company */
      modelAndMiniatureEffectsCompany?: boolean;
      /** @description Whether it should be a post-production company */
      postProductionCompany?: boolean;
      /** @description Whether it should be a production company */
      productionCompany?: boolean;
      /** @description Whether it should be a prop company */
      propCompany?: boolean;
      /** @description Whether it should be a record label */
      recordLabel?: boolean;
      /** @description Whether it should be a special effects company */
      specialEffectsCompany?: boolean;
      /** @description Whether it should be a TV and film production company */
      tvAndFilmProductionCompany?: boolean;
      /** @description Whether it should be a video game company */
      videoGameCompany?: boolean;
      /** @description Whether it should be a publisher */
      publisher?: boolean;
      /** @description Whether it should be a publication art studio */
      publicationArtStudio?: boolean;
    };
    /** @description Header company, embedded in other objects */
    CompanyHeader: {
      /** @description Company unique ID */
      uid: string;
      /** @description Company title */
      name: string;
    };
    /** @description Base company, returned in search results */
    CompanyBase: {
      /** @description Company unique ID */
      uid: string;
      /** @description Company name */
      name: string;
      /** @description Whether it's a broadcaster */
      broadcaster?: boolean;
      /** @description Whether it's a collectible company */
      collectibleCompany?: boolean;
      /** @description Whether it's a conglomerate */
      conglomerate?: boolean;
      /** @description Whether it's a digital visual effects company */
      digitalVisualEffectsCompany?: boolean;
      /** @description Whether it's a distributor */
      distributor?: boolean;
      /** @description Whether it's a game company */
      gameCompany?: boolean;
      /** @description Whether it's a film equipment company */
      filmEquipmentCompany?: boolean;
      /** @description Whether it's a make-up effects studio */
      makeUpEffectsStudio?: boolean;
      /** @description Whether it's a matte painting company */
      mattePaintingCompany?: boolean;
      /** @description Whether it's a model and miniature effects company */
      modelAndMiniatureEffectsCompany?: boolean;
      /** @description Whether it's a post-production company */
      postProductionCompany?: boolean;
      /** @description Whether it's a production company */
      productionCompany?: boolean;
      /** @description Whether it's a prop company */
      propCompany?: boolean;
      /** @description Whether it's a record label */
      recordLabel?: boolean;
      /** @description Whether it's a special effects company */
      specialEffectsCompany?: boolean;
      /** @description Whether it's a TV and film production company */
      tvAndFilmProductionCompany?: boolean;
      /** @description Whether it's a video game company */
      videoGameCompany?: boolean;
    };
    /** @description Full company, returned when queried using UID */
    CompanyFull: {
      /** @description Company unique ID */
      uid: string;
      /** @description Company name */
      name: string;
      /** @description Whether it's a broadcaster */
      broadcaster?: boolean;
      /** @description Whether it's a collectible company */
      collectibleCompany?: boolean;
      /** @description Whether it's a conglomerate */
      conglomerate?: boolean;
      /** @description Whether it's a digital visual effects company */
      digitalVisualEffectsCompany?: boolean;
      /** @description Whether it's a distributor */
      distributor?: boolean;
      /** @description Whether it's a game company */
      gameCompany?: boolean;
      /** @description Whether it's a film equipment company */
      filmEquipmentCompany?: boolean;
      /** @description Whether it's a make-up effects studio */
      makeUpEffectsStudio?: boolean;
      /** @description Whether it's a matte painting company */
      mattePaintingCompany?: boolean;
      /** @description Whether it's a model and miniature effects company */
      modelAndMiniatureEffectsCompany?: boolean;
      /** @description Whether it's a post-production company */
      postProductionCompany?: boolean;
      /** @description Whether it's a production company */
      productionCompany?: boolean;
      /** @description Whether it's a prop company */
      propCompany?: boolean;
      /** @description Whether it's a record label */
      recordLabel?: boolean;
      /** @description Whether it's a special effects company */
      specialEffectsCompany?: boolean;
      /** @description Whether it's a TV and film production company */
      tvAndFilmProductionCompany?: boolean;
      /** @description Whether it's a video game company */
      videoGameCompany?: boolean;
    };
    /** @description Response object for companies search */
    CompanyBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of companies matching given criteria
       * @default [
       *       []
       *     ]
       */
      companies: components["schemas"]["CompanyBase"][];
    };
    /** @description Response object for single company query */
    CompanyFullResponse: {
      company?: components["schemas"]["CompanyFull"];
    };
    /** @description Base company, returned in search results (V2) */
    CompanyV2Base: {
      /** @description Company unique ID */
      uid: string;
      /** @description Company name */
      name: string;
      /** @description Whether it's a broadcaster */
      broadcaster?: boolean;
      /** @description Whether it's a streaming service */
      streamingService?: boolean;
      /** @description Whether it's a collectible company */
      collectibleCompany?: boolean;
      /** @description Whether it's a conglomerate */
      conglomerate?: boolean;
      /** @description Whether it's a visual effects company */
      visualEffectsCompany?: boolean;
      /** @description Whether it's a digital visual effects company */
      digitalVisualEffectsCompany?: boolean;
      /** @description Whether it's a distributor */
      distributor?: boolean;
      /** @description Whether it's a game company */
      gameCompany?: boolean;
      /** @description Whether it's a film equipment company */
      filmEquipmentCompany?: boolean;
      /** @description Whether it's a make-up effects studio */
      makeUpEffectsStudio?: boolean;
      /** @description Whether it's a matte painting company */
      mattePaintingCompany?: boolean;
      /** @description Whether it's a model and miniature effects company */
      modelAndMiniatureEffectsCompany?: boolean;
      /** @description Whether it's a post-production company */
      postProductionCompany?: boolean;
      /** @description Whether it's a production company */
      productionCompany?: boolean;
      /** @description Whether it's a prop company */
      propCompany?: boolean;
      /** @description Whether it's a record label */
      recordLabel?: boolean;
      /** @description Whether it's a special effects company */
      specialEffectsCompany?: boolean;
      /** @description Whether it's a TV and film production company */
      tvAndFilmProductionCompany?: boolean;
      /** @description Whether it's a video game company */
      videoGameCompany?: boolean;
      /** @description Whether it's a publisher */
      publisher?: boolean;
      /** @description Whether it's a publication art studio */
      publicationArtStudio?: boolean;
    };
    /** @description Full company, returned when queried using UID (V2) */
    CompanyV2Full: {
      /** @description Company unique ID */
      uid: string;
      /** @description Company name */
      name: string;
      /** @description Whether it's a broadcaster */
      broadcaster?: boolean;
      /** @description Whether it's a streaming service */
      streamingService?: boolean;
      /** @description Whether it's a collectible company */
      collectibleCompany?: boolean;
      /** @description Whether it's a conglomerate */
      conglomerate?: boolean;
      /** @description Whether it's a visual effects company */
      visualEffectsCompany?: boolean;
      /** @description Whether it's a digital visual effects company */
      digitalVisualEffectsCompany?: boolean;
      /** @description Whether it's a distributor */
      distributor?: boolean;
      /** @description Whether it's a game company */
      gameCompany?: boolean;
      /** @description Whether it's a film equipment company */
      filmEquipmentCompany?: boolean;
      /** @description Whether it's a make-up effects studio */
      makeUpEffectsStudio?: boolean;
      /** @description Whether it's a matte painting company */
      mattePaintingCompany?: boolean;
      /** @description Whether it's a model and miniature effects company */
      modelAndMiniatureEffectsCompany?: boolean;
      /** @description Whether it's a post-production company */
      postProductionCompany?: boolean;
      /** @description Whether it's a production company */
      productionCompany?: boolean;
      /** @description Whether it's a prop company */
      propCompany?: boolean;
      /** @description Whether it's a record label */
      recordLabel?: boolean;
      /** @description Whether it's a special effects company */
      specialEffectsCompany?: boolean;
      /** @description Whether it's a TV and film production company */
      tvAndFilmProductionCompany?: boolean;
      /** @description Whether it's a video game company */
      videoGameCompany?: boolean;
      /** @description Whether it's a publisher */
      publisher?: boolean;
      /** @description Whether it's a publication art studio */
      publicationArtStudio?: boolean;
    };
    /** @description Response object for companies search (V2) */
    CompanyV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of companies matching given criteria
       * @default [
       *       []
       *     ]
       */
      companies: components["schemas"]["CompanyV2Base"][];
    };
    /** @description Response object for single company query (V2) */
    CompanyV2FullResponse: {
      company?: components["schemas"]["CompanyV2Full"];
    };
    /** @description Conflict search criteria */
    ConflictSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Conflict name */
      name?: string;
      /**
       * Format: int32
       * @description Starting year of the conflict
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of the conflict
       */
      yearTo?: number;
      /** @description Whether it should be an Earth conflict */
      earthConflict?: boolean;
      /** @description Whether this conflict should be a part of war involving Federation */
      federationWar?: boolean;
      /** @description Whether this conflict should be a part of war involving the Klingons */
      klingonWar?: boolean;
      /** @description Whether this conflict should be a Dominion war battle */
      dominionWarBattle?: boolean;
      /** @description Whether this conflict should be from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Header conflict, embedded in other objects */
    ConflictHeader: {
      /** @description Conflict unique ID */
      uid: string;
      /** @description Conflict name */
      name: string;
    };
    /** @description Base conflict, returned in search results */
    ConflictBase: {
      /** @description Conflict unique ID */
      uid: string;
      /** @description Conflict name */
      name: string;
      /** @description Starting year of the conflict */
      yearFrom?: number;
      /** @description Ending year of the conflict */
      yearTo?: number;
      /** @description Whether it was an Earth conflict */
      earthConflict?: boolean;
      /** @description Whether this conflict is part of war involving Federation */
      federationWar?: boolean;
      /** @description Whether this conflict is part of war involving the Klingons */
      klingonWar?: boolean;
      /** @description Whether this conflict is a Dominion war battle */
      dominionWarBattle?: boolean;
      /** @description Whether this conflict is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Base conflict, returned in search results */
    ConflictFull: {
      /** @description Conflict unique ID */
      uid: string;
      /** @description Conflict name */
      name: string;
      /** @description Starting year of the conflict */
      yearFrom?: number;
      /** @description Ending year of the conflict */
      yearTo?: number;
      /** @description Whether it is an Earth conflict */
      earthConflict?: boolean;
      /** @description Whether this conflict is a part of war involving Federation */
      federationWar?: boolean;
      /** @description Whether this conflict is a part of war involving the Klingons */
      klingonWar?: boolean;
      /** @description Whether this conflict is a Dominion war battle */
      dominionWarBattle?: boolean;
      /** @description Whether this conflict is from alternate reality */
      alternateReality?: boolean;
      /**
       * @description Locations this conflict occurred at
       * @default [
       *       []
       *     ]
       */
      locations: components["schemas"]["LocationBase"][];
      /**
       * @description Organization involved in conflict on first side
       * @default [
       *       []
       *     ]
       */
      firstSideBelligerents: components["schemas"]["OrganizationBase"][];
      /**
       * @description Commanders involved in conflict on first side
       * @default [
       *       []
       *     ]
       */
      firstSideCommanders: components["schemas"]["CharacterBase"][];
      /**
       * @description Organization involved in conflict on second side
       * @default [
       *       []
       *     ]
       */
      secondSideBelligerents: components["schemas"]["OrganizationBase"][];
      /**
       * @description Commanders involved in conflict on second side
       * @default [
       *       []
       *     ]
       */
      secondSideCommanders: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for conflicts search */
    ConflictBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of conflicts matching given criteria
       * @default [
       *       []
       *     ]
       */
      conflicts: components["schemas"]["ConflictBase"][];
    };
    /** @description Response object for single conflict query */
    ConflictFullResponse: {
      conflict?: components["schemas"]["ConflictFull"];
    };
    /** @description Base conflict, returned in search results (V2) */
    ConflictV2Full: {
      /** @description Conflict unique ID */
      uid: string;
      /** @description Conflict name */
      name: string;
      /** @description Starting year of the conflict */
      yearFrom?: number;
      /** @description Ending year of the conflict */
      yearTo?: number;
      /** @description Whether it is an Earth conflict */
      earthConflict?: boolean;
      /** @description Whether this conflict is a part of war involving Federation */
      federationWar?: boolean;
      /** @description Whether this conflict is a part of war involving the Klingons */
      klingonWar?: boolean;
      /** @description Whether this conflict is a Dominion war battle */
      dominionWarBattle?: boolean;
      /** @description Whether this conflict is from alternate reality */
      alternateReality?: boolean;
      /**
       * @description Locations this conflict occurred at
       * @default [
       *       []
       *     ]
       */
      locations: components["schemas"]["LocationBase"][];
      /**
       * @description Organization involved in conflict on first side
       * @default [
       *       []
       *     ]
       */
      firstSideBelligerents: components["schemas"]["OrganizationBase"][];
      /**
       * @description Locations involved in conflict on first side
       * @default [
       *       []
       *     ]
       */
      firstSideLocations: components["schemas"]["LocationV2Base"][];
      /**
       * @description Commanders involved in conflict on first side
       * @default [
       *       []
       *     ]
       */
      firstSideCommanders: components["schemas"]["CharacterBase"][];
      /**
       * @description Organization involved in conflict on second side
       * @default [
       *       []
       *     ]
       */
      secondSideBelligerents: components["schemas"]["OrganizationBase"][];
      /**
       * @description Locations involved in conflict on second side
       * @default [
       *       []
       *     ]
       */
      secondSideLocations: components["schemas"]["LocationV2Base"][];
      /**
       * @description Commanders involved in conflict on second side
       * @default [
       *       []
       *     ]
       */
      secondSideCommanders: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for single conflict query (V2) */
    ConflictV2FullResponse: {
      conflict?: components["schemas"]["ConflictV2Full"];
    };
    /** @description Content langauge */
    ContentLanguage: {
      /** @description Language unique ID */
      uid?: string;
      /** @description Language name */
      name?: string;
      /** @description ISO 639-1 code */
      iso6391Code?: string;
    };
    /**
     * @description Content rating system
     * @enum {string}
     */
    ContentRatingSystem:
      | "BBFC"
      | "OFLC"
      | "OFLCNZ"
      | "DJCTQ"
      | "MDA"
      | "MPAA"
      | "CHVRS"
      | "RCQ"
      | "IFCO"
      | "FSK"
      | "NICAM"
      | "MCCYP"
      | "EIRIN"
      | "HK"
      | "CBFC"
      | "NMHH"
      | "VRC"
      | "RSAC"
      | "ESRB"
      | "ELSPA"
      | "PEGI"
      | "USK"
      | "SELL"
      | "ADESE"
      | "GSRR"
      | "ITUNES";
    /** @description Rating of video release, etc. */
    ContentRating: {
      /** @description Rating unique ID */
      uid?: string;
      contentRatingSystem?: components["schemas"]["ContentRatingSystem"];
      /** @description Rating within specified content rating system */
      rating?: string;
    };
    /** @description Real-world country */
    Country: {
      /** @description Country unique ID */
      uid?: string;
      /** @description Country name */
      name?: string;
      /** @description ISO 3166-1 alpha-2 code */
      iso31661Alpha2Code?: string;
    };
    /** @description Data version */
    DataVersion: {
      /** @description Version of the data served by this STAPI instance */
      dataVersion: string;
    };
    /** @description Header element, embedded in other objects */
    ElementHeader: {
      /** @description Element unique ID */
      uid: string;
      /** @description Element name */
      name: string;
    };
    /** @description Base element, returned in search results */
    ElementBase: {
      /** @description Element unique ID */
      uid: string;
      /** @description Element name */
      name: string;
      /** @description Element symbol */
      symbol?: string;
      /** @description Element atomic number */
      atomicNumber?: number;
      /** @description Element atomic weight */
      atomicWeight?: number;
      /** @description Whether it's a transuranium */
      transuranium?: boolean;
      /** @description Whether it belongs to Gamma series */
      gammaSeries?: boolean;
      /** @description Whether it belongs to Hypersonic series */
      hypersonicSeries?: boolean;
      /** @description Whether it belongs to Mega series */
      megaSeries?: boolean;
      /** @description Whether it belongs to Omega series */
      omegaSeries?: boolean;
      /** @description Whether it belongs to Transonic series */
      transonicSeries?: boolean;
      /** @description Whether it belongs to World series */
      worldSeries?: boolean;
    };
    /** @description Full element, returned when queried using UID */
    ElementFull: {
      /** @description Element unique ID */
      uid: string;
      /** @description Element name */
      name: string;
      /** @description Element symbol */
      symbol?: string;
      /** @description Element atomic number */
      atomicNumber?: number;
      /** @description Element atomic weight */
      atomicWeight?: number;
      /** @description Whether it's a transuranium */
      transuranium?: boolean;
      /** @description Whether it belongs to Gamma series */
      gammaSeries?: boolean;
      /** @description Whether it belongs to Hypersonic series */
      hypersonicSeries?: boolean;
      /** @description Whether it belongs to Mega series */
      megaSeries?: boolean;
      /** @description Whether it belongs to Omega series */
      omegaSeries?: boolean;
      /** @description Whether it belongs to Transonic series */
      transonicSeries?: boolean;
      /** @description Whether it belongs to World series */
      worldSeries?: boolean;
    };
    /** @description Response object for elements search */
    ElementBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of elements matching given criteria
       * @default [
       *       []
       *     ]
       */
      elements: components["schemas"]["ElementBase"][];
    };
    /** @description Response object for single element query */
    ElementFullResponse: {
      element?: components["schemas"]["ElementFull"];
    };
    /** @description Base element, returned in search results (v2) */
    ElementV2Base: {
      /** @description Element unique ID */
      uid: string;
      /** @description Element name */
      name: string;
      /** @description Element symbol */
      symbol?: string;
      /** @description Element atomic number */
      atomicNumber?: number;
      /** @description Element atomic weight */
      atomicWeight?: number;
      /** @description Whether it's a transuranic */
      transuranic?: boolean;
      /** @description Whether it belongs to Gamma series */
      gammaSeries?: boolean;
      /** @description Whether it belongs to Hypersonic series */
      hypersonicSeries?: boolean;
      /** @description Whether it belongs to Mega series */
      megaSeries?: boolean;
      /** @description Whether it belongs to Omega series */
      omegaSeries?: boolean;
      /** @description Whether it belongs to Transonic series */
      transonicSeries?: boolean;
      /** @description Whether it belongs to World series */
      worldSeries?: boolean;
    };
    /** @description Element search criteria */
    ElementV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Element name */
      name?: string;
      /** @description Element symbol */
      symbol?: string;
      /** @description Whether it should be a transuranic */
      transuranic?: boolean;
      /** @description Whether it should belong to Gamma series */
      gammaSeries?: boolean;
      /** @description Whether it should belong to Hypersonic series */
      hypersonicSeries?: boolean;
      /** @description Whether it should belong to Mega series */
      megaSeries?: boolean;
      /** @description Whether it should belong to Omega series */
      omegaSeries?: boolean;
      /** @description Whether it should belong to Transonic series */
      transonicSeries?: boolean;
      /** @description Whether it should belong to World series */
      worldSeries?: boolean;
    };
    /** @description Full element, returned when queried using UID (V2) */
    ElementV2Full: {
      /** @description Element unique ID */
      uid: string;
      /** @description Element name */
      name: string;
      /** @description Element symbol */
      symbol?: string;
      /** @description Element atomic number */
      atomicNumber?: number;
      /** @description Element atomic weight */
      atomicWeight?: number;
      /** @description Whether it's a transuranic */
      transuranic?: boolean;
      /** @description Whether it belongs to Gamma series */
      gammaSeries?: boolean;
      /** @description Whether it belongs to Hypersonic series */
      hypersonicSeries?: boolean;
      /** @description Whether it belongs to Mega series */
      megaSeries?: boolean;
      /** @description Whether it belongs to Omega series */
      omegaSeries?: boolean;
      /** @description Whether it belongs to Transonic series */
      transonicSeries?: boolean;
      /** @description Whether it belongs to World series */
      worldSeries?: boolean;
    };
    /** @description Response object for elements search (V2) */
    ElementV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of elements matching given criteria
       * @default [
       *       []
       *     ]
       */
      elements: components["schemas"]["ElementV2Base"][];
    };
    /** @description Response object for single element query (V2) */
    ElementV2FullResponse: {
      element?: components["schemas"]["ElementV2Full"];
    };
    /** @description Episode search criteria */
    EpisodeSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Episode title */
      title?: string;
      /**
       * Format: int32
       * @description Minimal season number
       */
      seasonNumberFrom?: number;
      /**
       * Format: int32
       * @description Maximal season number
       */
      seasonNumberTo?: number;
      /**
       * Format: int32
       * @description Minimal episode number in season
       */
      episodeNumberFrom?: number;
      /**
       * Format: int32
       * @description Maximal episode number in season
       */
      episodeNumberTo?: number;
      /** @description Production serial number */
      productionSerialNumber?: string;
      /** @description Whether it should be a feature length episode */
      featureLength?: boolean;
      /**
       * Format: float
       * @description Starting stardate of episode story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of episode story
       */
      stardateTo?: number;
      /**
       * Format: int32
       * @description Starting year of episode story
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of episode story
       */
      yearTo?: number;
      /**
       * Format: date
       * @description Minimal date the episode was first aired in the United States
       */
      usAirDateFrom?: string;
      /**
       * Format: date
       * @description Maximal date the episode was first aired in the United States
       */
      usAirDateTo?: string;
      /**
       * Format: date
       * @description Minimal date the episode script was completed
       */
      finalScriptDateFrom?: string;
      /**
       * Format: date
       * @description Maximal date the episode script was completed
       */
      finalScriptDateTo?: string;
    };
    /** @description Header episode, embedded in other objects */
    EpisodeHeader: {
      /** @description Episode unique ID */
      uid: string;
      /** @description Episode title */
      title: string;
    };
    /** @description Base episode, returned in search results */
    EpisodeBase: {
      /** @description Episode unique ID */
      uid: string;
      /** @description Episode title */
      title: string;
      /** @description Episode title in German */
      titleGerman?: string;
      /** @description Episode title in Italian */
      titleItalian?: string;
      /** @description Episode title in Japanese */
      titleJapanese?: string;
      series?: components["schemas"]["SeriesHeader"];
      season?: components["schemas"]["SeasonHeader"];
      /** @description Season number */
      seasonNumber?: number;
      /** @description Episode number in season */
      episodeNumber?: number;
      /** @description Production serial number */
      productionSerialNumber?: string;
      /** @description Whether it's a feature length episode */
      featureLength?: boolean;
      /**
       * Format: float
       * @description Starting stardate of episode story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of episode story
       */
      stardateTo?: number;
      /** @description Starting year of episode story */
      yearFrom?: number;
      /** @description Ending year of episode story */
      yearTo?: number;
      /**
       * Format: date
       * @description Date the episode was first aired in the United States
       */
      usAirDate?: string;
      /**
       * Format: date
       * @description Date the episode script was completed
       */
      finalScriptDate?: string;
    };
    /** @description Full episode, returned when queried using UID */
    EpisodeFull: {
      /** @description Episode unique ID */
      uid: string;
      /** @description Episode title */
      title: string;
      /** @description Episode title in German */
      titleGerman?: string;
      /** @description Episode title in Italian */
      titleItalian?: string;
      /** @description Episode title in Japanese */
      titleJapanese?: string;
      series?: components["schemas"]["SeriesBase"];
      season?: components["schemas"]["SeasonBase"];
      /** @description Season number */
      seasonNumber?: number;
      /** @description Episode number in season */
      episodeNumber?: number;
      /** @description Production serial number */
      productionSerialNumber?: string;
      /** @description Whether it's a feature length episode */
      featureLength?: boolean;
      /**
       * Format: float
       * @description Starting stardate of episode story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of episode story
       */
      stardateTo?: number;
      /** @description Starting year of episode story */
      yearFrom?: number;
      /** @description Ending year of episode story */
      yearTo?: number;
      /**
       * Format: date
       * @description Date the episode was first aired in the United States
       */
      usAirDate?: string;
      /**
       * Format: date
       * @description Date the episode script was completed
       */
      finalScriptDate?: string;
      /**
       * @description Writers involved in the episode
       * @default [
       *       []
       *     ]
       */
      writers: components["schemas"]["StaffBase"][];
      /**
       * @description Teleplay authors involved in the episode
       * @default [
       *       []
       *     ]
       */
      teleplayAuthors: components["schemas"]["StaffBase"][];
      /**
       * @description Story authors involved in the episode
       * @default [
       *       []
       *     ]
       */
      storyAuthors: components["schemas"]["StaffBase"][];
      /**
       * @description Directors authors involved in the episode
       * @default [
       *       []
       *     ]
       */
      directors: components["schemas"]["StaffBase"][];
      /**
       * @description Performers appearing in the episode
       * @default [
       *       []
       *     ]
       */
      performers: components["schemas"]["PerformerBase"][];
      /**
       * @description Stunt performers appearing in the episode
       * @default [
       *       []
       *     ]
       */
      stuntPerformers: components["schemas"]["PerformerBase"][];
      /**
       * @description Stand-in performers appearing in the episode
       * @default [
       *       []
       *     ]
       */
      standInPerformers: components["schemas"]["PerformerBase"][];
      /**
       * @description Characters appearing in the episode
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for episodes search */
    EpisodeBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of episodes matching given criteria
       * @default [
       *       []
       *     ]
       */
      episodes: components["schemas"]["EpisodeBase"][];
    };
    /** @description Response object for single episode query */
    EpisodeFullResponse: {
      episode?: components["schemas"]["EpisodeFull"];
    };
    /** @description Error object */
    Error: {
      /** @description Error code */
      code?: string;
      /** @description Error message */
      message?: string;
    };
    /** @description Animal search criteria */
    FoodSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Food name */
      name?: string;
      /** @description Whether it should be of earthly origin */
      earthlyOrigin?: boolean;
      /** @description Whether it should be a dessert */
      dessert?: boolean;
      /** @description Whether it should be a fruit */
      fruit?: boolean;
      /** @description Whether it should be an herb or a spice */
      herbOrSpice?: boolean;
      /** @description Whether it should be a sauce */
      sauce?: boolean;
      /** @description Whether it should be a soup */
      soup?: boolean;
      /** @description Whether it should be a beverage */
      beverage?: boolean;
      /** @description Whether it should be an alcoholic beverage */
      alcoholicBeverage?: boolean;
      /** @description Whether it should be a juice */
      juice?: boolean;
      /** @description Whether it should be a tea */
      tea?: boolean;
    };
    /** @description Header food, embedded in other objects */
    FoodHeader: {
      /** @description Food unique ID */
      uid: string;
      /** @description Food name */
      name: string;
    };
    /** @description Base food, returned in search results */
    FoodBase: {
      /** @description Food unique ID */
      uid: string;
      /** @description Food name */
      name: string;
      /** @description Whether it's of earthly origin */
      earthlyOrigin?: boolean;
      /** @description Whether it's a dessert */
      dessert?: boolean;
      /** @description Whether it's a fruit */
      fruit?: boolean;
      /** @description Whether it's a herb or a spice */
      herbOrSpice?: boolean;
      /** @description Whether it's a sauce */
      sauce?: boolean;
      /** @description Whether it's a soup */
      soup?: boolean;
      /** @description Whether it's a beverage */
      beverage?: boolean;
      /** @description Whether it's an alcoholic beverage */
      alcoholicBeverage?: boolean;
      /** @description Whether it's a juice */
      juice?: boolean;
      /** @description Whether it's a tea */
      tea?: boolean;
    };
    /** @description Full food, returned when queried using UID */
    FoodFull: {
      /** @description Food unique ID */
      uid: string;
      /** @description Food name */
      name: string;
      /** @description Whether it's of earthly origin */
      earthlyOrigin?: boolean;
      /** @description Whether it's a dessert */
      dessert?: boolean;
      /** @description Whether it's a fruit */
      fruit?: boolean;
      /** @description Whether it's an herb or a spice */
      herbOrSpice?: boolean;
      /** @description Whether it's a sauce */
      sauce?: boolean;
      /** @description Whether it's a soup */
      soup?: boolean;
      /** @description Whether it's a beverage */
      beverage?: boolean;
      /** @description Whether it's an alcoholic beverage */
      alcoholicBeverage?: boolean;
      /** @description Whether it's a juice */
      juice?: boolean;
      /** @description Whether it's a tea */
      tea?: boolean;
    };
    /** @description Response object for foods search */
    FoodBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of foods matching given criteria
       * @default [
       *       []
       *     ]
       */
      foods: components["schemas"]["FoodBase"][];
    };
    /** @description Response object for single food query */
    FoodFullResponse: {
      food?: components["schemas"]["FoodFull"];
    };
    /**
     * @description Gender
     * @enum {string}
     */
    Gender: "F" | "M";
    /** @description Genre of video games */
    Genre: {
      /** @description Genre unique ID */
      uid?: string;
      /** @description Genre name */
      name?: string;
    };
    /** @description Literature search criteria */
    LiteratureSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Literature title */
      title?: string;
      /** @description Whether it should be of earthly origin */
      earthlyOrigin?: boolean;
      /** @description Whether it should be a Shakespearean work */
      shakespeareanWork?: boolean;
      /** @description Whether it should be a report */
      report?: boolean;
      /** @description Whether it should be a scientific literature */
      scientificLiterature?: boolean;
      /** @description Whether it should be a technical manual */
      technicalManual?: boolean;
      /** @description Whether it should be a religious literature */
      religiousLiterature?: boolean;
    };
    /** @description Header literature, embedded in other objects */
    LiteratureHeader: {
      /** @description Literature unique ID */
      uid: string;
      /** @description Literature title */
      title: string;
    };
    /** @description Base literature, returned in search results */
    LiteratureBase: {
      /** @description Literature unique ID */
      uid: string;
      /** @description Literature title */
      title: string;
      /** @description Whether it's of earthly origin */
      earthlyOrigin?: boolean;
      /** @description Whether it's a Shakespearean work */
      shakespeareanWork?: boolean;
      /** @description Whether it's a report */
      report?: boolean;
      /** @description Whether it's a scientific literature */
      scientificLiterature?: boolean;
      /** @description Whether it's a technical manual */
      technicalManual?: boolean;
      /** @description Whether it's a religious literature */
      religiousLiterature?: boolean;
    };
    /** @description Full literature, returned when queried using UID */
    LiteratureFull: {
      /** @description Literature unique ID */
      uid: string;
      /** @description Literature title */
      title: string;
      /** @description Whether it's of earthly origin */
      earthlyOrigin?: boolean;
      /** @description Whether it's a Shakespearean work */
      shakespeareanWork?: boolean;
      /** @description Whether it's a report */
      report?: boolean;
      /** @description Whether it's a scientific literature */
      scientificLiterature?: boolean;
      /** @description Whether it's a technical manual */
      technicalManual?: boolean;
      /** @description Whether it's a religious literature */
      religiousLiterature?: boolean;
    };
    /** @description Response object for literature search */
    LiteratureBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of literature matching given criteria
       * @default [
       *       []
       *     ]
       */
      literature: components["schemas"]["LiteratureBase"][];
    };
    /** @description Response object for single literature query */
    LiteratureFullResponse: {
      literature?: components["schemas"]["LiteratureFull"];
    };
    /** @description Header location, embedded in other objects */
    LocationHeader: {
      /** @description Location unique ID */
      uid: string;
      /** @description Location name */
      name: string;
    };
    /** @description Base location, returned in search results */
    LocationBase: {
      /** @description Location unique ID */
      uid: string;
      /** @description Location name */
      name: string;
      /** @description Whether it's an earthly location */
      earthlyLocation?: boolean;
      /** @description Whether it's a fictional location */
      fictionalLocation?: boolean;
      /** @description Whether it's a religious location */
      religiousLocation?: boolean;
      /** @description Whether it's a geographical location */
      geographicalLocation?: boolean;
      /** @description Whether it's a body of water */
      bodyOfWater?: boolean;
      /** @description Whether it's a country */
      country?: boolean;
      /** @description Whether it's a subnational entity */
      subnationalEntity?: boolean;
      /** @description Whether it's a settlement */
      settlement?: boolean;
      /** @description Whether it's a US settlement */
      usSettlement?: boolean;
      /** @description Whether it's a Bajoran settlement */
      bajoranSettlement?: boolean;
      /** @description Whether it's a colony */
      colony?: boolean;
      /** @description Whether it's a landform */
      landform?: boolean;
      /** @description Whether it's a landmark */
      landmark?: boolean;
      /** @description Whether it's a road */
      road?: boolean;
      /** @description Whether it's a structure */
      structure?: boolean;
      /** @description Whether it's a shipyard */
      shipyard?: boolean;
      /** @description Whether it's a building interior */
      buildingInterior?: boolean;
      /** @description Whether it's a establishment */
      establishment?: boolean;
      /** @description Whether it's a medical establishment */
      medicalEstablishment?: boolean;
      /** @description Whether it's a DS9 establishment */
      ds9Establishment?: boolean;
      /** @description Whether it's a school */
      school?: boolean;
      /** @description Whether this location is from mirror universe */
      mirror?: boolean;
      /** @description Whether this location is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Full location, returned when queried using UID */
    LocationFull: {
      /** @description Location unique ID */
      uid: string;
      /** @description Location name */
      name: string;
      /** @description Whether it's an earthly location */
      earthlyLocation?: boolean;
      /** @description Whether it's a fictional location */
      fictionalLocation?: boolean;
      /** @description Whether it's a religious location */
      religiousLocation?: boolean;
      /** @description Whether it's a geographical location */
      geographicalLocation?: boolean;
      /** @description Whether it's a body of water */
      bodyOfWater?: boolean;
      /** @description Whether it's a country */
      country?: boolean;
      /** @description Whether it's a subnational entity */
      subnationalEntity?: boolean;
      /** @description Whether it's a settlement */
      settlement?: boolean;
      /** @description Whether it's a US settlement */
      usSettlement?: boolean;
      /** @description Whether it's a Bajoran settlement */
      bajoranSettlement?: boolean;
      /** @description Whether it's a colony */
      colony?: boolean;
      /** @description Whether it's a landform */
      landform?: boolean;
      /** @description Whether it's a landmark */
      landmark?: boolean;
      /** @description Whether it's a road */
      road?: boolean;
      /** @description Whether it's a structure */
      structure?: boolean;
      /** @description Whether it's a shipyard */
      shipyard?: boolean;
      /** @description Whether it's a building interior */
      buildingInterior?: boolean;
      /** @description Whether it's a establishment */
      establishment?: boolean;
      /** @description Whether it's a medical establishment */
      medicalEstablishment?: boolean;
      /** @description Whether it's a DS9 establishment */
      ds9Establishment?: boolean;
      /** @description Whether it's a school */
      school?: boolean;
      /** @description Whether this location is from mirror universe */
      mirror?: boolean;
      /** @description Whether this location is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Response object for locations search */
    LocationBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of locations matching given criteria
       * @default [
       *       []
       *     ]
       */
      locations: components["schemas"]["LocationBase"][];
    };
    /** @description Response object for single location query */
    LocationFullResponse: {
      location?: components["schemas"]["LocationFull"];
    };
    /** @description Location search criteria (V2) */
    LocationV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Location name */
      name?: string;
      /** @description Whether it should be an earthly location */
      earthlyLocation?: boolean;
      /** @description Whether it should be a Qo'nos location */
      qonosLocation?: boolean;
      /** @description Whether it should be a fictional location */
      fictionalLocation?: boolean;
      /** @description Whether it should be a mythological location */
      mythologicalLocation?: boolean;
      /** @description Whether it should be a religious location */
      religiousLocation?: boolean;
      /** @description Whether it should be a geographical location */
      geographicalLocation?: boolean;
      /** @description Whether it should be a body of water */
      bodyOfWater?: boolean;
      /** @description Whether it should be a country */
      country?: boolean;
      /** @description Whether it should be a subnational entity */
      subnationalEntity?: boolean;
      /** @description Whether it should be a settlement */
      settlement?: boolean;
      /** @description Whether it should be a US settlement */
      usSettlement?: boolean;
      /** @description Whether it should be a Bajoran settlement */
      bajoranSettlement?: boolean;
      /** @description Whether it should be a colony */
      colony?: boolean;
      /** @description Whether it should be a landform */
      landform?: boolean;
      /** @description Whether it should be a road */
      road?: boolean;
      /** @description Whether it should be a structure */
      structure?: boolean;
      /** @description Whether it should be a shipyard */
      shipyard?: boolean;
      /** @description Whether it should be a building interior */
      buildingInterior?: boolean;
      /** @description Whether it should be a establishment */
      establishment?: boolean;
      /** @description Whether it should be a medical establishment */
      medicalEstablishment?: boolean;
      /** @description Whether it should be a DS9 establishment */
      ds9Establishment?: boolean;
      /** @description Whether it should be a school */
      school?: boolean;
      /** @description Whether it should be a restaurant */
      restaurant?: boolean;
      /** @description Whether it should be a residence */
      residence?: boolean;
      /** @description Whether this location should be from mirror universe */
      mirror?: boolean;
      /** @description Whether this location should be from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Base location, returned in search results (v2) */
    LocationV2Base: {
      /** @description Location unique ID */
      uid: string;
      /** @description Location name */
      name: string;
      /** @description Whether it's an earthly location */
      earthlyLocation?: boolean;
      /** @description Whether it's a Qo'noS location */
      qonosLocation?: boolean;
      /** @description Whether it's a fictional location */
      fictionalLocation?: boolean;
      /** @description Whether it's a mythological location */
      mythologicalLocation?: boolean;
      /** @description Whether it's a religious location */
      religiousLocation?: boolean;
      /** @description Whether it's a geographical location */
      geographicalLocation?: boolean;
      /** @description Whether it's a body of water */
      bodyOfWater?: boolean;
      /** @description Whether it's a country */
      country?: boolean;
      /** @description Whether it's a subnational entity */
      subnationalEntity?: boolean;
      /** @description Whether it's a settlement */
      settlement?: boolean;
      /** @description Whether it's a US settlement */
      usSettlement?: boolean;
      /** @description Whether it's a Bajoran settlement */
      bajoranSettlement?: boolean;
      /** @description Whether it's a colony */
      colony?: boolean;
      /** @description Whether it's a landform */
      landform?: boolean;
      /** @description Whether it's a road */
      road?: boolean;
      /** @description Whether it's a structure */
      structure?: boolean;
      /** @description Whether it's a shipyard */
      shipyard?: boolean;
      /** @description Whether it's a building interior */
      buildingInterior?: boolean;
      /** @description Whether it's a establishment */
      establishment?: boolean;
      /** @description Whether it's a medical establishment */
      medicalEstablishment?: boolean;
      /** @description Whether it's a DS9 establishment */
      ds9Establishment?: boolean;
      /** @description Whether it's a school */
      school?: boolean;
      /** @description Whether it's a restaurant */
      restaurant?: boolean;
      /** @description Whether it's a residence */
      residence?: boolean;
      /** @description Whether this location is from mirror universe */
      mirror?: boolean;
      /** @description Whether this location is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Full location, returned when queried using UID (V2) */
    LocationV2Full: {
      /** @description Location unique ID */
      uid: string;
      /** @description Location name */
      name: string;
      /** @description Whether it's an earthly location */
      earthlyLocation?: boolean;
      /** @description Whether it's a Qo'noS location */
      qonosLocation?: boolean;
      /** @description Whether it's a fictional location */
      fictionalLocation?: boolean;
      /** @description Whether it's a mythological location */
      mythologicalLocation?: boolean;
      /** @description Whether it's a religious location */
      religiousLocation?: boolean;
      /** @description Whether it's a geographical location */
      geographicalLocation?: boolean;
      /** @description Whether it's a body of water */
      bodyOfWater?: boolean;
      /** @description Whether it's a country */
      country?: boolean;
      /** @description Whether it's a subnational entity */
      subnationalEntity?: boolean;
      /** @description Whether it's a settlement */
      settlement?: boolean;
      /** @description Whether it's a US settlement */
      usSettlement?: boolean;
      /** @description Whether it's a Bajoran settlement */
      bajoranSettlement?: boolean;
      /** @description Whether it's a colony */
      colony?: boolean;
      /** @description Whether it's a landform */
      landform?: boolean;
      /** @description Whether it's a road */
      road?: boolean;
      /** @description Whether it's a structure */
      structure?: boolean;
      /** @description Whether it's a shipyard */
      shipyard?: boolean;
      /** @description Whether it's a building interior */
      buildingInterior?: boolean;
      /** @description Whether it's a establishment */
      establishment?: boolean;
      /** @description Whether it's a medical establishment */
      medicalEstablishment?: boolean;
      /** @description Whether it's a DS9 establishment */
      ds9Establishment?: boolean;
      /** @description Whether it's a school */
      school?: boolean;
      /** @description Whether it's a restaurant */
      restaurant?: boolean;
      /** @description Whether it's a residence */
      residence?: boolean;
      /** @description Whether this location is from mirror universe */
      mirror?: boolean;
      /** @description Whether this location is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Response object for locations search (V2) */
    LocationV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of locations matching given criteria
       * @default [
       *       []
       *     ]
       */
      locations: components["schemas"]["LocationV2Base"][];
    };
    /** @description Response object for single location query (V2) */
    LocationV2FullResponse: {
      location?: components["schemas"]["LocationV2Full"];
    };
    /** @description Magazine search criteria */
    MagazineSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Magazine title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the magazine was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the magazine was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of pages
       */
      numberOfPagesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of pages
       */
      numberOfPagesTo?: number;
    };
    /** @description Header magazine, embedded in other objects */
    MagazineHeader: {
      /** @description Magazine unique ID */
      uid: string;
      /** @description Magazine title */
      title: string;
    };
    /** @description Base magazine, returned in search results */
    MagazineBase: {
      /** @description Magazine unique ID */
      uid: string;
      /** @description Magazine title */
      title: string;
      /** @description Year the magazine was published */
      publishedYear?: number;
      /** @description Month the magazine was published */
      publishedMonth?: number;
      /** @description Day the magazine was published */
      publishedDay?: number;
      /** @description Cover publication year */
      coverYear?: number;
      /** @description Cover publication month */
      coverMonth?: number;
      /** @description Cover publication day */
      coverDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /** @description Magazine issue number */
      issueNumber?: string;
    };
    /** @description Full magazine, returned when queried using UID */
    MagazineFull: {
      /** @description Magazine unique ID */
      uid: string;
      /** @description Magazine title */
      title: string;
      /** @description Year the magazine was published */
      publishedYear?: number;
      /** @description Month the magazine was published */
      publishedMonth?: number;
      /** @description Day the magazine was published */
      publishedDay?: number;
      /** @description Cover publication year */
      coverYear?: number;
      /** @description Cover publication month */
      coverMonth?: number;
      /** @description Cover publication day */
      coverDay?: number;
      /** @description Number of pages */
      numberOfPages?: number;
      /** @description Magazine issue number */
      issueNumber?: string;
      /**
       * @description Magazine series this magazine is included in
       * @default [
       *       []
       *     ]
       */
      magazineSeries: components["schemas"]["MagazineSeriesBase"][];
      /**
       * @description Editors involved in the magazine
       * @default [
       *       []
       *     ]
       */
      editors: components["schemas"]["StaffBase"][];
      /**
       * @description Magazine publishers
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
    };
    /** @description Response object for magazine search */
    MagazineBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of magazines matching given criteria
       * @default [
       *       []
       *     ]
       */
      magazines: components["schemas"]["MagazineBase"][];
    };
    /** @description Response object for single magazine query */
    MagazineFullResponse: {
      magazine?: components["schemas"]["MagazineFull"];
    };
    /** @description Animal search criteria */
    MagazineSeriesSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Magazine series title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year the magazine series was published
       */
      publishedYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the magazine series was published
       */
      publishedYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of issues
       */
      numberOfIssuesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of issues
       */
      numberOfIssuesTo?: number;
    };
    /** @description Header book series, embedded in other objects */
    MagazineSeriesHeader: {
      /** @description Magazine series unique ID */
      uid: string;
      /** @description Magazine series title */
      title: string;
    };
    /** @description Base magazine series, returned in search results */
    MagazineSeriesBase: {
      /** @description Magazine series unique ID */
      uid: string;
      /** @description Magazine series title */
      title: string;
      /** @description Year from which the magazine series was published */
      publishedYearFrom?: number;
      /** @description Month from which the magazine series was published */
      publishedMonthFrom?: number;
      /** @description Year to which the magazine series was published */
      publishedYearTo?: number;
      /** @description Month to which the magazine series was published */
      publishedMonthTo?: number;
      /** @description Number of issues */
      numberOfIssues?: number;
    };
    /** @description Full magazine series, returned when queried using UID */
    MagazineSeriesFull: {
      /** @description Magazine series unique ID */
      uid: string;
      /** @description Magazine series title */
      title: string;
      /** @description Year from which the magazine series was published */
      publishedYearFrom?: number;
      /** @description Month from which the magazine series was published */
      publishedMonthFrom?: number;
      /** @description Year to which the magazine series was published */
      publishedYearTo?: number;
      /** @description Month to which the magazine series was published */
      publishedMonthTo?: number;
      /** @description Number of issues */
      numberOfIssues?: number;
      /**
       * @description Companies that published this magazine series
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Editors involved in the magazine series
       * @default [
       *       []
       *     ]
       */
      editors: components["schemas"]["StaffBase"][];
      /**
       * @description Magazines included in this magazine series
       * @default [
       *       []
       *     ]
       */
      magazines: components["schemas"]["MagazineBase"][];
    };
    /** @description Response object for magazine series search */
    MagazineSeriesBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of magazine series matching given criteria
       * @default [
       *       []
       *     ]
       */
      magazineSeries: components["schemas"]["MagazineSeriesBase"][];
    };
    /** @description Response object for single magazine series query */
    MagazineSeriesFullResponse: {
      magazineSeries?: components["schemas"]["MagazineSeriesFull"];
    };
    /**
     * @description Marital status
     * @enum {string}
     */
    MaritalStatus:
      | "SINGLE"
      | "ENGAGED"
      | "MARRIED"
      | "DIVORCED"
      | "REMARRIED"
      | "SEPARATED"
      | "WIDOWED"
      | "CAPTAINS_WOMAN";
    /** @description Material search criteria */
    MaterialSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Material name */
      name?: string;
      /** @description Whether it should be a chemical compound */
      chemicalCompound?: boolean;
      /** @description Whether it should be a biochemical compound */
      biochemicalCompound?: boolean;
      /** @description Whether it should be a drug */
      drug?: boolean;
      /** @description Whether it should be a poisonous substance */
      poisonousSubstance?: boolean;
      /** @description Whether it should be an explosive */
      explosive?: boolean;
      /** @description Whether it should be a gemstone */
      gemstone?: boolean;
      /** @description Whether it should be an alloy or a composite */
      alloyOrComposite?: boolean;
      /** @description Whether it should be a fuel */
      fuel?: boolean;
      /** @description Whether it should be a mineral */
      mineral?: boolean;
      /** @description Whether it should be a precious material */
      preciousMaterial?: boolean;
    };
    /** @description Header material, embedded in other objects */
    MaterialHeader: {
      /** @description Material unique ID */
      uid: string;
      /** @description Material name */
      name: string;
    };
    /** @description Base material, returned in search results */
    MaterialBase: {
      /** @description Material unique ID */
      uid: string;
      /** @description Material name */
      name: string;
      /** @description Whether it's a chemical compound */
      chemicalCompound?: boolean;
      /** @description Whether it's a biochemical compound */
      biochemicalCompound?: boolean;
      /** @description Whether it's a drug */
      drug?: boolean;
      /** @description Whether it's a poisonous substance */
      poisonousSubstance?: boolean;
      /** @description Whether it's an explosive */
      explosive?: boolean;
      /** @description Whether it's a gemstone */
      gemstone?: boolean;
      /** @description Whether it's an alloy or a composite */
      alloyOrComposite?: boolean;
      /** @description Whether it's a fuel */
      fuel?: boolean;
      /** @description Whether it's a mineral */
      mineral?: boolean;
      /** @description Whether it's a precious material */
      preciousMaterial?: boolean;
    };
    /** @description Full material, returned when queried using UID */
    MaterialFull: {
      /** @description Material unique ID */
      uid: string;
      /** @description Material name */
      name: string;
      /** @description Whether it's a chemical compound */
      chemicalCompound?: boolean;
      /** @description Whether it's a biochemical compound */
      biochemicalCompound?: boolean;
      /** @description Whether it's a drug */
      drug?: boolean;
      /** @description Whether it's a poisonous substance */
      poisonousSubstance?: boolean;
      /** @description Whether it's an explosive */
      explosive?: boolean;
      /** @description Whether it's a gemstone */
      gemstone?: boolean;
      /** @description Whether it's an alloy or a composite */
      alloyOrComposite?: boolean;
      /** @description Whether it's a fuel */
      fuel?: boolean;
      /** @description Whether it's a mineral */
      mineral?: boolean;
      /** @description Whether it's a precious material */
      preciousMaterial?: boolean;
    };
    /** @description Response object for materials search */
    MaterialBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of materials matching given criteria
       * @default [
       *       []
       *     ]
       */
      materials: components["schemas"]["MaterialBase"][];
    };
    /** @description Response object for single material query */
    MaterialFullResponse: {
      material?: components["schemas"]["MaterialFull"];
    };
    /** @description Medical condition search criteria */
    MedicalConditionSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Medical condition name */
      name?: string;
      /** @description Whether it should be a psychological condition */
      psychologicalCondition?: boolean;
    };
    /** @description Header medical condition, embedded in other objects */
    MedicalConditionHeader: {
      /** @description Medical condition unique ID */
      uid: string;
      /** @description Medical condition name */
      name: string;
    };
    /** @description Base medical condition, returned in search results */
    MedicalConditionBase: {
      /** @description Medical condition unique ID */
      uid: string;
      /** @description Medical condition name */
      name: string;
      /** @description Whether it's a psychological condition */
      psychologicalCondition?: boolean;
    };
    /** @description Full medical condition, returned when queried using UID */
    MedicalConditionFull: {
      /** @description Medical condition unique ID */
      uid: string;
      /** @description Medical condition name */
      name: string;
      /** @description Whether it's a psychological condition */
      psychologicalCondition?: boolean;
    };
    /** @description Response object for medical conditions search */
    MedicalConditionBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of medical conditions matching given criteria
       * @default [
       *       []
       *     ]
       */
      medicalConditions: components["schemas"]["MedicalConditionBase"][];
    };
    /** @description Response object for single medical condition query */
    MedicalConditionFullResponse: {
      medicalCondition?: components["schemas"]["MedicalConditionFull"];
    };
    /** @description Movie search criteria */
    MovieSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Movie title */
      title?: string;
      /**
       * Format: float
       * @description Starting stardate of movie story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of movie story
       */
      stardateTo?: number;
      /**
       * Format: int32
       * @description Starting year of movie story
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of movie story
       */
      yearTo?: number;
      /**
       * Format: date
       * @description Minimal date the movie was first released in the United States
       */
      usReleaseDateFrom?: string;
      /**
       * Format: date
       * @description Maximal date the movie was first released in the United States
       */
      usReleaseDateTo?: string;
    };
    /** @description Header movie, embedded in other objects */
    MovieHeader: {
      /** @description Movie unique ID */
      uid: string;
      /** @description Movie title */
      title: string;
    };
    /** @description Base movie, returned in search results */
    MovieBase: {
      /** @description Movie unique ID */
      uid: string;
      /** @description Movie title */
      title: string;
      mainDirector?: components["schemas"]["StaffHeader"];
      /** @description Movie title in Bulgarian */
      titleBulgarian?: string;
      /** @description Movie title in Catalan */
      titleCatalan?: string;
      /** @description Movie title in Chinese traditional */
      titleChineseTraditional?: string;
      /** @description Movie title in German */
      titleGerman?: string;
      /** @description Movie title in Italian */
      titleItalian?: string;
      /** @description Movie title in Japanese */
      titleJapanese?: string;
      /** @description Movie title in Polish */
      titlePolish?: string;
      /** @description Movie title in Russian */
      titleRussian?: string;
      /** @description Movie title in Serbian */
      titleSerbian?: string;
      /** @description Movie title in Spanish */
      titleSpanish?: string;
      /**
       * Format: float
       * @description Starting stardate of movie story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of movie story
       */
      stardateTo?: number;
      /** @description Starting year of movie story */
      yearFrom?: number;
      /** @description Ending year of movie story */
      yearTo?: number;
      /**
       * Format: date
       * @description Date the movie was first released in the United States
       */
      usReleaseDate?: string;
    };
    /** @description Full movie, returned when queried using UID */
    MovieFull: {
      /** @description Movie unique ID */
      uid: string;
      /** @description Movie title */
      title: string;
      mainDirector?: components["schemas"]["StaffBase"];
      /** @description Movie title in Bulgarian */
      titleBulgarian?: string;
      /** @description Movie title in Catalan */
      titleCatalan?: string;
      /** @description Movie title in Chinese traditional */
      titleChineseTraditional?: string;
      /** @description Movie title in German */
      titleGerman?: string;
      /** @description Movie title in Italian */
      titleItalian?: string;
      /** @description Movie title in Japanese */
      titleJapanese?: string;
      /** @description Movie title in Polish */
      titlePolish?: string;
      /** @description Movie title in Russian */
      titleRussian?: string;
      /** @description Movie title in Serbian */
      titleSerbian?: string;
      /** @description Movie title in Spanish */
      titleSpanish?: string;
      /**
       * Format: float
       * @description Starting stardate of movie story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of movie story
       */
      stardateTo?: number;
      /** @description Starting year of movie story */
      yearFrom?: number;
      /** @description Ending year of movie story */
      yearTo?: number;
      /**
       * Format: date
       * @description Date the movie was first released in the United States
       */
      usReleaseDate?: string;
      /**
       * @description Writers involved in the movie
       * @default [
       *       []
       *     ]
       */
      writers: components["schemas"]["StaffBase"][];
      /**
       * @description Screenplay authors involved in the movie
       * @default [
       *       []
       *     ]
       */
      screenplayAuthors: components["schemas"]["StaffBase"][];
      /**
       * @description Story authors authors involved in the movie
       * @default [
       *       []
       *     ]
       */
      storyAuthors: components["schemas"]["StaffBase"][];
      /**
       * @description Directors authors involved in the movie
       * @default [
       *       []
       *     ]
       */
      directors: components["schemas"]["StaffBase"][];
      /**
       * @description Producers authors involved in the movie
       * @default [
       *       []
       *     ]
       */
      producers: components["schemas"]["StaffBase"][];
      /**
       * @description Other staff involved in the movie
       * @default [
       *       []
       *     ]
       */
      staff: components["schemas"]["StaffBase"][];
      /**
       * @description Performers appearing in the movie
       * @default [
       *       []
       *     ]
       */
      performers: components["schemas"]["PerformerBase"][];
      /**
       * @description Stunt performers appearing in the movie
       * @default [
       *       []
       *     ]
       */
      stuntPerformers: components["schemas"]["PerformerBase"][];
      /**
       * @description Stand-in performers appearing in the movie
       * @default [
       *       []
       *     ]
       */
      standInPerformers: components["schemas"]["PerformerBase"][];
      /**
       * @description Characters appearing in the movie
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for movies search */
    MovieBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of movies matching given criteria
       * @default [
       *       []
       *     ]
       */
      movies: components["schemas"]["MovieBase"][];
    };
    /** @description Response object for single movie query */
    MovieFullResponse: {
      movie?: components["schemas"]["MovieFull"];
    };
    /** @description Header occupation, embedded in other objects */
    OccupationHeader: {
      /** @description Occupation unique ID */
      uid: string;
      /** @description Occupation name */
      name: string;
    };
    /** @description Base occupations, returned in search results */
    OccupationBase: {
      /** @description Occupation unique ID */
      uid: string;
      /** @description Occupation name */
      name: string;
      /** @description Whether it's a legal occupation */
      legalOccupation?: boolean;
      /** @description Whether it's a medical occupation */
      medicalOccupation?: boolean;
      /** @description Whether it's a scientific occupation */
      scientificOccupation?: boolean;
    };
    /** @description Full occupation, returned when queried using UID */
    OccupationFull: {
      /** @description Occupation unique ID */
      uid: string;
      /** @description Occupation name */
      name: string;
      /** @description Whether it's a legal occupation */
      legalOccupation?: boolean;
      /** @description Whether it's a medical occupation */
      medicalOccupation?: boolean;
      /** @description Whether it's a scientific occupation */
      scientificOccupation?: boolean;
      /**
       * @description Characters with this occupation
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for occupations search */
    OccupationBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of occupations matching given criteria
       * @default [
       *       []
       *     ]
       */
      occupations: components["schemas"]["OccupationBase"][];
    };
    /** @description Response object for single occupation query */
    OccupationFullResponse: {
      occupation?: components["schemas"]["OccupationFull"];
    };
    /** @description Occupation search criteria (V2) */
    OccupationV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Occupation name */
      name?: string;
      /** @description Whether it should be an arts occupation */
      artsOccupation?: boolean;
      /** @description Whether it should be a communication occupation */
      communicationOccupation?: boolean;
      /** @description Whether it should be an economic occupation */
      economicOccupation?: boolean;
      /** @description Whether it should be an education occupation */
      educationOccupation?: boolean;
      /** @description Whether it should be an entertainment occupation */
      entertainmentOccupation?: boolean;
      /** @description Whether it should be an illegal occupation */
      illegalOccupation?: boolean;
      /** @description Whether it should be a legal occupation */
      legalOccupation?: boolean;
      /** @description Whether it should be a medical occupation */
      medicalOccupation?: boolean;
      /** @description Whether it should be a scientific occupation */
      scientificOccupation?: boolean;
      /** @description Whether it should be a sports occupation */
      sportsOccupation?: boolean;
      /** @description Whether it should be a victual occupation */
      victualOccupation?: boolean;
    };
    /** @description Base occupations, returned in search results (V2) */
    OccupationV2Base: {
      /** @description Occupation unique ID */
      uid: string;
      /** @description Occupation name */
      name: string;
      /** @description Whether it's an arts occupation */
      artsOccupation?: boolean;
      /** @description Whether it's a communication occupation */
      communicationOccupation?: boolean;
      /** @description Whether it's an economic occupation */
      economicOccupation?: boolean;
      /** @description Whether it's an education occupation */
      educationOccupation?: boolean;
      /** @description Whether it's an entertainment occupation */
      entertainmentOccupation?: boolean;
      /** @description Whether it's an illegal occupation */
      illegalOccupation?: boolean;
      /** @description Whether it's a legal occupation */
      legalOccupation?: boolean;
      /** @description Whether it's a medical occupation */
      medicalOccupation?: boolean;
      /** @description Whether it's a scientific occupation */
      scientificOccupation?: boolean;
      /** @description Whether it's a sports occupation */
      sportsOccupation?: boolean;
      /** @description Whether it's a victual occupation */
      victualOccupation?: boolean;
    };
    /** @description Full occupation, returned when queried using UID (V2) */
    OccupationV2Full: {
      /** @description Occupation unique ID */
      uid: string;
      /** @description Occupation name */
      name: string;
      /** @description Whether it's an arts occupation */
      artsOccupation?: boolean;
      /** @description Whether it's a communication occupation */
      communicationOccupation?: boolean;
      /** @description Whether it's an economic occupation */
      economicOccupation?: boolean;
      /** @description Whether it's an education occupation */
      educationOccupation?: boolean;
      /** @description Whether it's an entertainment occupation */
      entertainmentOccupation?: boolean;
      /** @description Whether it's an illegal occupation */
      illegalOccupation?: boolean;
      /** @description Whether it's a legal occupation */
      legalOccupation?: boolean;
      /** @description Whether it's a medical occupation */
      medicalOccupation?: boolean;
      /** @description Whether it's a scientific occupation */
      scientificOccupation?: boolean;
      /** @description Whether it's a sports occupation */
      sportsOccupation?: boolean;
      /** @description Whether it's a victual occupation */
      victualOccupation?: boolean;
      /**
       * @description Characters with this occupation
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for occupations search (V2) */
    OccupationV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of occupations matching given criteria
       * @default [
       *       []
       *     ]
       */
      occupations: components["schemas"]["OccupationV2Base"][];
    };
    /** @description Response object for single occupation query (V2) */
    OccupationV2FullResponse: {
      occupation?: components["schemas"]["OccupationV2Full"];
    };
    /** @description Animal search criteria */
    OrganizationSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Organization name */
      name?: string;
      /** @description Whether it should be a government */
      government?: boolean;
      /** @description Whether it should be an intergovernmental organization */
      intergovernmentalOrganization?: boolean;
      /** @description Whether it should be a research organization */
      researchOrganization?: boolean;
      /** @description Whether it should be a sport organization */
      sportOrganization?: boolean;
      /** @description Whether it should be a medical organization */
      medicalOrganization?: boolean;
      /** @description Whether it should be a military organization */
      militaryOrganization?: boolean;
      /** @description Whether it should be a military unit */
      militaryUnit?: boolean;
      /** @description Whether it should be a government agency */
      governmentAgency?: boolean;
      /** @description Whether it should be a law enforcement agency */
      lawEnforcementAgency?: boolean;
      /** @description Whether it should be a prison or penal colony */
      prisonOrPenalColony?: boolean;
      /** @description Whether this organization should be from mirror universe */
      mirror?: boolean;
      /** @description Whether this organization should be from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Header organization, embedded in other objects */
    OrganizationHeader: {
      /** @description Organization unique ID */
      uid: string;
      /** @description Organization name */
      name: string;
    };
    /** @description Base organization, returned in search results */
    OrganizationBase: {
      /** @description Organization unique ID */
      uid: string;
      /** @description Organization name */
      name: string;
      /** @description Whether it's a government */
      government?: boolean;
      /** @description Whether it's an intergovernmental organization */
      intergovernmentalOrganization?: boolean;
      /** @description Whether it's a research organization */
      researchOrganization?: boolean;
      /** @description Whether it's a sport organization */
      sportOrganization?: boolean;
      /** @description Whether it's a medical organization */
      medicalOrganization?: boolean;
      /** @description Whether it's a military organization */
      militaryOrganization?: boolean;
      /** @description Whether it's a military unit */
      militaryUnit?: boolean;
      /** @description Whether it's a government agency */
      governmentAgency?: boolean;
      /** @description Whether it's a law enforcement agency */
      lawEnforcementAgency?: boolean;
      /** @description Whether it's a prison or penal colony */
      prisonOrPenalColony?: boolean;
      /** @description Whether this organization is from mirror universe */
      mirror?: boolean;
      /** @description Whether this location is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Full organization, returned when queried using UID */
    OrganizationFull: {
      /** @description Organization unique ID */
      uid: string;
      /** @description Organization name */
      name: string;
      /** @description Whether it's a government */
      government?: boolean;
      /** @description Whether it's an intergovernmental organization */
      intergovernmentalOrganization?: boolean;
      /** @description Whether it's a research organization */
      researchOrganization?: boolean;
      /** @description Whether it's a sport organization */
      sportOrganization?: boolean;
      /** @description Whether it's a medical organization */
      medicalOrganization?: boolean;
      /** @description Whether it's a military organization */
      militaryOrganization?: boolean;
      /** @description Whether it's a military unit */
      militaryUnit?: boolean;
      /** @description Whether it's a government agency */
      governmentAgency?: boolean;
      /** @description Whether it's a law enforcement agency */
      lawEnforcementAgency?: boolean;
      /** @description Whether it's a prison or penal colony */
      prisonOrPenalColony?: boolean;
      /** @description Whether this organization is from mirror universe */
      mirror?: boolean;
      /** @description Whether this organization is from alternate reality */
      alternateReality?: boolean;
      /**
       * @description Characters belonging to this organization
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for organizations search */
    OrganizationBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of organizations matching given criteria
       * @default [
       *       []
       *     ]
       */
      organizations: components["schemas"]["OrganizationBase"][];
    };
    /** @description Response object for single organization query */
    OrganizationFullResponse: {
      organization?: components["schemas"]["OrganizationFull"];
    };
    /** @description Header performer, embedded in other objects */
    PerformerHeader: {
      /** @description Performer unique ID */
      uid: string;
      /** @description Performer name */
      name: string;
    };
    /** @description Base performer, returned in search results */
    PerformerBase: {
      /** @description Performer unique ID */
      uid: string;
      /** @description Performer name */
      name: string;
      /** @description Performer birth name */
      birthName?: string;
      gender?: components["schemas"]["Gender"];
      /**
       * Format: date
       * @description Date the performer was born
       */
      dateOfBirth?: string;
      /** @description Place the performer was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Date the performer died
       */
      dateOfDeath?: string;
      /** @description Place the performer died */
      placeOfDeath?: string;
      /** @description Whether it's an animal performer */
      animalPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Discovery */
      disPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Deep Space Nine */
      ds9Performer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Enterprise */
      entPerformer?: boolean;
      /** @description Whether it's a performer that appeared in a Star Trek movie */
      filmPerformer?: boolean;
      /** @description Whether it's a stand-in performer */
      standInPerformer?: boolean;
      /** @description Whether it's a stunt performer */
      stuntPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Animated Series */
      tasPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Next Generation */
      tngPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Original Series */
      tosPerformer?: boolean;
      /** @description Whether it's a video game performer */
      videoGamePerformer?: boolean;
      /** @description Whether it's a voice performer */
      voicePerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Voyager */
      voyPerformer?: boolean;
    };
    /** @description Full performer, returned when queried using UID */
    PerformerFull: {
      /** @description Performer unique ID */
      uid: string;
      /** @description Performer name */
      name: string;
      /** @description Performer birth name */
      birthName?: string;
      gender?: components["schemas"]["Gender"];
      /**
       * Format: date
       * @description Date the performer was born
       */
      dateOfBirth?: string;
      /** @description Place the performer was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Date the performer died
       */
      dateOfDeath?: string;
      /** @description Place the performer died */
      placeOfDeath?: string;
      /** @description Whether it's an animal performer */
      animalPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Discovery */
      disPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Deep Space Nine */
      ds9Performer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Enterprise */
      entPerformer?: boolean;
      /** @description Whether it's a performer that appeared in a Star Trek movie */
      filmPerformer?: boolean;
      /** @description Whether it's a stand-in performer */
      standInPerformer?: boolean;
      /** @description Whether it's a stunt performer */
      stuntPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Animated Series */
      tasPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Next Generation */
      tngPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Original Series */
      tosPerformer?: boolean;
      /** @description Whether it's a video game performer */
      videoGamePerformer?: boolean;
      /** @description Whether it's a voice performer */
      voicePerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Voyager */
      voyPerformer?: boolean;
      /**
       * @description Episodes in which this person appeared as a performer
       * @default [
       *       []
       *     ]
       */
      episodesPerformances: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes in which this person appeared as a stunt performer
       * @default [
       *       []
       *     ]
       */
      episodesStuntPerformances: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes in which this person appeared as a stand-in performer
       * @default [
       *       []
       *     ]
       */
      episodesStandInPerformances: components["schemas"]["EpisodeBase"][];
      /**
       * @description Movies in which this person appeared as a performer
       * @default [
       *       []
       *     ]
       */
      moviesPerformances: components["schemas"]["MovieBase"][];
      /**
       * @description Movies in which this person appeared as a stunt performer
       * @default [
       *       []
       *     ]
       */
      moviesStuntPerformances: components["schemas"]["MovieBase"][];
      /**
       * @description Movies in which this person appeared as a stand-in performer
       * @default [
       *       []
       *     ]
       */
      moviesStandInPerformances: components["schemas"]["MovieBase"][];
      /**
       * @description Characters played by this performer
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for performers search */
    PerformerBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of performers matching given criteria
       * @default [
       *       []
       *     ]
       */
      performers: components["schemas"]["PerformerBase"][];
    };
    /** @description Response object for single performer query */
    PerformerFullResponse: {
      performer?: components["schemas"]["PerformerFull"];
    };
    /** @description Performer search criteria (V2) */
    PerformerV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Performer name */
      name?: string;
      /** @description Performer birth name */
      birthName?: string;
      /** @description Performer gender */
      gender?: string;
      /**
       * Format: date
       * @description Minimal date the performer was born
       */
      dateOfBirthFrom?: string;
      /**
       * Format: date
       * @description Maximal date the performer was born
       */
      dateOfBirthTo?: string;
      /** @description Place the performer was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Minimal date the performer died
       */
      dateOfDeathFrom?: string;
      /**
       * Format: date
       * @description Maximal date the performer died
       */
      dateOfDeathTo?: string;
      /** @description Place the performer died */
      placeOfDeath?: string;
      /** @description Whether it should be an animal performer */
      animalPerformer?: boolean;
      /** @description Whether it should be an audiobook performer */
      audiobookPerformer?: boolean;
      /** @description Whether it should be a cut performer */
      cutPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Discovery */
      disPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Deep Space Nine */
      ds9Performer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Enterprise */
      entPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in a Star Trek movie */
      filmPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Lower Decks */
      ldPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Picard */
      picPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Prodigy */
      proPerformer?: boolean;
      /** @description Whether it should be a puppeteer */
      puppeteer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Strange New Worlds */
      snwPerformer?: boolean;
      /** @description Whether it should be a stand-in performer */
      standInPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Short Treks */
      stPerformer?: boolean;
      /** @description Whether it should be a stunt performer */
      stuntPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: The Animated Series */
      tasPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: The Next Generation */
      tngPerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: The Original Series */
      tosPerformer?: boolean;
      /** @description Whether it should be a video game performer */
      videoGamePerformer?: boolean;
      /** @description Whether it should be a voice performer */
      voicePerformer?: boolean;
      /** @description Whether it should be a performer that appeared in Star Trek: Voyager */
      voyPerformer?: boolean;
    };
    /** @description Base performer, returned in search results (V2) */
    PerformerV2Base: {
      /** @description Performer unique ID */
      uid: string;
      /** @description Performer name */
      name: string;
      /** @description Performer birth name */
      birthName?: string;
      gender?: components["schemas"]["Gender"];
      /**
       * Format: date
       * @description Date the performer was born
       */
      dateOfBirth?: string;
      /** @description Place the performer was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Date the performer died
       */
      dateOfDeath?: string;
      /** @description Place the performer died */
      placeOfDeath?: string;
      /** @description Whether it's an animal performer */
      animalPerformer?: boolean;
      /** @description Whether it's an audiobook performer */
      audiobookPerformer?: boolean;
      /** @description Whether it's a cut performer */
      cutPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Discovery */
      disPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Deep Space Nine */
      ds9Performer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Enterprise */
      entPerformer?: boolean;
      /** @description Whether it's a performer that appeared in a Star Trek movie */
      filmPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Lower Decks */
      ldPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Picard */
      picPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Prodigy */
      proPerformer?: boolean;
      /** @description Whether it's a puppeteer */
      puppeteer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Strange New Worlds */
      snwPerformer?: boolean;
      /** @description Whether it's a stand-in performer */
      standInPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Short Treks */
      stPerformer?: boolean;
      /** @description Whether it's a stunt performer */
      stuntPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Animated Series */
      tasPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Next Generation */
      tngPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Original Series */
      tosPerformer?: boolean;
      /** @description Whether it's a video game performer */
      videoGamePerformer?: boolean;
      /** @description Whether it's a voice performer */
      voicePerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Voyager */
      voyPerformer?: boolean;
    };
    /** @description Full performer, returned when queried using UID (V2) */
    PerformerV2Full: {
      /** @description Performer unique ID */
      uid: string;
      /** @description Performer name */
      name: string;
      /** @description Performer birth name */
      birthName?: string;
      gender?: components["schemas"]["Gender"];
      /**
       * Format: date
       * @description Date the performer was born
       */
      dateOfBirth?: string;
      /** @description Place the performer was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Date the performer died
       */
      dateOfDeath?: string;
      /** @description Place the performer died */
      placeOfDeath?: string;
      /** @description Whether it's an animal performer */
      animalPerformer?: boolean;
      /** @description Whether it's an audiobook performer */
      audiobookPerformer?: boolean;
      /** @description Whether it's a cut performer */
      cutPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Discovery */
      disPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Deep Space Nine */
      ds9Performer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Enterprise */
      entPerformer?: boolean;
      /** @description Whether it's a performer that appeared in a Star Trek movie */
      filmPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Lower Decks */
      ldPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Picard */
      picPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Prodigy */
      proPerformer?: boolean;
      /** @description Whether it's a stand-in puppeteer */
      puppeteer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Strange New Worlds */
      snwPerformer?: boolean;
      /** @description Whether it's a stand-in performer */
      standInPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Short Treks */
      stPerformer?: boolean;
      /** @description Whether it's a stunt performer */
      stuntPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Animated Series */
      tasPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Next Generation */
      tngPerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: The Original Series */
      tosPerformer?: boolean;
      /** @description Whether it's a video game performer */
      videoGamePerformer?: boolean;
      /** @description Whether it's a voice performer */
      voicePerformer?: boolean;
      /** @description Whether it's a performer that appeared in Star Trek: Voyager */
      voyPerformer?: boolean;
      /**
       * @description Episodes in which this person appeared as a performer
       * @default [
       *       []
       *     ]
       */
      episodesPerformances: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes in which this person appeared as a stunt performer
       * @default [
       *       []
       *     ]
       */
      episodesStuntPerformances: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes in which this person appeared as a stand-in performer
       * @default [
       *       []
       *     ]
       */
      episodesStandInPerformances: components["schemas"]["EpisodeBase"][];
      /**
       * @description Movies in which this person appeared as a performer
       * @default [
       *       []
       *     ]
       */
      moviesPerformances: components["schemas"]["MovieBase"][];
      /**
       * @description Movies in which this person appeared as a stunt performer
       * @default [
       *       []
       *     ]
       */
      moviesStuntPerformances: components["schemas"]["MovieBase"][];
      /**
       * @description Movies in which this person appeared as a stand-in performer
       * @default [
       *       []
       *     ]
       */
      moviesStandInPerformances: components["schemas"]["MovieBase"][];
      /**
       * @description Characters played by this performer
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for performers search (V2) */
    PerformerV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of performers matching given criteria
       * @default [
       *       []
       *     ]
       */
      performers: components["schemas"]["PerformerV2Base"][];
    };
    /** @description Response object for single performer query (V2) */
    PerformerV2FullResponse: {
      performer?: components["schemas"]["PerformerV2Full"];
    };
    /** @description Platform of video games */
    Platform: {
      /** @description Platform unique ID */
      uid?: string;
      /** @description Platform name */
      name?: string;
    };
    /**
     * @description Production run unit
     * @enum {string}
     */
    ProductionRunUnit: "BOX" | "SET";
    /** @description Reference of book, comics, video release, etc. */
    Reference: {
      /** @description Reference unique ID */
      uid?: string;
      referenceType?: components["schemas"]["ReferenceType"];
      /** @description Reference number */
      referenceNumber?: string;
    };
    /**
     * @description Reference type
     * @enum {string}
     */
    ReferenceType: "ASIN" | "ISBN" | "EAN" | "ISRC";
    /** @description Object describing response page */
    ResponsePage: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Number of elements in page
       */
      numberOfElements?: number;
      /**
       * Format: int32
       * @description Total elements found
       */
      totalElements?: number;
      /**
       * Format: int32
       * @description Total pages found
       */
      totalPages?: number;
      /** @description Whether it is the first page */
      firstPage?: boolean;
      /** @description Whether it is the last page */
      lastPage?: boolean;
    };
    /** @description Response sort */
    ResponseSort: {
      /**
       * @description List of response sort rules
       * @default [
       *       []
       *     ]
       */
      clauses: components["schemas"]["ResponseSortClause"][];
    };
    /** @description Single response sort clause */
    ResponseSortClause: {
      /** @description Field name results are sorted by */
      name: string;
      direction: components["schemas"]["ResponseSortDirection"];
      /** @description Order in which this clause was applied */
      clauseOrder: number;
    };
    /**
     * @description Sort direction
     * @enum {string}
     */
    ResponseSortDirection: "ASC" | "DESC";
    /** @description Request sort */
    RequestSort: {
      /**
       * @description List of request sort rules
       * @default [
       *       []
       *     ]
       */
      clauses: components["schemas"]["RequestSortClause"][];
    };
    /** @description Single request sort clause */
    RequestSortClause: {
      /** @description Field name results are sorted by */
      name: string;
      direction: components["schemas"]["RequestSortDirection"];
      /** @description Order in which this clause was applied */
      clauseOrder: number;
    };
    /**
     * @description Sort direction
     * @enum {string}
     */
    RequestSortDirection: "ASC" | "DESC";
    /** @description Season search criteria */
    SeasonSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Season title */
      title?: string;
      /**
       * Format: int32
       * @description Minimal season number
       */
      seasonNumberFrom?: number;
      /**
       * Format: int32
       * @description Maximal season number
       */
      seasonNumberTo?: number;
      /**
       * Format: int32
       * @description Minimal number of episodes in season
       */
      numberOfEpisodesFrom?: number;
      /**
       * Format: int32
       * @description Maximal number of episodes in season
       */
      numberOfEpisodesTo?: number;
    };
    /** @description Header season, embedded in other objects */
    SeasonHeader: {
      /** @description Season unique ID */
      uid: string;
      /** @description Season title */
      title: string;
    };
    /** @description Base season, returned in search results */
    SeasonBase: {
      /** @description Season unique ID */
      uid: string;
      /** @description Season title */
      title: string;
      series?: components["schemas"]["SeriesHeader"];
      /** @description Season number in series */
      seasonNumber?: number;
      /** @description Number of episodes in this season */
      numberOfEpisodes?: number;
    };
    /** @description Full location, returned when queried using UID */
    SeasonFull: {
      /** @description Season unique ID */
      uid: string;
      /** @description Season title */
      title: string;
      series?: components["schemas"]["SeriesBase"];
      /** @description Season number in series */
      seasonNumber?: number;
      /** @description Number of episodes in this season */
      numberOfEpisodes?: number;
      /**
       * @description Episodes in this season
       * @default [
       *       []
       *     ]
       */
      episodes: components["schemas"]["EpisodeBase"][];
    };
    /** @description Response object for seasons search */
    SeasonBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of seasons matching given criteria
       * @default [
       *       []
       *     ]
       */
      seasons: components["schemas"]["SeasonBase"][];
    };
    /** @description Response object for single season query */
    SeasonFullResponse: {
      season?: components["schemas"]["SeasonFull"];
    };
    /** @description Series search criteria */
    SeriesSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Series title */
      title?: string;
      /** @description Series abbreviation */
      abbreviation?: string;
      /**
       * Format: int32
       * @description Minimal year the series production started
       */
      productionStartYearFrom?: number;
      /**
       * Format: int32
       * @description Maximal year the series production started
       */
      productionStartYearTo?: number;
      /**
       * Format: int32
       * @description Minimal year the series production ended
       */
      productionEndYearFrom?: number;
      /**
       * Format: int32
       * @description Maximal year the series production ended
       */
      productionEndYearTo?: number;
      /**
       * Format: date
       * @description Minimal date the series originally ran from
       */
      originalRunStartDateFrom?: string;
      /**
       * Format: date
       * @description Maximal date the series originally ran from
       */
      originalRunStartDateTo?: string;
      /**
       * Format: date
       * @description Minimal date the series originally ran to
       */
      originalRunEndDateFrom?: string;
      /**
       * Format: date
       * @description Maximal date the series originally ran to
       */
      originalRunEndDateTo?: string;
    };
    /** @description Header series, embedded in other objects */
    SeriesHeader: {
      /** @description Series unique ID */
      uid: string;
      /** @description Series title */
      title: string;
    };
    /** @description Base series, returned in search results */
    SeriesBase: {
      /** @description Series unique ID */
      uid: string;
      /** @description Series title */
      title: string;
      /** @description Series abbreviation */
      abbreviation: string;
      /** @description Year the series production started */
      productionStartYear?: number;
      /** @description Year the series production ended */
      productionEndYear?: number;
      /**
       * Format: date
       * @description Date the series originally ran from
       */
      originalRunStartDate?: string;
      /**
       * Format: date
       * @description Date the series originally ran to
       */
      originalRunEndDate?: string;
      /** @description Number of seasons */
      seasonsCount?: number;
      /** @description Number of episodes */
      episodesCount?: number;
      /** @description Number of feature length episodes */
      featureLengthEpisodesCount?: number;
      productionCompany?: components["schemas"]["CompanyHeader"];
      originalBroadcaster?: components["schemas"]["CompanyHeader"];
    };
    /** @description Full series, returned when queried using UID */
    SeriesFull: {
      /** @description Series unique ID */
      uid: string;
      /** @description Series title */
      title: string;
      /** @description Series abbreviation */
      abbreviation?: string;
      /** @description Year the series production started */
      productionStartYear?: number;
      /** @description Year the series production ended */
      productionEndYear?: number;
      /**
       * Format: date
       * @description Date the series originally ran from
       */
      originalRunStartDate?: string;
      /**
       * Format: date
       * @description Date the series originally ran to
       */
      originalRunEndDate?: string;
      /** @description Number of seasons */
      seasonsCount?: number;
      /** @description Number of episodes */
      episodesCount?: number;
      /** @description Number of feature length episodes */
      featureLengthEpisodesCount?: number;
      productionCompany?: components["schemas"]["CompanyBase"];
      originalBroadcaster?: components["schemas"]["CompanyBase"];
      /**
       * @description Episodes in the series
       * @default [
       *       []
       *     ]
       */
      episodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Seasons in the series
       * @default [
       *       []
       *     ]
       */
      seasons: components["schemas"]["SeasonBase"][];
    };
    /** @description Response object for series search */
    SeriesBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of series matching given criteria
       * @default [
       *       []
       *     ]
       */
      series: components["schemas"]["SeriesBase"][];
    };
    /** @description Response object for single series query */
    SeriesFullResponse: {
      series?: components["schemas"]["SeriesFull"];
    };
    /** @description Animal search criteria */
    SoundtrackSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Soundtrack title */
      title?: string;
      /**
       * Format: date
       * @description Minimal release date
       */
      releaseDateFrom?: string;
      /**
       * Format: date
       * @description Maximal release date
       */
      releaseDateTo?: string;
      /**
       * Format: int32
       * @description Minimal length, in seconds
       */
      lengthFrom?: number;
      /**
       * Format: int32
       * @description Maximal length, in seconds
       */
      lengthTo?: number;
    };
    /** @description Header soundtrack, embedded in other objects */
    SoundtrackHeader: {
      /** @description Soundtrack unique ID */
      uid: string;
      /** @description Soundtrack title */
      title: string;
    };
    /** @description Base soundtrack, returned in search results */
    SoundtrackBase: {
      /** @description Soundtrack unique ID */
      uid: string;
      /** @description Soundtrack title */
      title: string;
      /**
       * Format: date
       * @description Release date
       */
      releaseDate?: string;
      /** @description Length, in seconds */
      length?: number;
    };
    /** @description Full soundtrack, returned when queried using UID */
    SoundtrackFull: {
      /** @description Soundtrack unique ID */
      uid: string;
      /** @description Soundtrack title */
      title: string;
      /**
       * Format: date
       * @description Release date
       */
      releaseDate?: string;
      /** @description Length, in seconds */
      length?: number;
      /**
       * @description Labels this soundtrack was released by
       * @default [
       *       []
       *     ]
       */
      labels: components["schemas"]["CompanyBase"][];
      /**
       * @description Composers
       * @default [
       *       []
       *     ]
       */
      composers: components["schemas"]["StaffBase"][];
      /**
       * @description Other musicians that contributed to this soundtrack
       * @default [
       *       []
       *     ]
       */
      contributors: components["schemas"]["StaffBase"][];
      /**
       * @description Orchestrators
       * @default [
       *       []
       *     ]
       */
      orchestrators: components["schemas"]["StaffBase"][];
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
    };
    /** @description Response object for soundtracks search */
    SoundtrackBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of soundtracks matching given criteria
       * @default [
       *       []
       *     ]
       */
      soundtracks: components["schemas"]["SoundtrackBase"][];
    };
    /** @description Response object for single soundtrack query */
    SoundtrackFullResponse: {
      soundtrack?: components["schemas"]["SoundtrackFull"];
    };
    /** @description Header spacecraft, embedded in other objects */
    SpacecraftHeader: {
      /** @description Spacecraft unique ID */
      uid: string;
      /** @description Spacecraft name */
      name: string;
    };
    /** @description Base spacecraft, returned in search results */
    SpacecraftBase: {
      /** @description Spacecraft unique ID */
      uid: string;
      /** @description Spacecraft name */
      name: string;
      /** @description Spacecraft registry */
      registry?: string;
      /** @description Status of a spacecraft (in prime reality, if spacecraft was in more than one realities) */
      status?: string;
      /** @description Date the spacecraft status was last known */
      dateStatus?: string;
      spacecraftClass?: components["schemas"]["SpacecraftClassHeader"];
      owner?: components["schemas"]["OrganizationHeader"];
      operator?: components["schemas"]["OrganizationHeader"];
    };
    /** @description Full spacecraft, returned when queried using UID */
    SpacecraftFull: {
      /** @description Spacecraft unique ID */
      uid: string;
      /** @description Spacecraft name */
      name: string;
      /** @description Spacecraft registry */
      registry?: string;
      /** @description Status of a spacecraft (in prime reality, if spacecraft was in more than one realities) */
      status?: string;
      /** @description Date the spacecraft status was last known */
      dateStatus?: string;
      spacecraftClass?: components["schemas"]["SpacecraftClassBase"];
      owner?: components["schemas"]["OrganizationBase"];
      operator?: components["schemas"]["OrganizationBase"];
      /**
       * @description Spacecraft types
       * @default [
       *       []
       *     ]
       */
      spacecraftTypes: components["schemas"]["SpacecraftType"][];
    };
    /** @description Response object for spacecrafts search */
    SpacecraftBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of spacecrafts matching given criteria
       * @default [
       *       []
       *     ]
       */
      spacecrafts: components["schemas"]["SpacecraftBase"][];
    };
    /** @description Response object for single spacecraft query */
    SpacecraftFullResponse: {
      spacecraft?: components["schemas"]["SpacecraftFull"];
    };
    /** @description Animal search criteria */
    SpacecraftV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Spacecraft name */
      name?: string;
      /** @description Spacecraft registry */
      registry?: string;
      /** @description Spacecraft status */
      status?: string;
    };
    /** @description Base spacecraft, returned in search results (V2) */
    SpacecraftV2Base: {
      /** @description Spacecraft unique ID */
      uid: string;
      /** @description Spacecraft name */
      name: string;
      /** @description Spacecraft registry */
      registry?: string;
      /** @description Status of a spacecraft (in prime reality, if spacecraft was in more than one realities) */
      status?: string;
      /** @description Date the spacecraft status was last known */
      dateStatus?: string;
      spacecraftClass?: components["schemas"]["SpacecraftClassHeader"];
      owner?: components["schemas"]["OrganizationHeader"];
      operator?: components["schemas"]["OrganizationHeader"];
      affiliation?: components["schemas"]["OrganizationHeader"];
    };
    /** @description Full spacecraft, returned when queried using UID (V2) */
    SpacecraftV2Full: {
      /** @description Spacecraft unique ID */
      uid: string;
      /** @description Spacecraft name */
      name: string;
      /** @description Spacecraft registry */
      registry?: string;
      /** @description Status of a spacecraft (in prime reality, if spacecraft was in more than one realities) */
      status?: string;
      /** @description Date the spacecraft status was last known */
      dateStatus?: string;
      spacecraftClass?: components["schemas"]["SpacecraftClassV2Base"];
      owner?: components["schemas"]["OrganizationBase"];
      operator?: components["schemas"]["OrganizationBase"];
      affiliation?: components["schemas"]["OrganizationBase"];
      /**
       * @description Spacecraft types
       * @default [
       *       []
       *     ]
       */
      spacecraftTypes: components["schemas"]["SpacecraftType"][];
    };
    /** @description Response object for spacecrafts search (V2) */
    SpacecraftV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of spacecrafts matching given criteria
       * @default [
       *       []
       *     ]
       */
      spacecrafts: components["schemas"]["SpacecraftV2Base"][];
    };
    /** @description Response object for single spacecraft query (V2) */
    SpacecraftV2FullResponse: {
      spacecraft?: components["schemas"]["SpacecraftV2Full"];
    };
    /** @description Header spacecraft class, embedded in other objects */
    SpacecraftClassHeader: {
      /** @description Spacecraft class unique ID */
      uid: string;
      /** @description Spacecraft class name */
      name: string;
    };
    /** @description Base spacecraft class, returned in search results */
    SpacecraftClassBase: {
      /** @description Spacecraft class unique ID */
      uid: string;
      /** @description Spacecraft class name */
      name: string;
      /** @description Number of decks */
      numberOfDecks?: number;
      /** @description Whether it's a warp-capable spacecraft class */
      warpCapable?: boolean;
      /** @description Whether this spacecraft class is from alternate reality */
      alternateReality?: boolean;
      /** @description Starting period when this spacecraft class was in use */
      activeFrom?: string;
      /** @description Ending period when this spacecraft class was in use */
      activeTo?: string;
      species?: components["schemas"]["SpeciesHeader"];
      owner?: components["schemas"]["OrganizationHeader"];
      operator?: components["schemas"]["OrganizationHeader"];
      affiliation?: components["schemas"]["OrganizationHeader"];
    };
    /** @description Full spacecraft class, returned when queried using UID */
    SpacecraftClassFull: {
      /** @description Spacecraft class unique ID */
      uid: string;
      /** @description Spacecraft class name */
      name: string;
      /** @description Number of decks */
      numberOfDecks?: number;
      /** @description Whether it's a warp-capable spacecraft class */
      warpCapable?: boolean;
      /** @description Whether this spacecraft class is from alternate reality */
      alternateReality?: boolean;
      /** @description Starting period when this spacecraft class was in use */
      activeFrom?: string;
      /** @description Ending period when this spacecraft class was in use */
      activeTo?: string;
      species?: components["schemas"]["SpeciesHeader"];
      owner?: components["schemas"]["OrganizationBase"];
      operator?: components["schemas"]["OrganizationBase"];
      affiliation?: components["schemas"]["OrganizationBase"];
      /**
       * @description Spacecraft types
       * @default [
       *       []
       *     ]
       */
      spacecraftTypes: components["schemas"]["SpacecraftType"][];
      /**
       * @description Spacecrafts
       * @default [
       *       []
       *     ]
       */
      spacecrafts: components["schemas"]["SpacecraftBase"][];
    };
    /** @description Response object for spacecraft classes search */
    SpacecraftClassBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of spacecraft classes matching given criteria
       * @default [
       *       []
       *     ]
       */
      spacecraftClasses: components["schemas"]["SpacecraftClassBase"][];
    };
    /** @description Response object for single spacecraft class query */
    SpacecraftClassFullResponse: {
      spacecraftClass?: components["schemas"]["SpacecraftClassFull"];
    };
    /** @description Animal search criteria */
    SpacecraftClassV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Spacecraft class name */
      name?: string;
      /** @description Whether it should be a warp-capable spacecraft class */
      warpCapableSpecies?: boolean;
      /** @description Whether this spacecraft class should be from mirror universe */
      mirror?: boolean;
      /** @description Whether this spacecraft class should be from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Base spacecraft class, returned in search results (V2) */
    SpacecraftClassV2Base: {
      /** @description Spacecraft class unique ID */
      uid: string;
      /** @description Spacecraft class name */
      name: string;
      /** @description Number of decks */
      numberOfDecks?: number;
      /** @description Crew */
      crew?: string;
      /** @description Whether it's a warp-capable spacecraft class */
      warpCapable?: boolean;
      /** @description Whether this spacecraft class is from mirror universe */
      mirror?: boolean;
      /** @description Whether this spacecraft class is from alternate reality */
      alternateReality?: boolean;
      /** @description Starting period when this spacecraft class was in use */
      activeFrom?: string;
      /** @description Ending period when this spacecraft class was in use */
      activeTo?: string;
      species?: components["schemas"]["SpeciesHeader"];
    };
    /** @description Full spacecraft class, returned when queried using UID (V2) */
    SpacecraftClassV2Full: {
      /** @description Spacecraft class unique ID */
      uid: string;
      /** @description Spacecraft class name */
      name: string;
      /** @description Number of decks */
      numberOfDecks?: number;
      /** @description Crew */
      crew?: string;
      /** @description Whether it's a warp-capable spacecraft class */
      warpCapable?: boolean;
      /** @description Whether this spacecraft class is from mirror universe */
      mirror?: boolean;
      /** @description Whether this spacecraft class is from alternate reality */
      alternateReality?: boolean;
      /** @description Starting period when this spacecraft class was in use */
      activeFrom?: string;
      /** @description Ending period when this spacecraft class was in use */
      activeTo?: string;
      species?: components["schemas"]["SpeciesBase"];
      /**
       * @description Owners
       * @default [
       *       []
       *     ]
       */
      owners: components["schemas"]["OrganizationBase"][];
      /**
       * @description Operators
       * @default [
       *       []
       *     ]
       */
      operators: components["schemas"]["OrganizationBase"][];
      /**
       * @description Affiliations
       * @default [
       *       []
       *     ]
       */
      affiliations: components["schemas"]["OrganizationBase"][];
      /**
       * @description Spacecraft types
       * @default [
       *       []
       *     ]
       */
      spacecraftTypes: components["schemas"]["SpacecraftType"][];
      /**
       * @description Armaments
       * @default [
       *       []
       *     ]
       */
      armaments: components["schemas"]["WeaponV2Base"][];
      /**
       * @description Spacecrafts
       * @default [
       *       []
       *     ]
       */
      spacecrafts: components["schemas"]["SpacecraftV2Base"][];
    };
    /** @description Response object for spacecraft classes search (V2) */
    SpacecraftClassV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of spacecraft classes matching given criteria
       * @default [
       *       []
       *     ]
       */
      spacecraftClasses: components["schemas"]["SpacecraftClassV2Base"][];
    };
    /** @description Response object for single spacecraft class query (V2) */
    SpacecraftClassV2FullResponse: {
      spacecraftClass?: components["schemas"]["SpacecraftClassV2Full"];
    };
    /** @description Full spacecraft class, returned when queried using UID (V3) */
    SpacecraftClassV3Full: {
      /** @description Spacecraft class unique ID */
      uid: string;
      /** @description Spacecraft class name */
      name: string;
      /** @description Number of decks */
      numberOfDecks?: number;
      /** @description Crew */
      crew?: string;
      /** @description Whether it's a warp-capable spacecraft class */
      warpCapable?: boolean;
      /** @description Whether this spacecraft class is from mirror universe */
      mirror?: boolean;
      /** @description Whether this spacecraft class is from alternate reality */
      alternateReality?: boolean;
      /** @description Starting period when this spacecraft class was in use */
      activeFrom?: string;
      /** @description Ending period when this spacecraft class was in use */
      activeTo?: string;
      species?: components["schemas"]["SpeciesBase"];
      /**
       * @description Owners
       * @default [
       *       []
       *     ]
       */
      owners: components["schemas"]["OrganizationBase"][];
      /**
       * @description Operators
       * @default [
       *       []
       *     ]
       */
      operators: components["schemas"]["OrganizationBase"][];
      /**
       * @description Affiliations
       * @default [
       *       []
       *     ]
       */
      affiliations: components["schemas"]["OrganizationBase"][];
      /**
       * @description Spacecraft types
       * @default [
       *       []
       *     ]
       */
      spacecraftTypes: components["schemas"]["SpacecraftType"][];
      /**
       * @description Armaments
       * @default [
       *       []
       *     ]
       */
      armaments: components["schemas"]["WeaponV2Base"][];
      /**
       * @description Defenses
       * @default [
       *       []
       *     ]
       */
      defenses: components["schemas"]["TechnologyV2Base"][];
      /**
       * @description Spacecrafts
       * @default [
       *       []
       *     ]
       */
      spacecrafts: components["schemas"]["SpacecraftV2Base"][];
    };
    /** @description Response object for single spacecraft class query (V3) */
    SpacecraftClassV3FullResponse: {
      spacecraftClass?: components["schemas"]["SpacecraftClassV3Full"];
    };
    /** @description Spacecraft type */
    SpacecraftType: {
      /** @description Spacecraft type unique ID */
      uid?: string;
      /** @description Spacecraft type name */
      name?: string;
    };
    /** @description Header species, embedded in other objects */
    SpeciesHeader: {
      /** @description Species unique ID */
      uid: string;
      /** @description Species name */
      name: string;
    };
    /** @description Base species, returned in search results */
    SpeciesBase: {
      /** @description Species unique ID */
      uid: string;
      /** @description Species name */
      name: string;
      homeworld?: components["schemas"]["AstronomicalObjectHeader"];
      quadrant?: components["schemas"]["AstronomicalObjectHeader"];
      /** @description Whether it's an extinct species */
      extinctSpecies?: boolean;
      /** @description Whether it's a warp-capable species */
      warpCapableSpecies?: boolean;
      /** @description Whether it's an extra-galactic species */
      extraGalacticSpecies?: boolean;
      /** @description Whether it's a humanoid species */
      humanoidSpecies?: boolean;
      /** @description Whether it's a reptilian species */
      reptilianSpecies?: boolean;
      /** @description Whether it's a non-corporeal species */
      nonCorporealSpecies?: boolean;
      /** @description Whether it's a shapeshifting species */
      shapeshiftingSpecies?: boolean;
      /** @description Whether it's a spaceborne species */
      spaceborneSpecies?: boolean;
      /** @description Whether it's a telepathic species */
      telepathicSpecies?: boolean;
      /** @description Whether it's a trans-dimensional species */
      transDimensionalSpecies?: boolean;
      /** @description Whether it's a unnamed species */
      unnamedSpecies?: boolean;
      /** @description Whether this species is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Full species, returned when queried using UID */
    SpeciesFull: {
      /** @description Species unique ID */
      uid: string;
      /** @description Species name */
      name: string;
      homeworld?: components["schemas"]["AstronomicalObjectBase"];
      quadrant?: components["schemas"]["AstronomicalObjectBase"];
      /** @description Whether it's an extinct species */
      extinctSpecies?: boolean;
      /** @description Whether it's a warp-capable species */
      warpCapableSpecies?: boolean;
      /** @description Whether it's an extra-galactic species */
      extraGalacticSpecies?: boolean;
      /** @description Whether it's a humanoid species */
      humanoidSpecies?: boolean;
      /** @description Whether it's a reptilian species */
      reptilianSpecies?: boolean;
      /** @description Whether it's a non-corporeal species */
      nonCorporealSpecies?: boolean;
      /** @description Whether it's a shapeshifting species */
      shapeshiftingSpecies?: boolean;
      /** @description Whether it's a spaceborne species */
      spaceborneSpecies?: boolean;
      /** @description Whether it's a telepathic species */
      telepathicSpecies?: boolean;
      /** @description Whether it's a trans-dimensional species */
      transDimensionalSpecies?: boolean;
      /** @description Whether it's a unnamed species */
      unnamedSpecies?: boolean;
      /** @description Whether this species is from alternate reality */
      alternateReality?: boolean;
      /**
       * @description Characters belonging to the species
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for species search */
    SpeciesBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of species matching given criteria
       * @default [
       *       []
       *     ]
       */
      species: components["schemas"]["SpeciesBase"][];
    };
    /** @description Response object for single species query */
    SpeciesFullResponse: {
      species?: components["schemas"]["SpeciesFull"];
    };
    /** @description Animal search criteria */
    SpeciesV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Species name */
      name?: string;
      /** @description Whether it should be an extinct species */
      extinctSpecies?: boolean;
      /** @description Whether it should be a warp-capable species */
      warpCapableSpecies?: boolean;
      /** @description Whether it should be an extra-galactic species */
      extraGalacticSpecies?: boolean;
      /** @description Whether it should be a humanoid species */
      humanoidSpecies?: boolean;
      /** @description Whether it should be a reptilian species */
      reptilianSpecies?: boolean;
      /** @description Whether it should be an avian species */
      avianSpecies?: boolean;
      /** @description Whether it should be a non-corporeal species */
      nonCorporealSpecies?: boolean;
      /** @description Whether it should be a shapeshifting species */
      shapeshiftingSpecies?: boolean;
      /** @description Whether it should be a spaceborne species */
      spaceborneSpecies?: boolean;
      /** @description Whether it should be a telepathic species */
      telepathicSpecies?: boolean;
      /** @description Whether it should be a trans-dimensional species */
      transDimensionalSpecies?: boolean;
      /** @description Whether it should be a unnamed species */
      unnamedSpecies?: boolean;
      /** @description Whether this species should be from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Base species, returned in search results (V2) */
    SpeciesV2Base: {
      /** @description Species unique ID */
      uid: string;
      /** @description Species name */
      name: string;
      homeworld?: components["schemas"]["AstronomicalObjectHeader"];
      quadrant?: components["schemas"]["AstronomicalObjectHeader"];
      /** @description Whether it's an extinct species */
      extinctSpecies?: boolean;
      /** @description Whether it's a warp-capable species */
      warpCapableSpecies?: boolean;
      /** @description Whether it's an extra-galactic species */
      extraGalacticSpecies?: boolean;
      /** @description Whether it's a humanoid species */
      humanoidSpecies?: boolean;
      /** @description Whether it's a reptilian species */
      reptilianSpecies?: boolean;
      /** @description Whether it's an avian species */
      avianSpecies?: boolean;
      /** @description Whether it's a non-corporeal species */
      nonCorporealSpecies?: boolean;
      /** @description Whether it's a shapeshifting species */
      shapeshiftingSpecies?: boolean;
      /** @description Whether it's a spaceborne species */
      spaceborneSpecies?: boolean;
      /** @description Whether it's a telepathic species */
      telepathicSpecies?: boolean;
      /** @description Whether it's a trans-dimensional species */
      transDimensionalSpecies?: boolean;
      /** @description Whether it's a unnamed species */
      unnamedSpecies?: boolean;
      /** @description Whether this species is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Full species, returned when queried using UID (V2) */
    SpeciesV2Full: {
      /** @description Species unique ID */
      uid: string;
      /** @description Species name */
      name: string;
      homeworld?: components["schemas"]["AstronomicalObjectV2Base"];
      quadrant?: components["schemas"]["AstronomicalObjectV2Base"];
      /** @description Whether it's an extinct species */
      extinctSpecies?: boolean;
      /** @description Whether it's a warp-capable species */
      warpCapableSpecies?: boolean;
      /** @description Whether it's an extra-galactic species */
      extraGalacticSpecies?: boolean;
      /** @description Whether it's a humanoid species */
      humanoidSpecies?: boolean;
      /** @description Whether it's a reptilian species */
      reptilianSpecies?: boolean;
      /** @description Whether it's an avian species */
      avianSpecies?: boolean;
      /** @description Whether it's a non-corporeal species */
      nonCorporealSpecies?: boolean;
      /** @description Whether it's a shapeshifting species */
      shapeshiftingSpecies?: boolean;
      /** @description Whether it's a spaceborne species */
      spaceborneSpecies?: boolean;
      /** @description Whether it's a telepathic species */
      telepathicSpecies?: boolean;
      /** @description Whether it's a trans-dimensional species */
      transDimensionalSpecies?: boolean;
      /** @description Whether it's a unnamed species */
      unnamedSpecies?: boolean;
      /** @description Whether this species is from alternate reality */
      alternateReality?: boolean;
      /**
       * @description Characters belonging to the species
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for species search (V2) */
    SpeciesV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of species matching given criteria
       * @default [
       *       []
       *     ]
       */
      species: components["schemas"]["SpeciesV2Base"][];
    };
    /** @description Response object for single species query (V2) */
    SpeciesV2FullResponse: {
      species?: components["schemas"]["SpeciesV2Full"];
    };
    /** @description Header staff, embedded in other objects */
    StaffHeader: {
      /** @description Staff unique ID */
      uid: string;
      /** @description Staff name */
      name: string;
    };
    /** @description Base staff, returned in search results */
    StaffBase: {
      /** @description Staff unique ID */
      uid: string;
      /** @description Staff name */
      name: string;
      /** @description Staff birth name */
      birthName?: string;
      gender?: components["schemas"]["Gender"];
      /**
       * Format: date
       * @description Date the staff was born
       */
      dateOfBirth?: string;
      /** @description Place the staff was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Date the staff died
       */
      dateOfDeath?: string;
      /** @description Place the staff died */
      placeOfDeath?: string;
      /** @description Whether this person if from art department */
      artDepartment?: boolean;
      /** @description Whether this person is an art director */
      artDirector?: boolean;
      /** @description Whether this person is a production designer */
      productionDesigner?: boolean;
      /** @description Whether this person is from camera and electrical department */
      cameraAndElectricalDepartment?: boolean;
      /** @description Whether this person is a cinematographer */
      cinematographer?: boolean;
      /** @description Whether this person is from casting department */
      castingDepartment?: boolean;
      /** @description Whether this person is from costume department */
      costumeDepartment?: boolean;
      /** @description Whether this person is a custume designer */
      costumeDesigner?: boolean;
      /** @description Whether this person is a director */
      director?: boolean;
      /** @description Whether this person is an assistant or second unit director director */
      assistantOrSecondUnitDirector?: boolean;
      /** @description Whether this person is an exhibit and tttraction staff */
      exhibitAndAttractionStaff?: boolean;
      /** @description Whether this person is a film editor */
      filmEditor?: boolean;
      /** @description Whether this person is a linguist */
      linguist?: boolean;
      /** @description Whether this person is a location staff */
      locationStaff?: boolean;
      /** @description Whether this person is a make-up staff */
      makeupStaff?: boolean;
      /** @description Whether this person is from music department */
      musicDepartment?: boolean;
      /** @description Whether this person is a composer */
      composer?: boolean;
      /** @description Whether this person is a personal assistant */
      personalAssistant?: boolean;
      /** @description Whether this person is a producer */
      producer?: boolean;
      /** @description Whether this person is a production associate */
      productionAssociate?: boolean;
      /** @description Whether this person is a production staff */
      productionStaff?: boolean;
      /** @description Whether this person is a publication staff */
      publicationStaff?: boolean;
      /** @description Whether this person is a science consultant */
      scienceConsultant?: boolean;
      /** @description Whether this person is from sound department */
      soundDepartment?: boolean;
      /** @description Whether this person is a special and visual effects staff */
      specialAndVisualEffectsStaff?: boolean;
      /** @description Whether this person is an author */
      author?: boolean;
      /** @description Whether this person is an audio author */
      audioAuthor?: boolean;
      /** @description Whether this person is a calendar artist */
      calendarArtist?: boolean;
      /** @description Whether this person is a comic artist */
      comicArtist?: boolean;
      /** @description Whether this person is a comic author */
      comicAuthor?: boolean;
      /** @description Whether this person is a comic color artist */
      comicColorArtist?: boolean;
      /** @description Whether this person is a comic interior artist */
      comicInteriorArtist?: boolean;
      /** @description Whether this person is a comic ink artist */
      comicInkArtist?: boolean;
      /** @description Whether this person is a comic pencil artist */
      comicPencilArtist?: boolean;
      /** @description Whether this person is a comic letter artist */
      comicLetterArtist?: boolean;
      /** @description Whether this person is a comic strip artist */
      comicStripArtist?: boolean;
      /** @description Whether this person is a game artist */
      gameArtist?: boolean;
      /** @description Whether this person is a game author */
      gameAuthor?: boolean;
      /** @description Whether this person is a novel artist */
      novelArtist?: boolean;
      /** @description Whether this person is a novel author */
      novelAuthor?: boolean;
      /** @description Whether this person is a reference artist */
      referenceArtist?: boolean;
      /** @description Whether this person is a reference author */
      referenceAuthor?: boolean;
      /** @description Whether this person is a publication artist */
      publicationArtist?: boolean;
      /** @description Whether this person is a publication designer */
      publicationDesigner?: boolean;
      /** @description Whether this person is a publication editor */
      publicationEditor?: boolean;
      /** @description Whether this person is a publication artist */
      publicityArtist?: boolean;
      /** @description Whether this person is a part of CBS digital staff */
      cbsDigitalStaff?: boolean;
      /** @description Whether this person is a part of ILM production staff */
      ilmProductionStaff?: boolean;
      /** @description Whether this person is a special features artist */
      specialFeaturesStaff?: boolean;
      /** @description Whether this person is a story editor */
      storyEditor?: boolean;
      /** @description Whether this person is a studio executive */
      studioExecutive?: boolean;
      /** @description Whether this person is from stunt department */
      stuntDepartment?: boolean;
      /** @description Whether this person is from transportation department */
      transportationDepartment?: boolean;
      /** @description Whether this person is video game production staff */
      videoGameProductionStaff?: boolean;
      /** @description Whether this person is a writer */
      writer?: boolean;
    };
    /** @description Full staff, returned when queried using UID */
    StaffFull: {
      /** @description Staff unique ID */
      uid: string;
      /** @description Staff name */
      name: string;
      /** @description Staff birth name */
      birthName?: string;
      gender?: components["schemas"]["Gender"];
      /**
       * Format: date
       * @description Date the staff was born
       */
      dateOfBirth?: string;
      /** @description Place the staff was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Date the staff died
       */
      dateOfDeath?: string;
      /** @description Place the staff died */
      placeOfDeath?: string;
      /** @description Whether this person is from art department */
      artDepartment?: boolean;
      /** @description Whether this person is an art director */
      artDirector?: boolean;
      /** @description Whether this person is a production designer */
      productionDesigner?: boolean;
      /** @description Whether this person is from camera and electrical department */
      cameraAndElectricalDepartment?: boolean;
      /** @description Whether this person is a cinematographer */
      cinematographer?: boolean;
      /** @description Whether this person is from casting department */
      castingDepartment?: boolean;
      /** @description Whether this person is from costume department */
      costumeDepartment?: boolean;
      /** @description Whether this person is a custume designer */
      costumeDesigner?: boolean;
      /** @description Whether this person is a director */
      director?: boolean;
      /** @description Whether this person is an assistant or second unit director director */
      assistantOrSecondUnitDirector?: boolean;
      /** @description Whether this person is an exhibit and attraction staff */
      exhibitAndAttractionStaff?: boolean;
      /** @description Whether this person is a film editor */
      filmEditor?: boolean;
      /** @description Whether this person is a linguist */
      linguist?: boolean;
      /** @description Whether this person is a location staff */
      locationStaff?: boolean;
      /** @description Whether this person is a make-up staff */
      makeupStaff?: boolean;
      /** @description Whether this person is from music department */
      musicDepartment?: boolean;
      /** @description Whether this person is a composer */
      composer?: boolean;
      /** @description Whether this person is a personal assistant */
      personalAssistant?: boolean;
      /** @description Whether this person is a producer */
      producer?: boolean;
      /** @description Whether this person is a production associate */
      productionAssociate?: boolean;
      /** @description Whether this person is a production staff */
      productionStaff?: boolean;
      /** @description Whether this person is a publication staff */
      publicationStaff?: boolean;
      /** @description Whether this person is a science consultant */
      scienceConsultant?: boolean;
      /** @description Whether this person is from sound department */
      soundDepartment?: boolean;
      /** @description Whether this person is a special and visual effects staff */
      specialAndVisualEffectsStaff?: boolean;
      /** @description Whether this person is an author */
      author?: boolean;
      /** @description Whether this person is an audio author */
      audioAuthor?: boolean;
      /** @description Whether this person is a calendar artist */
      calendarArtist?: boolean;
      /** @description Whether this person is a comic artist */
      comicArtist?: boolean;
      /** @description Whether this person is a comic author */
      comicAuthor?: boolean;
      /** @description Whether this person is a comic color artist */
      comicColorArtist?: boolean;
      /** @description Whether this person is a comic interior artist */
      comicInteriorArtist?: boolean;
      /** @description Whether this person is a comic ink artist */
      comicInkArtist?: boolean;
      /** @description Whether this person is a comic pencil artist */
      comicPencilArtist?: boolean;
      /** @description Whether this person is a comic letter artist */
      comicLetterArtist?: boolean;
      /** @description Whether this person is a comic strip artist */
      comicStripArtist?: boolean;
      /** @description Whether this person is a game artist */
      gameArtist?: boolean;
      /** @description Whether this person is a game author */
      gameAuthor?: boolean;
      /** @description Whether this person is a novel artist */
      novelArtist?: boolean;
      /** @description Whether this person is a novel author */
      novelAuthor?: boolean;
      /** @description Whether this person is a reference artist */
      referenceArtist?: boolean;
      /** @description Whether this person is a reference author */
      referenceAuthor?: boolean;
      /** @description Whether this person is a publication artist */
      publicationArtist?: boolean;
      /** @description Whether this person is a publication designer */
      publicationDesigner?: boolean;
      /** @description Whether this person is a publication editor */
      publicationEditor?: boolean;
      /** @description Whether this person is a publicity artist */
      publicityArtist?: boolean;
      /** @description Whether this person is a part of CBS digital staff */
      cbsDigitalStaff?: boolean;
      /** @description Whether this person is a part of ILM production staff */
      ilmProductionStaff?: boolean;
      /** @description Whether this person is a special features artist */
      specialFeaturesStaff?: boolean;
      /** @description Whether this person is a story editor */
      storyEditor?: boolean;
      /** @description Whether this person is a studio executive */
      studioExecutive?: boolean;
      /** @description Whether this person is from stunt department */
      stuntDepartment?: boolean;
      /** @description Whether this person is from transportation department */
      transportationDepartment?: boolean;
      /** @description Whether this person is video game production staff */
      videoGameProductionStaff?: boolean;
      /** @description Whether this person is a writer */
      writer?: boolean;
      /**
       * @description Episodes written by this person
       * @default [
       *       []
       *     ]
       */
      writtenEpisodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes to which this person has written teleplay
       * @default [
       *       []
       *     ]
       */
      teleplayAuthoredEpisodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes to which this person has written story
       * @default [
       *       []
       *     ]
       */
      storyAuthoredEpisodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes directed by this person
       * @default [
       *       []
       *     ]
       */
      directedEpisodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes on which this person worked
       * @default [
       *       []
       *     ]
       */
      episodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Movies written by this person
       * @default [
       *       []
       *     ]
       */
      writtenMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies to which this person has written screenplay
       * @default [
       *       []
       *     ]
       */
      screenplayAuthoredMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies to which this person has written story
       * @default [
       *       []
       *     ]
       */
      storyAuthoredMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies directed by this person
       * @default [
       *       []
       *     ]
       */
      directedMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies produced by this person
       * @default [
       *       []
       *     ]
       */
      producedMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies on which this person worked
       * @default [
       *       []
       *     ]
       */
      movies: components["schemas"]["MovieBase"][];
    };
    /** @description Response object for staff search */
    StaffBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of staff matching given criteria
       * @default [
       *       []
       *     ]
       */
      staff: components["schemas"]["StaffBase"][];
    };
    /** @description Response object for single staff query */
    StaffFullResponse: {
      staff?: components["schemas"]["StaffFull"];
    };
    /** @description Animal search criteria */
    StaffV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Staff name */
      name?: string;
      /** @description Staff birth name */
      birthName?: string;
      /** @description Staff gender */
      gender?: string;
      /**
       * Format: date
       * @description Minimal date the staff was born
       */
      dateOfBirthFrom?: string;
      /**
       * Format: date
       * @description Maximal date the staff was born
       */
      dateOfBirthTo?: string;
      /** @description Place the staff was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Minimal date the staff died
       */
      dateOfDeathFrom?: string;
      /**
       * Format: date
       * @description Maximal date the staff died
       */
      dateOfDeathTo?: string;
      /** @description Place the staff died */
      placeOfDeath?: string;
      /** @description Whether this person should be from art department */
      artDepartment?: boolean;
      /** @description Whether this person should be an art director */
      artDirector?: boolean;
      /** @description Whether this person should be a production designer */
      productionDesigner?: boolean;
      /** @description Whether this person should be from camera and electrical department */
      cameraAndElectricalDepartment?: boolean;
      /** @description Whether this person should be a cinematographer */
      cinematographer?: boolean;
      /** @description Whether this person should be from casting department */
      castingDepartment?: boolean;
      /** @description Whether this person should be from costume department */
      costumeDepartment?: boolean;
      /** @description Whether this person should be a custume designer */
      costumeDesigner?: boolean;
      /** @description Whether this person should be a director */
      director?: boolean;
      /** @description Whether this person should be an assistant or second unit director director */
      assistantOrSecondUnitDirector?: boolean;
      /** @description Whether this person should be an exhibit and attraction staff */
      exhibitAndAttractionStaff?: boolean;
      /** @description Whether this person should be a film editor */
      filmEditor?: boolean;
      /** @description Whether this person should be a part of Filmation production staff */
      filmationProductionStaff?: boolean;
      /** @description Whether this person should be a linguist */
      linguist?: boolean;
      /** @description Whether this person should be a location staff */
      locationStaff?: boolean;
      /** @description Whether this person should be a make-up staff */
      makeupStaff?: boolean;
      /** @description Whether this person should be a merchandise staff */
      merchandiseStaff?: boolean;
      /** @description Whether this person should be from music department */
      musicDepartment?: boolean;
      /** @description Whether this person should be a composer */
      composer?: boolean;
      /** @description Whether this person should be a personal assistant */
      personalAssistant?: boolean;
      /** @description Whether this person should be a producer */
      producer?: boolean;
      /** @description Whether this person should be a production associate */
      productionAssociate?: boolean;
      /** @description Whether this person should be a production staff */
      productionStaff?: boolean;
      /** @description Whether this person should be a publication staff */
      publicationStaff?: boolean;
      /** @description Whether this person should be a science consultant */
      scienceConsultant?: boolean;
      /** @description Whether this person should be from sound department */
      soundDepartment?: boolean;
      /** @description Whether this person should be a special and visual effects staff */
      specialAndVisualEffectsStaff?: boolean;
      /** @description Whether this person should be an author */
      author?: boolean;
      /** @description Whether this person should be an audio author */
      audioAuthor?: boolean;
      /** @description Whether this person should be a calendar artist */
      calendarArtist?: boolean;
      /** @description Whether this person should be a comic artist */
      comicArtist?: boolean;
      /** @description Whether this person should be a comic author */
      comicAuthor?: boolean;
      /** @description Whether this person should be a comic color artist */
      comicColorArtist?: boolean;
      /** @description Whether this person should be a comic cover artist */
      comicCoverArtist?: boolean;
      /** @description Whether this person should be a comic interior artist */
      comicInteriorArtist?: boolean;
      /** @description Whether this person should be a comic ink artist */
      comicInkArtist?: boolean;
      /** @description Whether this person should be a comic pencil artist */
      comicPencilArtist?: boolean;
      /** @description Whether this person should be a comic letter artist */
      comicLetterArtist?: boolean;
      /** @description Whether this person should be a comic strip artist */
      comicStripArtist?: boolean;
      /** @description Whether this person should be a game artist */
      gameArtist?: boolean;
      /** @description Whether this person should be a game author */
      gameAuthor?: boolean;
      /** @description Whether this person should be a novel artist */
      novelArtist?: boolean;
      /** @description Whether this person should be a novel author */
      novelAuthor?: boolean;
      /** @description Whether this person should be a reference artist */
      referenceArtist?: boolean;
      /** @description Whether this person should be a reference author */
      referenceAuthor?: boolean;
      /** @description Whether this person should be a publication artist */
      publicationArtist?: boolean;
      /** @description Whether this person should be a publication designer */
      publicationDesigner?: boolean;
      /** @description Whether this person should be a publication editor */
      publicationEditor?: boolean;
      /** @description Whether this person should be a publicity artist */
      publicityArtist?: boolean;
      /** @description Whether this person should be a part of CBS digital staff */
      cbsDigitalStaff?: boolean;
      /** @description Whether this person should be a part of ILM production staff */
      ilmProductionStaff?: boolean;
      /** @description Whether this person should be a special features artist */
      specialFeaturesStaff?: boolean;
      /** @description Whether this person should be a story editor */
      storyEditor?: boolean;
      /** @description Whether this person should be a studio executive */
      studioExecutive?: boolean;
      /** @description Whether this person should be from stunt department */
      stuntDepartment?: boolean;
      /** @description Whether this person should be from transportation department */
      transportationDepartment?: boolean;
      /** @description Whether this person is video game production staff */
      videoGameProductionStaff?: boolean;
      /** @description Whether this person should be a writer */
      writer?: boolean;
    };
    /** @description Base staff, returned in search results (V2) */
    StaffV2Base: {
      /** @description Staff unique ID */
      uid: string;
      /** @description Staff name */
      name: string;
      /** @description Staff birth name */
      birthName?: string;
      gender?: components["schemas"]["Gender"];
      /**
       * Format: date
       * @description Date the staff was born
       */
      dateOfBirth?: string;
      /** @description Place the staff was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Date the staff died
       */
      dateOfDeath?: string;
      /** @description Place the staff died */
      placeOfDeath?: string;
      /** @description Whether this person if from art department */
      artDepartment?: boolean;
      /** @description Whether this person is an art director */
      artDirector?: boolean;
      /** @description Whether this person is a production designer */
      productionDesigner?: boolean;
      /** @description Whether this person is from camera and electrical department */
      cameraAndElectricalDepartment?: boolean;
      /** @description Whether this person is a cinematographer */
      cinematographer?: boolean;
      /** @description Whether this person is from casting department */
      castingDepartment?: boolean;
      /** @description Whether this person is from costume department */
      costumeDepartment?: boolean;
      /** @description Whether this person is a custume designer */
      costumeDesigner?: boolean;
      /** @description Whether this person is a director */
      director?: boolean;
      /** @description Whether this person is an assistant or second unit director director */
      assistantOrSecondUnitDirector?: boolean;
      /** @description Whether this person is an exhibit and attraction staff */
      exhibitAndAttractionStaff?: boolean;
      /** @description Whether this person is a film editor */
      filmEditor?: boolean;
      /** @description Whether this person is a part of Filmation production staff */
      filmationProductionStaff?: boolean;
      /** @description Whether this person is a linguist */
      linguist?: boolean;
      /** @description Whether this person is a location staff */
      locationStaff?: boolean;
      /** @description Whether this person is a make-up staff */
      makeupStaff?: boolean;
      /** @description Whether this person is a merchandise staff */
      merchandiseStaff?: boolean;
      /** @description Whether this person is from music department */
      musicDepartment?: boolean;
      /** @description Whether this person is a composer */
      composer?: boolean;
      /** @description Whether this person is a personal assistant */
      personalAssistant?: boolean;
      /** @description Whether this person is a producer */
      producer?: boolean;
      /** @description Whether this person is a production associate */
      productionAssociate?: boolean;
      /** @description Whether this person is a production staff */
      productionStaff?: boolean;
      /** @description Whether this person is a publication staff */
      publicationStaff?: boolean;
      /** @description Whether this person is a science consultant */
      scienceConsultant?: boolean;
      /** @description Whether this person is from sound department */
      soundDepartment?: boolean;
      /** @description Whether this person is a special and visual effects staff */
      specialAndVisualEffectsStaff?: boolean;
      /** @description Whether this person is an author */
      author?: boolean;
      /** @description Whether this person is an audio author */
      audioAuthor?: boolean;
      /** @description Whether this person is a calendar artist */
      calendarArtist?: boolean;
      /** @description Whether this person is a comic artist */
      comicArtist?: boolean;
      /** @description Whether this person is a comic author */
      comicAuthor?: boolean;
      /** @description Whether this person is a comic color artist */
      comicColorArtist?: boolean;
      /** @description Whether this person is a comic cover artist */
      comicCoverArtist?: boolean;
      /** @description Whether this person is a comic interior artist */
      comicInteriorArtist?: boolean;
      /** @description Whether this person is a comic ink artist */
      comicInkArtist?: boolean;
      /** @description Whether this person is a comic pencil artist */
      comicPencilArtist?: boolean;
      /** @description Whether this person is a comic letter artist */
      comicLetterArtist?: boolean;
      /** @description Whether this person is a comic strip artist */
      comicStripArtist?: boolean;
      /** @description Whether this person is a game artist */
      gameArtist?: boolean;
      /** @description Whether this person is a game author */
      gameAuthor?: boolean;
      /** @description Whether this person is a novel artist */
      novelArtist?: boolean;
      /** @description Whether this person is a novel author */
      novelAuthor?: boolean;
      /** @description Whether this person is a reference artist */
      referenceArtist?: boolean;
      /** @description Whether this person is a reference author */
      referenceAuthor?: boolean;
      /** @description Whether this person is a publication artist */
      publicationArtist?: boolean;
      /** @description Whether this person is a publication designer */
      publicationDesigner?: boolean;
      /** @description Whether this person is a publication editor */
      publicationEditor?: boolean;
      /** @description Whether this person is a publication artist */
      publicityArtist?: boolean;
      /** @description Whether this person is a part of CBS digital staff */
      cbsDigitalStaff?: boolean;
      /** @description Whether this person is a part of ILM production staff */
      ilmProductionStaff?: boolean;
      /** @description Whether this person is a special features artist */
      specialFeaturesStaff?: boolean;
      /** @description Whether this person is a story editor */
      storyEditor?: boolean;
      /** @description Whether this person is a studio executive */
      studioExecutive?: boolean;
      /** @description Whether this person is from stunt department */
      stuntDepartment?: boolean;
      /** @description Whether this person is from transportation department */
      transportationDepartment?: boolean;
      /** @description Whether this person is video game production staff */
      videoGameProductionStaff?: boolean;
      /** @description Whether this person is a writer */
      writer?: boolean;
    };
    /** @description Full staff, returned when queried using UID (V2) */
    StaffV2Full: {
      /** @description Staff unique ID */
      uid: string;
      /** @description Staff name */
      name: string;
      /** @description Staff birth name */
      birthName?: string;
      gender?: components["schemas"]["Gender"];
      /**
       * Format: date
       * @description Date the staff was born
       */
      dateOfBirth?: string;
      /** @description Place the staff was born */
      placeOfBirth?: string;
      /**
       * Format: date
       * @description Date the staff died
       */
      dateOfDeath?: string;
      /** @description Place the staff died */
      placeOfDeath?: string;
      /** @description Whether this person if from art department */
      artDepartment?: boolean;
      /** @description Whether this person is an art director */
      artDirector?: boolean;
      /** @description Whether this person is a production designer */
      productionDesigner?: boolean;
      /** @description Whether this person is from camera and electrical department */
      cameraAndElectricalDepartment?: boolean;
      /** @description Whether this person is a cinematographer */
      cinematographer?: boolean;
      /** @description Whether this person is from casting department */
      castingDepartment?: boolean;
      /** @description Whether this person is from costume department */
      costumeDepartment?: boolean;
      /** @description Whether this person is a custume designer */
      costumeDesigner?: boolean;
      /** @description Whether this person is a director */
      director?: boolean;
      /** @description Whether this person is an assistant or second unit director director */
      assistantOrSecondUnitDirector?: boolean;
      /** @description Whether this person is an exhibit and attraction staff */
      exhibitAndAttractionStaff?: boolean;
      /** @description Whether this person is a film editor */
      filmEditor?: boolean;
      /** @description Whether this person is a part of Filmation production staff */
      filmationProductionStaff?: boolean;
      /** @description Whether this person is a linguist */
      linguist?: boolean;
      /** @description Whether this person is a location staff */
      locationStaff?: boolean;
      /** @description Whether this person is a make-up staff */
      makeupStaff?: boolean;
      /** @description Whether this person is a merchandise staff */
      merchandiseStaff?: boolean;
      /** @description Whether this person is from music department */
      musicDepartment?: boolean;
      /** @description Whether this person is a composer */
      composer?: boolean;
      /** @description Whether this person is a personal assistant */
      personalAssistant?: boolean;
      /** @description Whether this person is a producer */
      producer?: boolean;
      /** @description Whether this person is a production associate */
      productionAssociate?: boolean;
      /** @description Whether this person is a production staff */
      productionStaff?: boolean;
      /** @description Whether this person is a publication staff */
      publicationStaff?: boolean;
      /** @description Whether this person is a science consultant */
      scienceConsultant?: boolean;
      /** @description Whether this person is from sound department */
      soundDepartment?: boolean;
      /** @description Whether this person is a special and visual effects staff */
      specialAndVisualEffectsStaff?: boolean;
      /** @description Whether this person is an author */
      author?: boolean;
      /** @description Whether this person is an audio author */
      audioAuthor?: boolean;
      /** @description Whether this person is a calendar artist */
      calendarArtist?: boolean;
      /** @description Whether this person is a comic artist */
      comicArtist?: boolean;
      /** @description Whether this person is a comic author */
      comicAuthor?: boolean;
      /** @description Whether this person is a comic color artist */
      comicColorArtist?: boolean;
      /** @description Whether this person is a comic cover artist */
      comicCoverArtist?: boolean;
      /** @description Whether this person is a comic interior artist */
      comicInteriorArtist?: boolean;
      /** @description Whether this person is a comic ink artist */
      comicInkArtist?: boolean;
      /** @description Whether this person is a comic pencil artist */
      comicPencilArtist?: boolean;
      /** @description Whether this person is a comic letter artist */
      comicLetterArtist?: boolean;
      /** @description Whether this person is a comic strip artist */
      comicStripArtist?: boolean;
      /** @description Whether this person is a game artist */
      gameArtist?: boolean;
      /** @description Whether this person is a game author */
      gameAuthor?: boolean;
      /** @description Whether this person is a novel artist */
      novelArtist?: boolean;
      /** @description Whether this person is a novel author */
      novelAuthor?: boolean;
      /** @description Whether this person is a reference artist */
      referenceArtist?: boolean;
      /** @description Whether this person is a reference author */
      referenceAuthor?: boolean;
      /** @description Whether this person is a publication artist */
      publicationArtist?: boolean;
      /** @description Whether this person is a publication designer */
      publicationDesigner?: boolean;
      /** @description Whether this person is a publication editor */
      publicationEditor?: boolean;
      /** @description Whether this person is a publication artist */
      publicityArtist?: boolean;
      /** @description Whether this person is a part of CBS digital staff */
      cbsDigitalStaff?: boolean;
      /** @description Whether this person is a part of ILM production staff */
      ilmProductionStaff?: boolean;
      /** @description Whether this person is a special features artist */
      specialFeaturesStaff?: boolean;
      /** @description Whether this person is a story editor */
      storyEditor?: boolean;
      /** @description Whether this person is a studio executive */
      studioExecutive?: boolean;
      /** @description Whether this person is from stunt department */
      stuntDepartment?: boolean;
      /** @description Whether this person is from transportation department */
      transportationDepartment?: boolean;
      /** @description Whether this person is video game production staff */
      videoGameProductionStaff?: boolean;
      /** @description Whether this person is a writer */
      writer?: boolean;
      /**
       * @description Episodes written by this person
       * @default [
       *       []
       *     ]
       */
      writtenEpisodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes to which this person has written teleplay
       * @default [
       *       []
       *     ]
       */
      teleplayAuthoredEpisodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes to which this person has written story
       * @default [
       *       []
       *     ]
       */
      storyAuthoredEpisodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes directed by this person
       * @default [
       *       []
       *     ]
       */
      directedEpisodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Episodes on which this person worked
       * @default [
       *       []
       *     ]
       */
      episodes: components["schemas"]["EpisodeBase"][];
      /**
       * @description Movies written by this person
       * @default [
       *       []
       *     ]
       */
      writtenMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies to which this person has written screenplay
       * @default [
       *       []
       *     ]
       */
      screenplayAuthoredMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies to which this person has written story
       * @default [
       *       []
       *     ]
       */
      storyAuthoredMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies directed by this person
       * @default [
       *       []
       *     ]
       */
      directedMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies produced by this person
       * @default [
       *       []
       *     ]
       */
      producedMovies: components["schemas"]["MovieBase"][];
      /**
       * @description Movies on which this person worked
       * @default [
       *       []
       *     ]
       */
      movies: components["schemas"]["MovieBase"][];
    };
    /** @description Response object for staff search (V2) */
    StaffV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of staff matching given criteria
       * @default [
       *       []
       *     ]
       */
      staff: components["schemas"]["StaffV2Base"][];
    };
    /** @description Response object for single staff query (V2) */
    StaffV2FullResponse: {
      staff?: components["schemas"]["StaffV2Full"];
    };
    /** @description Header technology, embedded in other objects */
    TechnologyHeader: {
      /** @description Technology unique ID */
      uid: string;
      /** @description Technology name */
      name: string;
    };
    /** @description Base technology, returned in search results */
    TechnologyBase: {
      /** @description Technology unique ID */
      uid: string;
      /** @description Technology name */
      name: string;
      /** @description Whether it's a Borg technology */
      borgTechnology?: boolean;
      /** @description Whether it's a Borg component */
      borgComponent?: boolean;
      /** @description Whether it's a communications technology */
      communicationsTechnology?: boolean;
      /** @description Whether it's a computer technology */
      computerTechnology?: boolean;
      /** @description Whether it's a technology related to computer programming */
      computerProgramming?: boolean;
      /** @description Whether it's a subroutine */
      subroutine?: boolean;
      /** @description Whether it's a database */
      database?: boolean;
      /** @description Whether it's a energy technology */
      energyTechnology?: boolean;
      /** @description Whether it's a fictional technology */
      fictionalTechnology?: boolean;
      /** @description Whether it's a holographic technology */
      holographicTechnology?: boolean;
      /** @description Whether it's a identification technology */
      identificationTechnology?: boolean;
      /** @description Whether it's a life support technology */
      lifeSupportTechnology?: boolean;
      /** @description Whether it's a sensor technology */
      sensorTechnology?: boolean;
      /** @description Whether it's a shield technology */
      shieldTechnology?: boolean;
      /** @description Whether it's a tool */
      tool?: boolean;
      /** @description Whether it's a culinary tool */
      culinaryTool?: boolean;
      /** @description Whether it's a engineering tool */
      engineeringTool?: boolean;
      /** @description Whether it's a household tool */
      householdTool?: boolean;
      /** @description Whether it's a medical equipment */
      medicalEquipment?: boolean;
      /** @description Whether it's a transporter technology */
      transporterTechnology?: boolean;
    };
    /** @description Full technology, returned when queried using UID */
    TechnologyFull: {
      /** @description Technology unique ID */
      uid: string;
      /** @description Technology name */
      name: string;
      /** @description Whether it's a Borg technology */
      borgTechnology?: boolean;
      /** @description Whether it's a Borg component */
      borgComponent?: boolean;
      /** @description Whether it's a communications technology */
      communicationsTechnology?: boolean;
      /** @description Whether it's a computer technology */
      computerTechnology?: boolean;
      /** @description Whether it's a technology related to computer programming */
      computerProgramming?: boolean;
      /** @description Whether it's a subroutine */
      subroutine?: boolean;
      /** @description Whether it's a database */
      database?: boolean;
      /** @description Whether it's a energy technology */
      energyTechnology?: boolean;
      /** @description Whether it's a fictional technology */
      fictionalTechnology?: boolean;
      /** @description Whether it's a holographic technology */
      holographicTechnology?: boolean;
      /** @description Whether it's a identification technology */
      identificationTechnology?: boolean;
      /** @description Whether it's a life support technology */
      lifeSupportTechnology?: boolean;
      /** @description Whether it's a sensor technology */
      sensorTechnology?: boolean;
      /** @description Whether it's a shield technology */
      shieldTechnology?: boolean;
      /** @description Whether it's a tool */
      tool?: boolean;
      /** @description Whether it's a culinary tool */
      culinaryTool?: boolean;
      /** @description Whether it's a engineering tool */
      engineeringTool?: boolean;
      /** @description Whether it's a household tool */
      householdTool?: boolean;
      /** @description Whether it's a medical equipment */
      medicalEquipment?: boolean;
      /** @description Whether it's a transporter technology */
      transporterTechnology?: boolean;
    };
    /** @description Response object for technology search */
    TechnologyBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of technology matching given criteria
       * @default [
       *       []
       *     ]
       */
      technology: components["schemas"]["TechnologyBase"][];
    };
    /** @description Response object for single technology query */
    TechnologyFullResponse: {
      technology?: components["schemas"]["TechnologyFull"];
    };
    /** @description Animal search criteria */
    TechnologyV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Technology name */
      name?: string;
      /** @description Whether it should be a Borg technology */
      borgTechnology?: boolean;
      /** @description Whether it should be a Borg component */
      borgComponent?: boolean;
      /** @description Whether it should be a communications technology */
      communicationsTechnology?: boolean;
      /** @description Whether it should be a computer technology */
      computerTechnology?: boolean;
      /** @description Whether it should be a technology related to computer programming */
      computerProgramming?: boolean;
      /** @description Whether it should be a subroutine */
      subroutine?: boolean;
      /** @description Whether it should be a database */
      database?: boolean;
      /** @description Whether it should be a energy technology */
      energyTechnology?: boolean;
      /** @description Whether it should be a fictional technology */
      fictionalTechnology?: boolean;
      /** @description Whether it should be a holographic technology */
      holographicTechnology?: boolean;
      /** @description Whether it should be a identification technology */
      identificationTechnology?: boolean;
      /** @description Whether it should be a life support technology */
      lifeSupportTechnology?: boolean;
      /** @description Whether it should be a sensor technology */
      sensorTechnology?: boolean;
      /** @description Whether it should be a shield technology */
      shieldTechnology?: boolean;
      /** @description Whether it should be a security technology */
      securityTechnology?: boolean;
      /** @description Whether it should be a propulsion technology */
      propulsionTechnology?: boolean;
      /** @description Whether it should be a spacecraft component */
      spacecraftComponent?: boolean;
      /** @description Whether it should be a warp technology */
      warpTechnology?: boolean;
      /** @description Whether it should be a transwarp technology */
      transwarpTechnology?: boolean;
      /** @description Whether it should be a time travel technology */
      timeTravelTechnology?: boolean;
      /** @description Whether it should be a military technology */
      militaryTechnology?: boolean;
      /** @description Whether it should be a victual technology */
      victualTechnology?: boolean;
      /** @description Whether it should be a tool */
      tool?: boolean;
      /** @description Whether it should be a culinary tool */
      culinaryTool?: boolean;
      /** @description Whether it should be a engineering tool */
      engineeringTool?: boolean;
      /** @description Whether it should be a household tool */
      householdTool?: boolean;
      /** @description Whether it should be a medical equipment */
      medicalEquipment?: boolean;
      /** @description Whether it's a transporter technology */
      transporterTechnology?: boolean;
      /** @description Whether it's a transportation technology */
      transportationTechnology?: boolean;
      /** @description Whether it's a weapon component */
      weaponComponent?: boolean;
      /** @description Whether it's an artificial lifeform component */
      artificialLifeformComponent?: boolean;
    };
    /** @description Base technology, returned in search results (V2) */
    TechnologyV2Base: {
      /** @description Technology unique ID */
      uid: string;
      /** @description Technology name */
      name: string;
      /** @description Whether it's a Borg technology */
      borgTechnology?: boolean;
      /** @description Whether it's a Borg component */
      borgComponent?: boolean;
      /** @description Whether it's a communications technology */
      communicationsTechnology?: boolean;
      /** @description Whether it's a computer technology */
      computerTechnology?: boolean;
      /** @description Whether it's a technology related to computer programming */
      computerProgramming?: boolean;
      /** @description Whether it's a subroutine */
      subroutine?: boolean;
      /** @description Whether it's a database */
      database?: boolean;
      /** @description Whether it's a energy technology */
      energyTechnology?: boolean;
      /** @description Whether it's a fictional technology */
      fictionalTechnology?: boolean;
      /** @description Whether it's a holographic technology */
      holographicTechnology?: boolean;
      /** @description Whether it's a identification technology */
      identificationTechnology?: boolean;
      /** @description Whether it's a life support technology */
      lifeSupportTechnology?: boolean;
      /** @description Whether it's a sensor technology */
      sensorTechnology?: boolean;
      /** @description Whether it's a shield technology */
      shieldTechnology?: boolean;
      /** @description Whether it's a security technology */
      securityTechnology?: boolean;
      /** @description Whether it's a propulsion technology */
      propulsionTechnology?: boolean;
      /** @description Whether it's a spacecraft component */
      spacecraftComponent?: boolean;
      /** @description Whether it's a warp technology */
      warpTechnology?: boolean;
      /** @description Whether it's a transwarp technology */
      transwarpTechnology?: boolean;
      /** @description Whether it's a time travel technology */
      timeTravelTechnology?: boolean;
      /** @description Whether it's a military technology */
      militaryTechnology?: boolean;
      /** @description Whether it's a victual technology */
      victualTechnology?: boolean;
      /** @description Whether it's a tool */
      tool?: boolean;
      /** @description Whether it's a culinary tool */
      culinaryTool?: boolean;
      /** @description Whether it's a engineering tool */
      engineeringTool?: boolean;
      /** @description Whether it's a household tool */
      householdTool?: boolean;
      /** @description Whether it's a medical equipment */
      medicalEquipment?: boolean;
      /** @description Whether it's a transporter technology */
      transporterTechnology?: boolean;
      /** @description Whether it's a transportation technology */
      transportationTechnology?: boolean;
      /** @description Whether it's a weapon component */
      weaponComponent?: boolean;
      /** @description Whether it's an artificial lifeform component */
      artificialLifeformComponent?: boolean;
    };
    /** @description Full technology, returned when queried using UID (V2) */
    TechnologyV2Full: {
      /** @description Technology unique ID */
      uid: string;
      /** @description Technology name */
      name: string;
      /** @description Whether it's a Borg technology */
      borgTechnology?: boolean;
      /** @description Whether it's a Borg component */
      borgComponent?: boolean;
      /** @description Whether it's a communications technology */
      communicationsTechnology?: boolean;
      /** @description Whether it's a computer technology */
      computerTechnology?: boolean;
      /** @description Whether it's a technology related to computer programming */
      computerProgramming?: boolean;
      /** @description Whether it's a subroutine */
      subroutine?: boolean;
      /** @description Whether it's a database */
      database?: boolean;
      /** @description Whether it's a energy technology */
      energyTechnology?: boolean;
      /** @description Whether it's a fictional technology */
      fictionalTechnology?: boolean;
      /** @description Whether it's a holographic technology */
      holographicTechnology?: boolean;
      /** @description Whether it's a identification technology */
      identificationTechnology?: boolean;
      /** @description Whether it's a life support technology */
      lifeSupportTechnology?: boolean;
      /** @description Whether it's a sensor technology */
      sensorTechnology?: boolean;
      /** @description Whether it's a shield technology */
      shieldTechnology?: boolean;
      /** @description Whether it's a security technology */
      securityTechnology?: boolean;
      /** @description Whether it's a propulsion technology */
      propulsionTechnology?: boolean;
      /** @description Whether it's a spacecraft component */
      spacecraftComponent?: boolean;
      /** @description Whether it's a warp technology */
      warpTechnology?: boolean;
      /** @description Whether it's a transwarp technology */
      transwarpTechnology?: boolean;
      /** @description Whether it's a time travel technology */
      timeTravelTechnology?: boolean;
      /** @description Whether it's a military technology */
      militaryTechnology?: boolean;
      /** @description Whether it's a victual technology */
      victualTechnology?: boolean;
      /** @description Whether it's a tool */
      tool?: boolean;
      /** @description Whether it's a culinary tool */
      culinaryTool?: boolean;
      /** @description Whether it's a engineering tool */
      engineeringTool?: boolean;
      /** @description Whether it's a household tool */
      householdTool?: boolean;
      /** @description Whether it's a medical equipment */
      medicalEquipment?: boolean;
      /** @description Whether it's a transporter technology */
      transporterTechnology?: boolean;
      /** @description Whether it's a transportation technology */
      transportationTechnology?: boolean;
      /** @description Whether it's a weapon component */
      weaponComponent?: boolean;
      /** @description Whether it's an artificial lifeform component */
      artificialLifeformComponent?: boolean;
    };
    /** @description Response object for technology search (V2) */
    TechnologyV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of technology matching given criteria
       * @default [
       *       []
       *     ]
       */
      technology: components["schemas"]["TechnologyV2Base"][];
    };
    /** @description Response object for single technology query (V2) */
    TechnologyV2FullResponse: {
      technology?: components["schemas"]["TechnologyV2Full"];
    };
    /** @description Header title, embedded in other objects */
    TitleHeader: {
      /** @description Title unique ID */
      uid: string;
      /** @description Title name */
      name: string;
    };
    /** @description Base title, returned in search results */
    TitleBase: {
      /** @description Title unique ID */
      uid: string;
      /** @description Title name */
      name: string;
      /** @description Whether it's a military rank */
      militaryRank?: boolean;
      /** @description Whether it's a fleet rank */
      fleetRank?: boolean;
      /** @description Whether it's a religious title */
      religiousTitle?: boolean;
      /** @description Whether it's a position */
      position?: boolean;
      /** @description Whether this title is from mirror universe */
      mirror?: boolean;
    };
    /** @description Full title, returned when queried using UID */
    TitleFull: {
      /** @description Title unique ID */
      uid: string;
      /** @description Title name */
      name: string;
      /** @description Whether it's a military rank */
      militaryRank?: boolean;
      /** @description Whether it's a fleet rank */
      fleetRank?: boolean;
      /** @description Whether it's a religious title */
      religiousTitle?: boolean;
      /** @description Whether it's a position */
      position?: boolean;
      /** @description Whether this title is from mirror universe */
      mirror?: boolean;
      /**
       * @description Characters that holds this title
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for titles search */
    TitleBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of titles matching given criteria
       * @default [
       *       []
       *     ]
       */
      titles: components["schemas"]["TitleBase"][];
    };
    /** @description Response object for single title query */
    TitleFullResponse: {
      title?: components["schemas"]["TitleFull"];
    };
    /** @description Animal search criteria */
    TitleV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Title name */
      name?: string;
      /** @description Whether it should be a military rank */
      militaryRank?: boolean;
      /** @description Whether it should be a fleet rank */
      fleetRank?: boolean;
      /** @description Whether it should be a religious title */
      religiousTitle?: boolean;
      /** @description Whether it should be a education title */
      educationTitle?: boolean;
      /** @description Whether this title should be from mirror universe */
      mirror?: boolean;
    };
    /** @description Base title, returned in search results (V2) */
    TitleV2Base: {
      /** @description Title unique ID */
      uid: string;
      /** @description Title name */
      name: string;
      /** @description Whether it's a military rank */
      militaryRank?: boolean;
      /** @description Whether it's a fleet rank */
      fleetRank?: boolean;
      /** @description Whether it's a religious title */
      religiousTitle?: boolean;
      /** @description Whether it's a education title */
      educationTitle?: boolean;
      /** @description Whether this title is from mirror universe */
      mirror?: boolean;
    };
    /** @description Full title, returned when queried using UID (V2) */
    TitleV2Full: {
      /** @description Title unique ID */
      uid: string;
      /** @description Title name */
      name: string;
      /** @description Whether it's a military rank */
      militaryRank?: boolean;
      /** @description Whether it's a fleet rank */
      fleetRank?: boolean;
      /** @description Whether it's a religious title */
      religiousTitle?: boolean;
      /** @description Whether it's a education title */
      educationTitle?: boolean;
      /** @description Whether this title is from mirror universe */
      mirror?: boolean;
      /**
       * @description Characters that holds this title
       * @default [
       *       []
       *     ]
       */
      characters: components["schemas"]["CharacterBase"][];
    };
    /** @description Response object for titles search (V2) */
    TitleV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of titles matching given criteria
       * @default [
       *       []
       *     ]
       */
      titles: components["schemas"]["TitleV2Base"][];
    };
    /** @description Response object for single title query (V2) */
    TitleV2FullResponse: {
      title?: components["schemas"]["TitleV2Full"];
    };
    /** @description Animal search criteria */
    TradingCardSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Trading card name */
      name?: string;
      /** @description UID of trading card deck */
      tradingCardDeckUid?: string;
      /** @description UID of trading card set */
      tradingCardSetUid?: string;
    };
    /** @description Header trading card, embedded in other objects */
    TradingCardHeader: {
      /** @description Trading card unique ID */
      uid: string;
      /** @description Trading card name */
      name: string;
    };
    /** @description Base trading card, returned in search results */
    TradingCardBase: {
      /** @description Trading card unique ID */
      uid: string;
      /** @description Trading card name */
      name: string;
      /** @description Trading card number */
      number?: string;
      /** @description Release year, if set was releases over multiple years */
      releaseYear?: number;
      /** @description Production run, if different from trading card set production run */
      productionRun?: number;
      tradingCardSet?: components["schemas"]["TradingCardSetHeader"];
      tradingCardDeck?: components["schemas"]["TradingCardDeckHeader"];
    };
    /** @description Full trading card, returned when queried using UID */
    TradingCardFull: {
      /** @description Trading card unique ID */
      uid: string;
      /** @description Trading card name */
      name: string;
      tradingCardSet?: components["schemas"]["TradingCardSetBase"];
      tradingCardDeck?: components["schemas"]["TradingCardDeckBase"];
      /** @description Trading card number */
      number?: string;
      /** @description Release year, if set was releases over multiple years */
      releaseYear?: number;
      /** @description Production run, if different from trading card set production run */
      productionRun?: number;
    };
    /** @description Response object for trading cards search */
    TradingCardBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of trading cards matching given criteria
       * @default [
       *       []
       *     ]
       */
      tradingCards: components["schemas"]["TradingCardBase"][];
    };
    /** @description Response object for single trading card query */
    TradingCardFullResponse: {
      tradingCard?: components["schemas"]["TradingCardFull"];
    };
    /** @description Trading card deck search criteria */
    TradingCardDeckSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Trading card deck name */
      name?: string;
      /** @description UID of trading card set */
      tradingCardSetUid?: string;
    };
    /** @description Header trading card deck, embedded in other objects */
    TradingCardDeckHeader: {
      /** @description Trading card deck unique ID */
      uid: string;
      /** @description Trading card deck name */
      name: string;
    };
    /** @description Base trading card deck, returned in search results */
    TradingCardDeckBase: {
      /** @description Trading card deck unique ID */
      uid: string;
      /** @description Trading card deck name */
      name: string;
      /** @description Frequency with which this deck occur in it's set */
      frequency?: string;
      tradingCardSet?: components["schemas"]["TradingCardSetHeader"];
    };
    /** @description Full trading card deck, returned when queried using UID */
    TradingCardDeckFull: {
      /** @description Trading card deck unique ID */
      uid: string;
      /** @description Trading card deck name */
      name: string;
      /** @description Frequency with which this deck occur in it's set */
      frequency?: string;
      tradingCardSet?: components["schemas"]["TradingCardSetHeader"];
      /**
       * @description Trading cards in this deck
       * @default [
       *       []
       *     ]
       */
      tradingCards: components["schemas"]["TradingCardBase"][];
    };
    /** @description Response object for trading card decks search */
    TradingCardDeckBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of trading card decks matching given criteria
       * @default [
       *       []
       *     ]
       */
      tradingCardDecks: components["schemas"]["TradingCardDeckBase"][];
    };
    /** @description Response object for single trading card deck query */
    TradingCardDeckFullResponse: {
      tradingCardDeck?: components["schemas"]["TradingCardDeckFull"];
    };
    /** @description Trading card set search criteria */
    TradingCardSetSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Trading card set name */
      name?: string;
      /**
       * Format: int32
       * @description Starting year the trading card set was released
       */
      releaseYearFrom?: number;
      /**
       * Format: int32
       * @description Ending year the trading card set was released
       */
      releaseYearTo?: number;
      /**
       * Format: int32
       * @description Minimal number of cards per deck
       */
      cardsPerPackFrom?: number;
      /**
       * Format: int32
       * @description Minimal number of cards per deck
       */
      cardsPerPackTo?: number;
      /**
       * Format: int32
       * @description Minimal number of packs per box
       */
      packsPerBoxFrom?: number;
      /**
       * Format: int32
       * @description Minimal number of packs per box
       */
      packsPerBoxTo?: number;
      /**
       * Format: int32
       * @description Minimal number of boxes per case
       */
      boxesPerCaseFrom?: number;
      /**
       * Format: int32
       * @description Minimal number of boxes per case
       */
      boxesPerCaseTo?: number;
      /**
       * Format: int32
       * @description Minimal production run
       */
      productionRunFrom?: number;
      /**
       * Format: int32
       * @description Minimal production run
       */
      productionRunTo?: number;
      /** @description Production run unit */
      productionRunUnit?: string;
      /**
       * Format: double
       * @description Minimal card width, in inches
       */
      cardWidthFrom?: number;
      /**
       * Format: double
       * @description Minimal card width, in inches
       */
      cardWidthTo?: number;
      /**
       * Format: double
       * @description Minimal card height, in inches
       */
      cardHeightFrom?: number;
      /**
       * Format: double
       * @description Minimal card height, in inches
       */
      cardHeightTo?: number;
    };
    /** @description Header trading card set, embedded in other objects */
    TradingCardSetHeader: {
      /** @description Trading card set unique ID */
      uid: string;
      /** @description Trading card set name */
      name: string;
    };
    /** @description Base trading card set, returned in search results */
    TradingCardSetBase: {
      /** @description Trading card set unique ID */
      uid: string;
      /** @description Trading card set name */
      name: string;
      /** @description Release year */
      releaseYear?: number;
      /** @description Release month */
      releaseMonth?: number;
      /** @description Release day */
      releaseDay?: number;
      /** @description Cards per deck */
      cardsPerPack?: number;
      /** @description Packs per box */
      packsPerBox?: number;
      /** @description Boxes per case */
      boxesPerCase?: number;
      /** @description Production run */
      productionRun?: number;
      productionRunUnit?: components["schemas"]["ProductionRunUnit"];
      /**
       * Format: double
       * @description Card width, in inches
       */
      cardWidth?: number;
      /**
       * Format: double
       * @description Card height, in inches
       */
      cardHeight?: number;
    };
    /** @description Full trading card set, returned when queried using UID */
    TradingCardSetFull: {
      /** @description Trading card set unique ID */
      uid: string;
      /** @description Trading card set name */
      name: string;
      /** @description Release year */
      releaseYear?: number;
      /** @description Release month */
      releaseMonth?: number;
      /** @description Release day */
      releaseDay?: number;
      /** @description Cards per deck */
      cardsPerPack?: number;
      /** @description Packs per box */
      packsPerBox?: number;
      /** @description Boxes per case */
      boxesPerCase?: number;
      /** @description Production run */
      productionRun?: number;
      productionRunUnit?: components["schemas"]["ProductionRunUnit"];
      /**
       * Format: double
       * @description Card width, in inches
       */
      cardWidth?: number;
      /**
       * Format: double
       * @description Card height, in inches
       */
      cardHeight?: number;
      /**
       * @description Manufacturers
       * @default [
       *       []
       *     ]
       */
      manufacturers: components["schemas"]["CompanyBase"][];
      /**
       * @description Trading card decks in this set
       * @default [
       *       []
       *     ]
       */
      tradingCardDecks: components["schemas"]["TradingCardDeckBase"][];
      /**
       * @description Trading cards in this set
       * @default [
       *       []
       *     ]
       */
      tradingCards: components["schemas"]["TradingCardBase"][];
      /**
       * @description Countries of origin
       * @default [
       *       []
       *     ]
       */
      countriesOfOrigin: components["schemas"]["Country"][];
    };
    /** @description Response object for trading card sets search */
    TradingCardSetBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of trading card sets matching given criteria
       * @default [
       *       []
       *     ]
       */
      tradingCardSets: components["schemas"]["TradingCardSetBase"][];
    };
    /** @description Response object for single trading card set query */
    TradingCardSetFullResponse: {
      tradingCardSet?: components["schemas"]["TradingCardSetFull"];
    };
    /** @description Animal search criteria */
    VideoGameSearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Video game title */
      title?: string;
      /**
       * Format: date
       * @description Minimal date the video game was first released
       */
      releaseDateFrom?: string;
      /**
       * Format: date
       * @description Minimal date the video game was first released
       */
      releaseDateTo?: string;
    };
    /** @description Header video game, embedded in other objects */
    VideoGameHeader: {
      /** @description Video game unique ID */
      uid: string;
      /** @description Video game title */
      title: string;
    };
    /** @description Base video game, returned in search results */
    VideoGameBase: {
      /** @description Video game unique ID */
      uid: string;
      /** @description Video game title */
      title: string;
      /**
       * Format: date
       * @description Release date
       */
      releaseDate?: string;
      /**
       * Format: float
       * @description Starting stardate of video game story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of video game story
       */
      stardateTo?: number;
      /** @description Starting year of video game story */
      yearFrom?: number;
      /** @description Ending year of video game story */
      yearTo?: number;
      /** @description System requirements */
      systemRequirements?: string;
    };
    /** @description Full video game, returned when queried using UID */
    VideoGameFull: {
      /** @description Video game unique ID */
      uid: string;
      /** @description Video game title */
      title: string;
      /**
       * Format: date
       * @description Release date
       */
      releaseDate?: string;
      /**
       * Format: float
       * @description Starting stardate of video game story
       */
      stardateFrom?: number;
      /**
       * Format: float
       * @description Ending stardate of video game story
       */
      stardateTo?: number;
      /** @description Starting year of video game story */
      yearFrom?: number;
      /** @description Ending year of video game story */
      yearTo?: number;
      /** @description System requirements */
      systemRequirements?: string;
      /**
       * @description Publishers
       * @default [
       *       []
       *     ]
       */
      publishers: components["schemas"]["CompanyBase"][];
      /**
       * @description Developers
       * @default [
       *       []
       *     ]
       */
      developers: components["schemas"]["CompanyBase"][];
      /**
       * @description Platforms
       * @default [
       *       []
       *     ]
       */
      platforms: components["schemas"]["Platform"][];
      /**
       * @description Genres
       * @default [
       *       []
       *     ]
       */
      genres: components["schemas"]["Genre"][];
      /**
       * @description Ratings
       * @default [
       *       []
       *     ]
       */
      ratings: components["schemas"]["ContentRating"][];
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
    };
    /** @description Response object for video games search */
    VideoGameBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of video games matching given criteria
       * @default [
       *       []
       *     ]
       */
      videoGames: components["schemas"]["VideoGameBase"][];
    };
    /** @description Response object for single video game query */
    VideoGameFullResponse: {
      videoGame?: components["schemas"]["VideoGameFull"];
    };
    /** @description Header video release, embedded in other objects */
    VideoReleaseHeader: {
      /** @description Video release unique ID */
      uid: string;
      /** @description Video release title */
      title: string;
    };
    /** @description Base video release, returned in search results */
    VideoReleaseBase: {
      /** @description Video release unique ID */
      uid: string;
      /** @description Video release title */
      title: string;
      series?: components["schemas"]["SeriesHeader"];
      season?: components["schemas"]["SeasonHeader"];
      format?: components["schemas"]["VideoReleaseFormat"];
      /** @description Number of episodes */
      numberOfEpisodes?: number;
      /** @description Number of feature-length episodes */
      numberOfFeatureLengthEpisodes?: number;
      /** @description Number of data carriers (like DVD, VCD, VHS etc.) */
      numberOfDataCarriers?: number;
      /** @description Run time, in minutes */
      runTime?: number;
      /** @description Starting year of video release story */
      yearFrom?: number;
      /** @description Ending year of video release story */
      yearTo?: number;
      /**
       * Format: date
       * @description Region free release date
       */
      regionFreeReleaseDate?: string;
      /**
       * Format: date
       * @description Region 1/A release date
       */
      region1AReleaseDate?: string;
      /**
       * Format: date
       * @description Region 1 slimline release date
       */
      region1SlimlineReleaseDate?: string;
      /**
       * Format: date
       * @description Region 2/B release date
       */
      region2BReleaseDate?: string;
      /**
       * Format: date
       * @description Region 2 slimline release date
       */
      region2SlimlineReleaseDate?: string;
      /**
       * Format: date
       * @description Region 4 release date
       */
      region4AReleaseDate?: string;
      /**
       * Format: date
       * @description Region 4 slimline release date
       */
      region4SlimlineReleaseDate?: string;
      /** @description Whether this video has been release on Amazon.com */
      amazonDigitalRelease?: boolean;
      /** @description Whether this video has been release on Dailymotion */
      dailymotionDigitalRelease?: boolean;
      /** @description Whether this video has been release on Google Play */
      googlePlayDigitalRelease?: boolean;
      /** @description Whether this video has been release on iTunes */
      itunesDigitalRelease?: boolean;
      /** @description Whether this video has been release on UltraViolet */
      ultraVioletDigitalRelease?: boolean;
      /** @description Whether this video has been release on Vimeo */
      vimeoDigitalRelease?: boolean;
      /** @description Whether this video has been release on VUDU */
      vuduDigitalRelease?: boolean;
      /** @description Whether this video has been release on Xbox SmartGlass */
      xboxSmartGlassDigitalRelease?: boolean;
      /** @description Whether this video has been release on YouTube */
      youTubeDigitalRelease?: boolean;
      /** @description Whether this video has been release on Netflix */
      netflixDigitalRelease?: boolean;
    };
    /**
     * @description Video release format
     * @enum {string}
     */
    VideoReleaseFormat:
      | "SUPER_8"
      | "BETAMAX"
      | "VHS"
      | "CED"
      | "LD"
      | "VHD"
      | "VCD"
      | "VIDEO_8"
      | "DVD"
      | "UMD"
      | "HD_DVD"
      | "BLU_RAY"
      | "BLU_RAY_4K_UHD"
      | "DIGITAL_FORMAT";
    /** @description Full video release, returned when queried using UID */
    VideoReleaseFull: {
      /** @description Video release unique ID */
      uid: string;
      /** @description Video release title */
      title: string;
      series?: components["schemas"]["SeriesBase"];
      season?: components["schemas"]["SeasonBase"];
      format?: components["schemas"]["VideoReleaseFormat"];
      /** @description Number of episodes */
      numberOfEpisodes?: number;
      /** @description Number of feature-length episodes */
      numberOfFeatureLengthEpisodes?: number;
      /** @description Number of data carriers (like DVD, VCD, VHS etc.) */
      numberOfDataCarriers?: number;
      /** @description Run time, in minutes */
      runTime?: number;
      /** @description Starting year of video release story */
      yearFrom?: number;
      /** @description Ending year of video release story */
      yearTo?: number;
      /**
       * Format: date
       * @description Region free release date
       */
      regionFreeReleaseDate?: string;
      /**
       * Format: date
       * @description Region 1/A release date
       */
      region1AReleaseDate?: string;
      /**
       * Format: date
       * @description Region 1 slimline release date
       */
      region1SlimlineReleaseDate?: string;
      /**
       * Format: date
       * @description Region 2/B release date
       */
      region2BReleaseDate?: string;
      /**
       * Format: date
       * @description Region 2 slimline release date
       */
      region2SlimlineReleaseDate?: string;
      /**
       * Format: date
       * @description Region 4 release date
       */
      region4AReleaseDate?: string;
      /**
       * Format: date
       * @description Region 4 slimline release date
       */
      region4SlimlineReleaseDate?: string;
      /** @description Whether this video has been release on Amazon.com */
      amazonDigitalRelease?: boolean;
      /** @description Whether this video has been release on Dailymotion */
      dailymotionDigitalRelease?: boolean;
      /** @description Whether this video has been release on Google Play */
      googlePlayDigitalRelease?: boolean;
      /** @description Whether this video has been release on iTunes */
      itunesDigitalRelease?: boolean;
      /** @description Whether this video has been release on UltraViolet */
      ultraVioletDigitalRelease?: boolean;
      /** @description Whether this video has been release on Vimeo */
      vimeoDigitalRelease?: boolean;
      /** @description Whether this video has been release on VUDU */
      vuduDigitalRelease?: boolean;
      /** @description Whether this video has been release on Xbox SmartGlass */
      xboxSmartGlassDigitalRelease?: boolean;
      /** @description Whether this video has been release on YouTube */
      youTubeDigitalRelease?: boolean;
      /** @description Whether this video has been release on Netflix */
      netflixDigitalRelease?: boolean;
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
      /**
       * @description Ratings
       * @default [
       *       []
       *     ]
       */
      ratings: components["schemas"]["ContentRating"][];
      /**
       * @description Languages of audio track
       * @default [
       *       []
       *     ]
       */
      languages: components["schemas"]["ContentLanguage"][];
      /**
       * @description Languages of subtitles
       * @default [
       *       []
       *     ]
       */
      languagesSubtitles: components["schemas"]["ContentLanguage"][];
      /**
       * @description Languages that are available with dubbing
       * @default [
       *       []
       *     ]
       */
      languagesDubbed: components["schemas"]["ContentLanguage"][];
    };
    /** @description Response object for video releases search */
    VideoReleaseBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of video releases matching given criteria
       * @default [
       *       []
       *     ]
       */
      videoReleases: components["schemas"]["VideoReleaseBase"][];
    };
    /** @description Response object for single video release query */
    VideoReleaseFullResponse: {
      videoRelease?: components["schemas"]["VideoReleaseFull"];
    };
    /** @description Video release search criteria (V2) */
    VideoReleaseV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Video release title */
      title?: string;
      /**
       * Format: int32
       * @description Starting year of video release story
       */
      yearFrom?: number;
      /**
       * Format: int32
       * @description Ending year of video release story
       */
      yearTo?: number;
      /**
       * Format: int32
       * @description Minimal run time, in minutes
       */
      runTimeFrom?: number;
      /**
       * Format: int32
       * @description Minimal run time, in minutes
       */
      runTimeTo?: number;
      /** @description Whether it should be a documentary */
      documentary?: boolean;
      /** @description Whether it should contain special features */
      specialFeatures?: boolean;
    };
    /** @description Base video release, returned in search results (V2) */
    VideoReleaseV2Base: {
      /** @description Video release unique ID */
      uid: string;
      /** @description Video release title */
      title: string;
      format?: components["schemas"]["VideoReleaseFormat"];
      /** @description Number of episodes */
      numberOfEpisodes?: number;
      /** @description Number of feature-length episodes */
      numberOfFeatureLengthEpisodes?: number;
      /** @description Number of data carriers (like DVD, VCD, VHS etc.) */
      numberOfDataCarriers?: number;
      /** @description Run time, in minutes */
      runTime?: number;
      /** @description Starting year of video release story */
      yearFrom?: number;
      /** @description Ending year of video release story */
      yearTo?: number;
      /**
       * Format: date
       * @description Region free release date
       */
      regionFreeReleaseDate?: string;
      /**
       * Format: date
       * @description Region 1/A release date
       */
      region1AReleaseDate?: string;
      /**
       * Format: date
       * @description Region 1 slimline release date
       */
      region1SlimlineReleaseDate?: string;
      /**
       * Format: date
       * @description Region 2/B release date
       */
      region2BReleaseDate?: string;
      /**
       * Format: date
       * @description Region 2 slimline release date
       */
      region2SlimlineReleaseDate?: string;
      /**
       * Format: date
       * @description Region 4 release date
       */
      region4AReleaseDate?: string;
      /**
       * Format: date
       * @description Region 4 slimline release date
       */
      region4SlimlineReleaseDate?: string;
      /** @description Whether this video has been release on Amazon.com */
      amazonDigitalRelease?: boolean;
      /** @description Whether this video has been release on Dailymotion */
      dailymotionDigitalRelease?: boolean;
      /** @description Whether this video has been release on Google Play */
      googlePlayDigitalRelease?: boolean;
      /** @description Whether this video has been release on iTunes */
      itunesDigitalRelease?: boolean;
      /** @description Whether this video has been release on UltraViolet */
      ultraVioletDigitalRelease?: boolean;
      /** @description Whether this video has been release on Vimeo */
      vimeoDigitalRelease?: boolean;
      /** @description Whether this video has been release on VUDU */
      vuduDigitalRelease?: boolean;
      /** @description Whether this video has been release on Xbox SmartGlass */
      xboxSmartGlassDigitalRelease?: boolean;
      /** @description Whether this video has been release on YouTube */
      youTubeDigitalRelease?: boolean;
      /** @description Whether this video has been release on Netflix */
      netflixDigitalRelease?: boolean;
      /** @description Whether this is a documentary */
      documentary?: boolean;
      /** @description Whether this contains special features */
      specialFeatures?: boolean;
    };
    /** @description Full video release, returned when queried using UID */
    VideoReleaseV2Full: {
      /** @description Video release unique ID */
      uid: string;
      /** @description Video release title */
      title: string;
      /**
       * @description Series with which this video release is associated, so that it contains part of all of it
       * @default [
       *       []
       *     ]
       */
      series: components["schemas"]["SeriesBase"][];
      /**
       * @description Seasons with which this video release is associated, so that it contains part of all of it
       * @default [
       *       []
       *     ]
       */
      seasons: components["schemas"]["SeasonBase"][];
      /**
       * @description Movies with which this video release is associated, so that it contains the full movie
       * @default [
       *       []
       *     ]
       */
      movies: components["schemas"]["MovieBase"][];
      format?: components["schemas"]["VideoReleaseFormat"];
      /** @description Number of episodes */
      numberOfEpisodes?: number;
      /** @description Number of feature-length episodes */
      numberOfFeatureLengthEpisodes?: number;
      /** @description Number of data carriers (like DVD, VCD, VHS etc.) */
      numberOfDataCarriers?: number;
      /** @description Run time, in minutes */
      runTime?: number;
      /** @description Starting year of video release story */
      yearFrom?: number;
      /** @description Ending year of video release story */
      yearTo?: number;
      /**
       * Format: date
       * @description Region free release date
       */
      regionFreeReleaseDate?: string;
      /**
       * Format: date
       * @description Region 1/A release date
       */
      region1AReleaseDate?: string;
      /**
       * Format: date
       * @description Region 1 slimline release date
       */
      region1SlimlineReleaseDate?: string;
      /**
       * Format: date
       * @description Region 2/B release date
       */
      region2BReleaseDate?: string;
      /**
       * Format: date
       * @description Region 2 slimline release date
       */
      region2SlimlineReleaseDate?: string;
      /**
       * Format: date
       * @description Region 4 release date
       */
      region4AReleaseDate?: string;
      /**
       * Format: date
       * @description Region 4 slimline release date
       */
      region4SlimlineReleaseDate?: string;
      /** @description Whether this video has been release on Amazon.com */
      amazonDigitalRelease?: boolean;
      /** @description Whether this video has been release on Dailymotion */
      dailymotionDigitalRelease?: boolean;
      /** @description Whether this video has been release on Google Play */
      googlePlayDigitalRelease?: boolean;
      /** @description Whether this video has been release on iTunes */
      itunesDigitalRelease?: boolean;
      /** @description Whether this video has been release on UltraViolet */
      ultraVioletDigitalRelease?: boolean;
      /** @description Whether this video has been release on Vimeo */
      vimeoDigitalRelease?: boolean;
      /** @description Whether this video has been release on VUDU */
      vuduDigitalRelease?: boolean;
      /** @description Whether this video has been release on Xbox SmartGlass */
      xboxSmartGlassDigitalRelease?: boolean;
      /** @description Whether this video has been release on YouTube */
      youTubeDigitalRelease?: boolean;
      /** @description Whether this video has been release on Netflix */
      netflixDigitalRelease?: boolean;
      /** @description Whether this is a documentary */
      documentary?: boolean;
      /** @description Whether this contains special features */
      specialFeatures?: boolean;
      /**
       * @description References
       * @default [
       *       []
       *     ]
       */
      references: components["schemas"]["Reference"][];
      /**
       * @description Ratings
       * @default [
       *       []
       *     ]
       */
      ratings: components["schemas"]["ContentRating"][];
      /**
       * @description Languages of audio track
       * @default [
       *       []
       *     ]
       */
      languages: components["schemas"]["ContentLanguage"][];
      /**
       * @description Languages of subtitles
       * @default [
       *       []
       *     ]
       */
      languagesSubtitles: components["schemas"]["ContentLanguage"][];
      /**
       * @description Languages that are available with dubbing
       * @default [
       *       []
       *     ]
       */
      languagesDubbed: components["schemas"]["ContentLanguage"][];
    };
    /** @description Response object for video releases search (V2) */
    VideoReleaseV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of video releases matching given criteria
       * @default [
       *       []
       *     ]
       */
      videoReleases: components["schemas"]["VideoReleaseV2Base"][];
    };
    /** @description Response object for single video release query (V2) */
    VideoReleaseV2FullResponse: {
      videoRelease?: components["schemas"]["VideoReleaseV2Full"];
    };
    /** @description Header weapon, embedded in other objects */
    WeaponHeader: {
      /** @description Weapon unique ID */
      uid: string;
      /** @description Weapon name */
      name: string;
    };
    /** @description Base weapon, returned in search results */
    WeaponBase: {
      /** @description Weapon unique ID */
      uid: string;
      /** @description Weapon name */
      name: string;
      /** @description Whether it's hand-help weapon */
      handHeldWeapon?: boolean;
      /** @description Whether it's a laser technology */
      laserTechnology?: boolean;
      /** @description Whether it's a plasma technology */
      plasmaTechnology?: boolean;
      /** @description Whether it's a photonic technology */
      photonicTechnology?: boolean;
      /** @description Whether it's a phaser technology */
      phaserTechnology?: boolean;
      /** @description Whether this weapon is from mirror universe */
      mirror?: boolean;
      /** @description Whether this weapon is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Full weapon, returned when queried using UID */
    WeaponFull: {
      /** @description Weapon unique ID */
      uid: string;
      /** @description Weapon name */
      name: string;
      /** @description Whether it's a hand-help weapon */
      handHeldWeapon?: boolean;
      /** @description Whether it's a laser technology */
      laserTechnology?: boolean;
      /** @description Whether it's a plasma technology */
      plasmaTechnology?: boolean;
      /** @description Whether it's a photonic technology */
      photonicTechnology?: boolean;
      /** @description Whether it's a phaser technology */
      phaserTechnology?: boolean;
      /** @description Whether this weapon is from mirror universe */
      mirror?: boolean;
      /** @description Whether this weapon is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Response object for weapons search */
    WeaponBaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of weapons matching given criteria
       * @default [
       *       []
       *     ]
       */
      weapons: components["schemas"]["WeaponBase"][];
    };
    /** @description Response object for single weapon query */
    WeaponFullResponse: {
      weapon?: components["schemas"]["WeaponFull"];
    };
    /** @description Animal search criteria */
    WeaponV2SearchCriteria: {
      /**
       * Format: int32
       * @description Zero-based page number
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description Page size
       */
      pageSize?: number;
      sort?: components["schemas"]["RequestSort"];
      /** @description Weapon name */
      name?: string;
      /** @description Whether it should be a hand-help weapon */
      handHeldWeapon?: boolean;
      /** @description Whether it should be a laser technology */
      laserTechnology?: boolean;
      /** @description Whether it should be a plasma technology */
      plasmaTechnology?: boolean;
      /** @description Whether it should be a photonic technology */
      photonicTechnology?: boolean;
      /** @description Whether it should be a phaser technology */
      phaserTechnology?: boolean;
      /** @description Whether it should be a directed energy weapon */
      directedEnergyWeapon?: boolean;
      /** @description Whether it should be an explosive weapon */
      explosiveWeapon?: boolean;
      /** @description Whether it should be a projectile weapon */
      projectileWeapon?: boolean;
      /** @description Whether it should be a fictional weapon */
      fictionalWeapon?: boolean;
      /** @description Whether this weapon should be from mirror universe */
      mirror?: boolean;
      /** @description Whether this weapon should be from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Base weapon, returned in search results (V2) */
    WeaponV2Base: {
      /** @description Weapon unique ID */
      uid: string;
      /** @description Weapon name */
      name: string;
      /** @description Whether it's hand-help weapon */
      handHeldWeapon?: boolean;
      /** @description Whether it's a laser technology */
      laserTechnology?: boolean;
      /** @description Whether it's a plasma technology */
      plasmaTechnology?: boolean;
      /** @description Whether it's a photonic technology */
      photonicTechnology?: boolean;
      /** @description Whether it's a phaser technology */
      phaserTechnology?: boolean;
      /** @description Whether it's a directed energy weapon */
      directedEnergyWeapon?: boolean;
      /** @description Whether it's an explosive weapon */
      explosiveWeapon?: boolean;
      /** @description Whether it's a projectile weapon */
      projectileWeapon?: boolean;
      /** @description Whether it's a fictional weapon */
      fictionalWeapon?: boolean;
      /** @description Whether this weapon is from mirror universe */
      mirror?: boolean;
      /** @description Whether this weapon is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Full weapon, returned when queried using UID (V2) */
    WeaponV2Full: {
      /** @description Weapon unique ID */
      uid: string;
      /** @description Weapon name */
      name: string;
      /** @description Whether it's a hand-help weapon */
      handHeldWeapon?: boolean;
      /** @description Whether it's a laser technology */
      laserTechnology?: boolean;
      /** @description Whether it's a plasma technology */
      plasmaTechnology?: boolean;
      /** @description Whether it's a photonic technology */
      photonicTechnology?: boolean;
      /** @description Whether it's a phaser technology */
      phaserTechnology?: boolean;
      /** @description Whether it's a directed energy weapon */
      directedEnergyWeapon?: boolean;
      /** @description Whether it's an explosive weapon */
      explosiveWeapon?: boolean;
      /** @description Whether it's a projectile weapon */
      projectileWeapon?: boolean;
      /** @description Whether it's a fictional weapon */
      fictionalWeapon?: boolean;
      /** @description Whether this weapon is from mirror universe */
      mirror?: boolean;
      /** @description Whether this weapon is from alternate reality */
      alternateReality?: boolean;
    };
    /** @description Response object for weapons search (V2) */
    WeaponV2BaseResponse: {
      page?: components["schemas"]["ResponsePage"];
      sort?: components["schemas"]["ResponseSort"];
      /**
       * @description List of weapons matching given criteria
       * @default [
       *       []
       *     ]
       */
      weapons: components["schemas"]["WeaponV2Base"][];
    };
    /** @description Response object for single weapon query (V2) */
    WeaponV2FullResponse: {
      weapon?: components["schemas"]["WeaponV2Full"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  v1GetAnimal: {
    parameters: {
      query: {
        /** @description Animal unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AnimalFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageAnimals: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AnimalBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchAnimals: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Animal name */
          name?: string;
          /** @description Whether it should be an earth animal */
          earthAnimal?: boolean;
          /** @description Whether it should be an earth insect */
          earthInsect?: boolean;
          /** @description Whether it should be an avian */
          avian?: boolean;
          /** @description Whether it should be a canine */
          canine?: boolean;
          /** @description Whether it should be a feline */
          feline?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AnimalBaseResponse"];
        };
      };
    };
  };
  v1GetAstronomicalObject: {
    parameters: {
      query: {
        /** @description Astronomical object's unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AstronomicalObjectFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageAstronomicalObjects: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AstronomicalObjectBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchAstronomicalObjects: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Astronomical object name */
          name?: string;
          /** @description Type of astronomical object */
          astronomicalObjectType?: string;
          /** @description Unique ID of astronomical object containing objects being searched */
          locationUid?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AstronomicalObjectBaseResponse"];
        };
      };
    };
  };
  v2GetAstronomicalObject: {
    parameters: {
      query: {
        /** @description Astronomical object's unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AstronomicalObjectV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageAstronomicalObjects: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AstronomicalObjectV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchAstronomicalObjects: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Astronomical object name */
          name?: string;
          /** @description Type of astronomical object */
          astronomicalObjectType?: string;
          /** @description Unique ID of astronomical object containing objects being searched */
          locationUid?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AstronomicalObjectV2BaseResponse"];
        };
      };
    };
  };
  v1GetBook: {
    parameters: {
      query: {
        /** @description Book unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageBooks: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchBooks: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Book title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the book was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the book was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of pages
           */
          numberOfPagesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of pages
           */
          numberOfPagesTo?: number;
          /**
           * Format: float
           * @description Starting stardate of book story
           */
          stardateFrom?: number;
          /**
           * Format: float
           * @description Ending stardate of book story
           */
          stardateTo?: number;
          /**
           * Format: int32
           * @description Starting year of book story
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of book story
           */
          yearTo?: number;
          /** @description Whether it should be a novel */
          novel?: boolean;
          /** @description Whether it should be a reference book */
          referenceBook?: boolean;
          /** @description Whether it should be a biography book */
          biographyBook?: boolean;
          /** @description Whether it should be a role playing book */
          rolePlayingBook?: boolean;
          /** @description Whether it should be an e-book */
          eBook?: boolean;
          /** @description Whether it should be an anthology */
          anthology?: boolean;
          /** @description Whether it should be novelization */
          novelization?: boolean;
          /** @description Whether it should be an audiobook */
          audiobook?: boolean;
          /** @description Whether it should be an audiobook, abridged */
          audiobookAbridged?: boolean;
          /**
           * Format: int32
           * @description Starting year the audiobook was published
           */
          audiobookPublishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the audiobook was published
           */
          audiobookPublishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal audiobook run time, in minutes
           */
          audiobookRunTimeFrom?: number;
          /**
           * Format: int32
           * @description Maximal audiobook run time, in minutes
           */
          audiobookRunTimeTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookBaseResponse"];
        };
      };
    };
  };
  v2GetBook: {
    parameters: {
      query: {
        /** @description Book unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageBooks: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchBooks: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Book title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the book was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the book was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of pages
           */
          numberOfPagesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of pages
           */
          numberOfPagesTo?: number;
          /**
           * Format: float
           * @description Starting stardate of book story
           */
          stardateFrom?: number;
          /**
           * Format: float
           * @description Ending stardate of book story
           */
          stardateTo?: number;
          /**
           * Format: int32
           * @description Starting year of book story
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of book story
           */
          yearTo?: number;
          /** @description Whether it should be a novel */
          novel?: boolean;
          /** @description Whether it should be a reference book */
          referenceBook?: boolean;
          /** @description Whether it should be a biography book */
          biographyBook?: boolean;
          /** @description Whether it should be a role playing book */
          rolePlayingBook?: boolean;
          /** @description Whether it should be an e-book */
          eBook?: boolean;
          /** @description Whether it should be an anthology */
          anthology?: boolean;
          /** @description Whether it should be novelization */
          novelization?: boolean;
          /** @description Whether it should be an unauthorized publication */
          unauthorizedPublication?: boolean;
          /** @description Whether it should be an audiobook */
          audiobook?: boolean;
          /** @description Whether it should be an audiobook, abridged */
          audiobookAbridged?: boolean;
          /**
           * Format: int32
           * @description Starting year the audiobook was published
           */
          audiobookPublishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the audiobook was published
           */
          audiobookPublishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal audiobook run time, in minutes
           */
          audiobookRunTimeFrom?: number;
          /**
           * Format: int32
           * @description Maximal audiobook run time, in minutes
           */
          audiobookRunTimeTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookV2BaseResponse"];
        };
      };
    };
  };
  v1GetBookCollection: {
    parameters: {
      query: {
        /** @description Book collection unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookCollectionFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageBookCollections: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookCollectionBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchBookCollections: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Book collection title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the book collection was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the book collection was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of pages
           */
          numberOfPagesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of pages
           */
          numberOfPagesTo?: number;
          /**
           * Format: float
           * @description Starting stardate of book collection stories
           */
          stardateFrom?: number;
          /**
           * Format: float
           * @description Ending stardate of book collections stories
           */
          stardateTo?: number;
          /**
           * Format: int32
           * @description Starting year of book collection stories
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of book collections stories
           */
          yearTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookCollectionBaseResponse"];
        };
      };
    };
  };
  v1GetBookSeries: {
    parameters: {
      query: {
        /** @description Book series unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookSeriesFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageBookSeries: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookSeriesBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchBookSeries: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Book series title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the book series was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the book series was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of books
           */
          numberOfBooksFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of books
           */
          numberOfBooksTo?: number;
          /**
           * Format: int32
           * @description Starting year of book series stories
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of book series stories
           */
          yearTo?: number;
          /** @description Whether it should be a miniseries */
          miniseries?: boolean;
          /** @description Whether it should be an e-book series */
          eBookSeries?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BookSeriesBaseResponse"];
        };
      };
    };
  };
  v1GetCharacter: {
    parameters: {
      query: {
        /** @description Character unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CharacterFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageCharacter: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CharacterBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchCharacters: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Character name */
          name?: string;
          /** @description Character gender */
          gender?: string;
          /** @description Whether it should be a deceased character */
          deceased?: boolean;
          /** @description Whether it should be a hologram */
          hologram?: boolean;
          /** @description Whether it should be a fictional character (from universe point of view) */
          fictionalCharacter?: boolean;
          /** @description Whether it should be a mirror universe character */
          mirror?: boolean;
          /** @description Whether it should be a alternate reality character */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CharacterBaseResponse"];
        };
      };
    };
  };
  v1GetComics: {
    parameters: {
      query: {
        /** @description Comics unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicsFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageComics: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicsBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchComics: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Comics title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the comics was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the comics was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of pages
           */
          numberOfPagesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of pages
           */
          numberOfPagesTo?: number;
          /**
           * Format: float
           * @description Starting stardate of comics story
           */
          stardateFrom?: number;
          /**
           * Format: float
           * @description Ending stardate of comics story
           */
          stardateTo?: number;
          /**
           * Format: int32
           * @description Starting year of comics story
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of comics story
           */
          yearTo?: number;
          /** @description Whether it should be a photonovel */
          photonovel?: boolean;
          /** @description Whether it should be an adaptation of an episode or a movie */
          adaptation?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicsBaseResponse"];
        };
      };
    };
  };
  v1GetComicCollection: {
    parameters: {
      query: {
        /** @description Comic collection unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicCollectionFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageComicCollections: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicCollectionBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchComicCollections: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Comic collection title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the comic collection was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the comic collection was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of pages
           */
          numberOfPagesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of pages
           */
          numberOfPagesTo?: number;
          /**
           * Format: float
           * @description Starting stardate of comic collection stories
           */
          stardateFrom?: number;
          /**
           * Format: float
           * @description Ending stardate of comic collections stories
           */
          stardateTo?: number;
          /**
           * Format: int32
           * @description Starting year of comic collection stories
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of comic collections stories
           */
          yearTo?: number;
          /** @description Whether it should be an photonovel collection */
          photonovel?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicCollectionBaseResponse"];
        };
      };
    };
  };
  v2GetComicCollection: {
    parameters: {
      query: {
        /** @description Comic collection unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicCollectionV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1GetComicSeries: {
    parameters: {
      query: {
        /** @description Comic series unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicSeriesFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageComicSeries: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicSeriesBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchComicSeries: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Comic series title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the comic series was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the comic series was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of issues
           */
          numberOfIssuesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of issues
           */
          numberOfIssuesTo?: number;
          /**
           * Format: float
           * @description Starting stardate of comic series stories
           */
          stardateFrom?: number;
          /**
           * Format: float
           * @description Starting stardate of comic series stories
           */
          stardateTo?: number;
          /**
           * Format: int32
           * @description Starting year of comic series stories
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of comic series stories
           */
          yearTo?: number;
          /** @description Whether it should be a miniseries */
          miniseries?: boolean;
          /** @description Whether it should be photonovel series */
          photonovelSeries?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicSeriesBaseResponse"];
        };
      };
    };
  };
  v1GetComicStrip: {
    parameters: {
      query: {
        /** @description Comic strip unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicStripFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageComicStrips: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicStripBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchComicStrips: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Comic strip title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the comic strip was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the comic strip was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of pages
           */
          numberOfPagesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of pages
           */
          numberOfPagesTo?: number;
          /**
           * Format: int32
           * @description Starting year of comic strip story
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of comic strip story
           */
          yearTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ComicStripBaseResponse"];
        };
      };
    };
  };
  v1GetCompany: {
    parameters: {
      query: {
        /** @description Company unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompanyFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageCompanies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompanyBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchCompanies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Company name */
          name?: string;
          /** @description Whether it should be a broadcaster */
          broadcaster?: boolean;
          /** @description Whether it should be a collectible company */
          collectibleCompany?: boolean;
          /** @description Whether it should be a conglomerate */
          conglomerate?: boolean;
          /** @description Whether it should be a digital visual effects company */
          digitalVisualEffectsCompany?: boolean;
          /** @description Whether it should be a distributor */
          distributor?: boolean;
          /** @description Whether it should be a game company */
          gameCompany?: boolean;
          /** @description Whether it should be a film equipment company */
          filmEquipmentCompany?: boolean;
          /** @description Whether it should be a make-up effects studio */
          makeUpEffectsStudio?: boolean;
          /** @description Whether it should be a matte painting company */
          mattePaintingCompany?: boolean;
          /** @description Whether it should be a model and miniature effects company */
          modelAndMiniatureEffectsCompany?: boolean;
          /** @description Whether it should be a post-production company */
          postProductionCompany?: boolean;
          /** @description Whether it should be a production company */
          productionCompany?: boolean;
          /** @description Whether it should be a prop company */
          propCompany?: boolean;
          /** @description Whether it should be a record label */
          recordLabel?: boolean;
          /** @description Whether it should be a special effects company */
          specialEffectsCompany?: boolean;
          /** @description Whether it should be a TV and film production company */
          tvAndFilmProductionCompany?: boolean;
          /** @description Whether it should be a video game company */
          videoGameCompany?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompanyBaseResponse"];
        };
      };
    };
  };
  v2GetCompany: {
    parameters: {
      query: {
        /** @description Company unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompanyV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageCompanies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompanyV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchCompanies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Company name */
          name?: string;
          /** @description Whether it should be a broadcaster */
          broadcaster?: boolean;
          /** @description Whether it should be a streaming service */
          streamingService?: boolean;
          /** @description Whether it should be a collectible company */
          collectibleCompany?: boolean;
          /** @description Whether it should be a conglomerate */
          conglomerate?: boolean;
          /** @description Whether it should be a visual effects company */
          visualEffectsCompany?: boolean;
          /** @description Whether it should be a digital visual effects company */
          digitalVisualEffectsCompany?: boolean;
          /** @description Whether it should be a distributor */
          distributor?: boolean;
          /** @description Whether it should be a game company */
          gameCompany?: boolean;
          /** @description Whether it should be a film equipment company */
          filmEquipmentCompany?: boolean;
          /** @description Whether it should be a make-up effects studio */
          makeUpEffectsStudio?: boolean;
          /** @description Whether it should be a matte painting company */
          mattePaintingCompany?: boolean;
          /** @description Whether it should be a model and miniature effects company */
          modelAndMiniatureEffectsCompany?: boolean;
          /** @description Whether it should be a post-production company */
          postProductionCompany?: boolean;
          /** @description Whether it should be a production company */
          productionCompany?: boolean;
          /** @description Whether it should be a prop company */
          propCompany?: boolean;
          /** @description Whether it should be a record label */
          recordLabel?: boolean;
          /** @description Whether it should be a special effects company */
          specialEffectsCompany?: boolean;
          /** @description Whether it should be a TV and film production company */
          tvAndFilmProductionCompany?: boolean;
          /** @description Whether it should be a video game company */
          videoGameCompany?: boolean;
          /** @description Whether it should be a publisher */
          publisher?: boolean;
          /** @description Whether it should be a publication art studio */
          publicationArtStudio?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompanyV2BaseResponse"];
        };
      };
    };
  };
  v1GetConflict: {
    parameters: {
      query: {
        /** @description Conflict unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConflictFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageConflicts: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConflictBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchConflicts: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Conflict name */
          name?: string;
          /**
           * Format: int32
           * @description Starting year of the conflict
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of the conflict
           */
          yearTo?: number;
          /** @description Whether it should be an Earth conflict */
          earthConflict?: boolean;
          /** @description Whether this conflict should be a part of war involving Federation */
          federationWar?: boolean;
          /** @description Whether this conflict should be a part of war involving the Klingons */
          klingonWar?: boolean;
          /** @description Whether this conflict should be a Dominion war battle */
          dominionWarBattle?: boolean;
          /** @description Whether this conflict should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConflictBaseResponse"];
        };
      };
    };
  };
  v2GetConflict: {
    parameters: {
      query: {
        /** @description Conflict unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ConflictV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1GetDataVersion: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DataVersion"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1GetElement: {
    parameters: {
      query: {
        /** @description Element unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElementFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageElements: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElementBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchElements: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Element name */
          name?: string;
          /** @description Element symbol */
          symbol?: string;
          /** @description Whether it should be a transuranium */
          transuranium?: boolean;
          /** @description Whether it should belong to Gamma series */
          gammaSeries?: boolean;
          /** @description Whether it should belong to Hypersonic series */
          hypersonicSeries?: boolean;
          /** @description Whether it should belong to Mega series */
          megaSeries?: boolean;
          /** @description Whether it should belong to Omega series */
          omegaSeries?: boolean;
          /** @description Whether it should belong to Transonic series */
          transonicSeries?: boolean;
          /** @description Whether it should belong to World series */
          worldSeries?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElementBaseResponse"];
        };
      };
    };
  };
  v2GetElement: {
    parameters: {
      query: {
        /** @description Element unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElementV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageElements: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElementV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchElements: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Element name */
          name?: string;
          /** @description Element symbol */
          symbol?: string;
          /** @description Whether it should be a transuranic */
          transuranic?: boolean;
          /** @description Whether it should belong to Gamma series */
          gammaSeries?: boolean;
          /** @description Whether it should belong to Hypersonic series */
          hypersonicSeries?: boolean;
          /** @description Whether it should belong to Mega series */
          megaSeries?: boolean;
          /** @description Whether it should belong to Omega series */
          omegaSeries?: boolean;
          /** @description Whether it should belong to Transonic series */
          transonicSeries?: boolean;
          /** @description Whether it should belong to World series */
          worldSeries?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElementV2BaseResponse"];
        };
      };
    };
  };
  v1GetEpisode: {
    parameters: {
      query: {
        /** @description Episode unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EpisodeFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageEpisodes: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EpisodeBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchEpisodes: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Episode title */
          title?: string;
          /**
           * Format: int32
           * @description Minimal season number
           */
          seasonNumberFrom?: number;
          /**
           * Format: int32
           * @description Maximal season number
           */
          seasonNumberTo?: number;
          /**
           * Format: int32
           * @description Minimal episode number in season
           */
          episodeNumberFrom?: number;
          /**
           * Format: int32
           * @description Maximal episode number in season
           */
          episodeNumberTo?: number;
          /** @description Production serial number */
          productionSerialNumber?: string;
          /** @description Whether it should be a feature length episode */
          featureLength?: boolean;
          /**
           * Format: float
           * @description Starting stardate of episode story
           */
          stardateFrom?: number;
          /**
           * Format: float
           * @description Ending stardate of episode story
           */
          stardateTo?: number;
          /**
           * Format: int32
           * @description Starting year of episode story
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of episode story
           */
          yearTo?: number;
          /**
           * Format: date
           * @description Minimal date the episode was first aired in the United States
           */
          usAirDateFrom?: string;
          /**
           * Format: date
           * @description Maximal date the episode was first aired in the United States
           */
          usAirDateTo?: string;
          /**
           * Format: date
           * @description Minimal date the episode script was completed
           */
          finalScriptDateFrom?: string;
          /**
           * Format: date
           * @description Maximal date the episode script was completed
           */
          finalScriptDateTo?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EpisodeBaseResponse"];
        };
      };
    };
  };
  v1GetFood: {
    parameters: {
      query: {
        /** @description Food unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FoodFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageFoods: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FoodBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchFoods: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Food name */
          name?: string;
          /** @description Whether it should be of earthly origin */
          earthlyOrigin?: boolean;
          /** @description Whether it should be a dessert */
          dessert?: boolean;
          /** @description Whether it should be a fruit */
          fruit?: boolean;
          /** @description Whether it should be an herb or a spice */
          herbOrSpice?: boolean;
          /** @description Whether it should be a sauce */
          sauce?: boolean;
          /** @description Whether it should be a soup */
          soup?: boolean;
          /** @description Whether it should be a beverage */
          beverage?: boolean;
          /** @description Whether it should be an alcoholic beverage */
          alcoholicBeverage?: boolean;
          /** @description Whether it should be a juice */
          juice?: boolean;
          /** @description Whether it should be a tea */
          tea?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FoodBaseResponse"];
        };
      };
    };
  };
  v1GetLiterature: {
    parameters: {
      query: {
        /** @description Literature unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LiteratureFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageLiterature: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LiteratureBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchLiterature: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Literature title */
          title?: string;
          /** @description Whether it should be of earthly origin */
          earthlyOrigin?: boolean;
          /** @description Whether it should be a Shakespearean work */
          shakespeareanWork?: boolean;
          /** @description Whether it should be a report */
          report?: boolean;
          /** @description Whether it should be a scientific literature */
          scientificLiterature?: boolean;
          /** @description Whether it should be a technical manual */
          technicalManual?: boolean;
          /** @description Whether it should be a religious literature */
          religiousLiterature?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LiteratureBaseResponse"];
        };
      };
    };
  };
  v1GetLocation: {
    parameters: {
      query: {
        /** @description Location unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LocationFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageLocations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LocationBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchLocations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Location name */
          name?: string;
          /** @description Whether it should be an earthly location */
          earthlyLocation?: boolean;
          /** @description Whether it should be a fictional location */
          fictionalLocation?: boolean;
          /** @description Whether it should be a religious location */
          religiousLocation?: boolean;
          /** @description Whether it should be a geographical location */
          geographicalLocation?: boolean;
          /** @description Whether it should be a body of water */
          bodyOfWater?: boolean;
          /** @description Whether it should be a country */
          country?: boolean;
          /** @description Whether it should be a subnational entity */
          subnationalEntity?: boolean;
          /** @description Whether it should be a settlement */
          settlement?: boolean;
          /** @description Whether it should be a US settlement */
          usSettlement?: boolean;
          /** @description Whether it should be a Bajoran settlement */
          bajoranSettlement?: boolean;
          /** @description Whether it should be a colony */
          colony?: boolean;
          /** @description Whether it should be a landform */
          landform?: boolean;
          /** @description Whether it should be a landmark */
          landmark?: boolean;
          /** @description Whether it should be a road */
          road?: boolean;
          /** @description Whether it should be a structure */
          structure?: boolean;
          /** @description Whether it should be a shipyard */
          shipyard?: boolean;
          /** @description Whether it should be a building interior */
          buildingInterior?: boolean;
          /** @description Whether it should be a establishment */
          establishment?: boolean;
          /** @description Whether it should be a medical establishment */
          medicalEstablishment?: boolean;
          /** @description Whether it should be a DS9 establishment */
          ds9Establishment?: boolean;
          /** @description Whether it should be a school */
          school?: boolean;
          /** @description Whether this location should be from mirror universe */
          mirror?: boolean;
          /** @description Whether this location should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LocationBaseResponse"];
        };
      };
    };
  };
  v2GetLocation: {
    parameters: {
      query: {
        /** @description Location unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LocationV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageLocations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LocationV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchLocations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Location name */
          name?: string;
          /** @description Whether it should be an earthly location */
          earthlyLocation?: boolean;
          /** @description Whether it should be a Qo'nos location */
          qonosLocation?: boolean;
          /** @description Whether it should be a fictional location */
          fictionalLocation?: boolean;
          /** @description Whether it should be a mythological location */
          mythologicalLocation?: boolean;
          /** @description Whether it should be a religious location */
          religiousLocation?: boolean;
          /** @description Whether it should be a geographical location */
          geographicalLocation?: boolean;
          /** @description Whether it should be a body of water */
          bodyOfWater?: boolean;
          /** @description Whether it should be a country */
          country?: boolean;
          /** @description Whether it should be a subnational entity */
          subnationalEntity?: boolean;
          /** @description Whether it should be a settlement */
          settlement?: boolean;
          /** @description Whether it should be a US settlement */
          usSettlement?: boolean;
          /** @description Whether it should be a Bajoran settlement */
          bajoranSettlement?: boolean;
          /** @description Whether it should be a colony */
          colony?: boolean;
          /** @description Whether it should be a landform */
          landform?: boolean;
          /** @description Whether it should be a road */
          road?: boolean;
          /** @description Whether it should be a structure */
          structure?: boolean;
          /** @description Whether it should be a shipyard */
          shipyard?: boolean;
          /** @description Whether it should be a building interior */
          buildingInterior?: boolean;
          /** @description Whether it should be a establishment */
          establishment?: boolean;
          /** @description Whether it should be a medical establishment */
          medicalEstablishment?: boolean;
          /** @description Whether it should be a DS9 establishment */
          ds9Establishment?: boolean;
          /** @description Whether it should be a school */
          school?: boolean;
          /** @description Whether it should be a restaurant */
          restaurant?: boolean;
          /** @description Whether it should be a residence */
          residence?: boolean;
          /** @description Whether this location should be from mirror universe */
          mirror?: boolean;
          /** @description Whether this location should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LocationV2BaseResponse"];
        };
      };
    };
  };
  v1GetMagazine: {
    parameters: {
      query: {
        /** @description Magazine unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MagazineFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageMagazines: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MagazineBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchMagazines: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Magazine title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the magazine was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the magazine was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of pages
           */
          numberOfPagesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of pages
           */
          numberOfPagesTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MagazineBaseResponse"];
        };
      };
    };
  };
  v1GetMagazineSeries: {
    parameters: {
      query: {
        /** @description Magazine series unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MagazineSeriesFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageMagazineSeries: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MagazineSeriesBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchMagazineSeries: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Magazine series title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year the magazine series was published
           */
          publishedYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the magazine series was published
           */
          publishedYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of issues
           */
          numberOfIssuesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of issues
           */
          numberOfIssuesTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MagazineSeriesBaseResponse"];
        };
      };
    };
  };
  v1GetMaterial: {
    parameters: {
      query: {
        /** @description Material unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MaterialFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageMaterials: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MaterialBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchMaterials: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Material name */
          name?: string;
          /** @description Whether it should be a chemical compound */
          chemicalCompound?: boolean;
          /** @description Whether it should be a biochemical compound */
          biochemicalCompound?: boolean;
          /** @description Whether it should be a drug */
          drug?: boolean;
          /** @description Whether it should be a poisonous substance */
          poisonousSubstance?: boolean;
          /** @description Whether it should be an explosive */
          explosive?: boolean;
          /** @description Whether it should be a gemstone */
          gemstone?: boolean;
          /** @description Whether it should be an alloy or a composite */
          alloyOrComposite?: boolean;
          /** @description Whether it should be a fuel */
          fuel?: boolean;
          /** @description Whether it should be a mineral */
          mineral?: boolean;
          /** @description Whether it should be a precious material */
          preciousMaterial?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MaterialBaseResponse"];
        };
      };
    };
  };
  v1GetMedicalCondition: {
    parameters: {
      query: {
        /** @description Medical condition unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MedicalConditionFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageMedicalConditions: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MedicalConditionBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchMedicalConditions: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Medical condition name */
          name?: string;
          /** @description Whether it should be a psychological condition */
          psychologicalCondition?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MedicalConditionBaseResponse"];
        };
      };
    };
  };
  v1GetMovie: {
    parameters: {
      query: {
        /** @description Movie unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MovieFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageMovies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MovieBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchMovies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Movie title */
          title?: string;
          /**
           * Format: float
           * @description Starting stardate of movie story
           */
          stardateFrom?: number;
          /**
           * Format: float
           * @description Ending stardate of movie story
           */
          stardateTo?: number;
          /**
           * Format: int32
           * @description Starting year of movie story
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of movie story
           */
          yearTo?: number;
          /**
           * Format: date
           * @description Minimal date the movie was first released in the United States
           */
          usReleaseDateFrom?: string;
          /**
           * Format: date
           * @description Maximal date the movie was first released in the United States
           */
          usReleaseDateTo?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MovieBaseResponse"];
        };
      };
    };
  };
  v1GetOccupation: {
    parameters: {
      query: {
        /** @description Occupation unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OccupationFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageOccupations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OccupationBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchOccupations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Occupation name */
          name?: string;
          /** @description Whether it should be a legal occupation */
          legalOccupation?: boolean;
          /** @description Whether it should be a medical occupation */
          medicalOccupation?: boolean;
          /** @description Whether it should be a scientific occupation */
          scientificOccupation?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OccupationBaseResponse"];
        };
      };
    };
  };
  v2GetOccupation: {
    parameters: {
      query: {
        /** @description Occupation unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OccupationV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageOccupations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OccupationV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchOccupations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Occupation name */
          name?: string;
          /** @description Whether it should be an arts occupation */
          artsOccupation?: boolean;
          /** @description Whether it should be a communication occupation */
          communicationOccupation?: boolean;
          /** @description Whether it should be an economic occupation */
          economicOccupation?: boolean;
          /** @description Whether it should be an education occupation */
          educationOccupation?: boolean;
          /** @description Whether it should be an entertainment occupation */
          entertainmentOccupation?: boolean;
          /** @description Whether it should be an illegal occupation */
          illegalOccupation?: boolean;
          /** @description Whether it should be a legal occupation */
          legalOccupation?: boolean;
          /** @description Whether it should be a medical occupation */
          medicalOccupation?: boolean;
          /** @description Whether it should be a scientific occupation */
          scientificOccupation?: boolean;
          /** @description Whether it should be a sports occupation */
          sportsOccupation?: boolean;
          /** @description Whether it should be a victual occupation */
          victualOccupation?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OccupationV2BaseResponse"];
        };
      };
    };
  };
  v1GetOrganization: {
    parameters: {
      query: {
        /** @description Organization unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrganizationFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageOrganizations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrganizationBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchOrganizations: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Organization name */
          name?: string;
          /** @description Whether it should be a government */
          government?: boolean;
          /** @description Whether it should be an intergovernmental organization */
          intergovernmentalOrganization?: boolean;
          /** @description Whether it should be a research organization */
          researchOrganization?: boolean;
          /** @description Whether it should be a sport organization */
          sportOrganization?: boolean;
          /** @description Whether it should be a medical organization */
          medicalOrganization?: boolean;
          /** @description Whether it should be a military organization */
          militaryOrganization?: boolean;
          /** @description Whether it should be a military unit */
          militaryUnit?: boolean;
          /** @description Whether it should be a government agency */
          governmentAgency?: boolean;
          /** @description Whether it should be a law enforcement agency */
          lawEnforcementAgency?: boolean;
          /** @description Whether it should be a prison or penal colony */
          prisonOrPenalColony?: boolean;
          /** @description Whether this organization should be from mirror universe */
          mirror?: boolean;
          /** @description Whether this organization should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrganizationBaseResponse"];
        };
      };
    };
  };
  v1GetPerformer: {
    parameters: {
      query: {
        /** @description Performer unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PerformerFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PagePerformers: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PerformerBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchPerformers: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Performer name */
          name?: string;
          /** @description Performer birth name */
          birthName?: string;
          /** @description Performer gender */
          gender?: string;
          /**
           * Format: date
           * @description Minimal date the performer was born
           */
          dateOfBirthFrom?: string;
          /**
           * Format: date
           * @description Maximal date the performer was born
           */
          dateOfBirthTo?: string;
          /** @description Place the performer was born */
          placeOfBirth?: string;
          /**
           * Format: date
           * @description Minimal date the performer died
           */
          dateOfDeathFrom?: string;
          /**
           * Format: date
           * @description Maximal date the performer died
           */
          dateOfDeathTo?: string;
          /** @description Place the performer died */
          placeOfDeath?: string;
          /** @description Whether it should be an animal performer */
          animalPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Discovery */
          disPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Deep Space Nine */
          ds9Performer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Enterprise */
          entPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in a Star Trek movie */
          filmPerformer?: boolean;
          /** @description Whether it should be a stand-in performer */
          standInPerformer?: boolean;
          /** @description Whether it should be a stunt performer */
          stuntPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: The Animated Series */
          tasPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: The Next Generation */
          tngPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: The Original Series */
          tosPerformer?: boolean;
          /** @description Whether it should be a video game performer */
          videoGamePerformer?: boolean;
          /** @description Whether it should be a voice performer */
          voicePerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Voyager */
          voyPerformer?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PerformerBaseResponse"];
        };
      };
    };
  };
  v2GetPerformer: {
    parameters: {
      query: {
        /** @description Performer unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PerformerV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PagePerformers: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PerformerV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchPerformers: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Performer name */
          name?: string;
          /** @description Performer birth name */
          birthName?: string;
          /** @description Performer gender */
          gender?: string;
          /**
           * Format: date
           * @description Minimal date the performer was born
           */
          dateOfBirthFrom?: string;
          /**
           * Format: date
           * @description Maximal date the performer was born
           */
          dateOfBirthTo?: string;
          /** @description Place the performer was born */
          placeOfBirth?: string;
          /**
           * Format: date
           * @description Minimal date the performer died
           */
          dateOfDeathFrom?: string;
          /**
           * Format: date
           * @description Maximal date the performer died
           */
          dateOfDeathTo?: string;
          /** @description Place the performer died */
          placeOfDeath?: string;
          /** @description Whether it should be an animal performer */
          animalPerformer?: boolean;
          /** @description Whether it should be an audiobook performer */
          audiobookPerformer?: boolean;
          /** @description Whether it should be a cut performer */
          cutPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Discovery */
          disPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Deep Space Nine */
          ds9Performer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Enterprise */
          entPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in a Star Trek movie */
          filmPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Lower Decks */
          ldPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Picard */
          picPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Prodigy */
          proPerformer?: boolean;
          /** @description Whether it should be a puppeteer */
          puppeteer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Strange New Worlds */
          snwPerformer?: boolean;
          /** @description Whether it should be a stand-in performer */
          standInPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Short Treks */
          stPerformer?: boolean;
          /** @description Whether it should be a stunt performer */
          stuntPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: The Animated Series */
          tasPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: The Next Generation */
          tngPerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: The Original Series */
          tosPerformer?: boolean;
          /** @description Whether it should be a video game performer */
          videoGamePerformer?: boolean;
          /** @description Whether it should be a voice performer */
          voicePerformer?: boolean;
          /** @description Whether it should be a performer that appeared in Star Trek: Voyager */
          voyPerformer?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PerformerV2BaseResponse"];
        };
      };
    };
  };
  v1GetSeason: {
    parameters: {
      query: {
        /** @description Season unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SeasonFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageSeasons: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SeasonBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchSeasons: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Season title */
          title?: string;
          /**
           * Format: int32
           * @description Minimal season number
           */
          seasonNumberFrom?: number;
          /**
           * Format: int32
           * @description Maximal season number
           */
          seasonNumberTo?: number;
          /**
           * Format: int32
           * @description Minimal number of episodes in season
           */
          numberOfEpisodesFrom?: number;
          /**
           * Format: int32
           * @description Maximal number of episodes in season
           */
          numberOfEpisodesTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SeasonBaseResponse"];
        };
      };
    };
  };
  v1GetSeries: {
    parameters: {
      query: {
        /** @description Series unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SeriesFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageSeries: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SeriesBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchSeries: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Series title */
          title?: string;
          /** @description Series abbreviation */
          abbreviation?: string;
          /**
           * Format: int32
           * @description Minimal year the series production started
           */
          productionStartYearFrom?: number;
          /**
           * Format: int32
           * @description Maximal year the series production started
           */
          productionStartYearTo?: number;
          /**
           * Format: int32
           * @description Minimal year the series production ended
           */
          productionEndYearFrom?: number;
          /**
           * Format: int32
           * @description Maximal year the series production ended
           */
          productionEndYearTo?: number;
          /**
           * Format: date
           * @description Minimal date the series originally ran from
           */
          originalRunStartDateFrom?: string;
          /**
           * Format: date
           * @description Maximal date the series originally ran from
           */
          originalRunStartDateTo?: string;
          /**
           * Format: date
           * @description Minimal date the series originally ran to
           */
          originalRunEndDateFrom?: string;
          /**
           * Format: date
           * @description Maximal date the series originally ran to
           */
          originalRunEndDateTo?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SeriesBaseResponse"];
        };
      };
    };
  };
  v1GetSoundtrack: {
    parameters: {
      query: {
        /** @description Soundtrack unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SoundtrackFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageSoundtracks: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SoundtrackBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchSoundtracks: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Soundtrack title */
          title?: string;
          /**
           * Format: date
           * @description Minimal release date
           */
          releaseDateFrom?: string;
          /**
           * Format: date
           * @description Maximal release date
           */
          releaseDateTo?: string;
          /**
           * Format: int32
           * @description Minimal length, in seconds
           */
          lengthFrom?: number;
          /**
           * Format: int32
           * @description Maximal length, in seconds
           */
          lengthTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SoundtrackBaseResponse"];
        };
      };
    };
  };
  v1GetSpacecraft: {
    parameters: {
      query: {
        /** @description Spacecraft unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageSpacecrafts: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchSpacecrafts: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Spacecraft name */
          name?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftBaseResponse"];
        };
      };
    };
  };
  v2GetSpacecraft: {
    parameters: {
      query: {
        /** @description Spacecraft unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageSpacecrafts: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchSpacecrafts: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Spacecraft name */
          name?: string;
          /** @description Spacecraft registry */
          registry?: string;
          /** @description Spacecraft status */
          status?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftV2BaseResponse"];
        };
      };
    };
  };
  v1GetSpacecraftClass: {
    parameters: {
      query: {
        /** @description SpacecraftClass unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftClassFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageSpacecraftClasses: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftClassBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchSpacecraftClasses: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Spacecraft class name */
          name?: string;
          /** @description Whether it should be a warp-capable spacecraft class */
          warpCapableSpecies?: boolean;
          /** @description Whether this spacecraft class should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftClassBaseResponse"];
        };
      };
    };
  };
  v2GetSpacecraftClass: {
    parameters: {
      query: {
        /** @description SpacecraftClass unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftClassV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageSpacecraftClasses: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftClassV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchSpacecraftClasses: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Spacecraft class name */
          name?: string;
          /** @description Whether it should be a warp-capable spacecraft class */
          warpCapableSpecies?: boolean;
          /** @description Whether this spacecraft class should be from mirror universe */
          mirror?: boolean;
          /** @description Whether this spacecraft class should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftClassV2BaseResponse"];
        };
      };
    };
  };
  v3GetSpacecraftClass: {
    parameters: {
      query: {
        /** @description Spacecraft class unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpacecraftClassV3FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1GetSpecies: {
    parameters: {
      query: {
        /** @description Species unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpeciesFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageSpecies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpeciesBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchSpecies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Species name */
          name?: string;
          /** @description Whether it should be an extinct species */
          extinctSpecies?: boolean;
          /** @description Whether it should be a warp-capable species */
          warpCapableSpecies?: boolean;
          /** @description Whether it should be an extra-galactic species */
          extraGalacticSpecies?: boolean;
          /** @description Whether it should be a humanoid species */
          humanoidSpecies?: boolean;
          /** @description Whether it should be a reptilian species */
          reptilianSpecies?: boolean;
          /** @description Whether it should be a non-corporeal species */
          nonCorporealSpecies?: boolean;
          /** @description Whether it should be a shapeshifting species */
          shapeshiftingSpecies?: boolean;
          /** @description Whether it should be a spaceborne species */
          spaceborneSpecies?: boolean;
          /** @description Whether it should be a telepathic species */
          telepathicSpecies?: boolean;
          /** @description Whether it should be a trans-dimensional species */
          transDimensionalSpecies?: boolean;
          /** @description Whether it should be a unnamed species */
          unnamedSpecies?: boolean;
          /** @description Whether this species should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpeciesBaseResponse"];
        };
      };
    };
  };
  v2GetSpecies: {
    parameters: {
      query: {
        /** @description Species unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpeciesV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageSpecies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpeciesV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchSpecies: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Species name */
          name?: string;
          /** @description Whether it should be an extinct species */
          extinctSpecies?: boolean;
          /** @description Whether it should be a warp-capable species */
          warpCapableSpecies?: boolean;
          /** @description Whether it should be an extra-galactic species */
          extraGalacticSpecies?: boolean;
          /** @description Whether it should be a humanoid species */
          humanoidSpecies?: boolean;
          /** @description Whether it should be a reptilian species */
          reptilianSpecies?: boolean;
          /** @description Whether it should be an avian species */
          avianSpecies?: boolean;
          /** @description Whether it should be a non-corporeal species */
          nonCorporealSpecies?: boolean;
          /** @description Whether it should be a shapeshifting species */
          shapeshiftingSpecies?: boolean;
          /** @description Whether it should be a spaceborne species */
          spaceborneSpecies?: boolean;
          /** @description Whether it should be a telepathic species */
          telepathicSpecies?: boolean;
          /** @description Whether it should be a trans-dimensional species */
          transDimensionalSpecies?: boolean;
          /** @description Whether it should be a unnamed species */
          unnamedSpecies?: boolean;
          /** @description Whether this species should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpeciesV2BaseResponse"];
        };
      };
    };
  };
  v1GetStaff: {
    parameters: {
      query: {
        /** @description Staff unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StaffFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageStaff: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StaffBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchStaff: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Staff name */
          name?: string;
          /** @description Staff birth name */
          birthName?: string;
          /** @description Staff gender */
          gender?: string;
          /**
           * Format: date
           * @description Minimal date the staff was born
           */
          dateOfBirthFrom?: string;
          /**
           * Format: date
           * @description Maximal date the staff was born
           */
          dateOfBirthTo?: string;
          /** @description Place the staff was born */
          placeOfBirth?: string;
          /**
           * Format: date
           * @description Minimal date the staff died
           */
          dateOfDeathFrom?: string;
          /**
           * Format: date
           * @description Maximal date the staff died
           */
          dateOfDeathTo?: string;
          /** @description Place the staff died */
          placeOfDeath?: string;
          /** @description Whether this person should be from art department */
          artDepartment?: boolean;
          /** @description Whether this person should be an art director */
          artDirector?: boolean;
          /** @description Whether this person should be a production designer */
          productionDesigner?: boolean;
          /** @description Whether this person should be from camera and electrical department */
          cameraAndElectricalDepartment?: boolean;
          /** @description Whether this person should be a cinematographer */
          cinematographer?: boolean;
          /** @description Whether this person should be from casting department */
          castingDepartment?: boolean;
          /** @description Whether this person should be from costume department */
          costumeDepartment?: boolean;
          /** @description Whether this person should be a custume designer */
          costumeDesigner?: boolean;
          /** @description Whether this person should be a director */
          director?: boolean;
          /** @description Whether this person should be an assistant or second unit director director */
          assistantOrSecondUnitDirector?: boolean;
          /** @description Whether this person should be an exhibit and attraction staff */
          exhibitAndAttractionStaff?: boolean;
          /** @description Whether this person should be a film editor */
          filmEditor?: boolean;
          /** @description Whether this person should be a linguist */
          linguist?: boolean;
          /** @description Whether this person should be a location staff */
          locationStaff?: boolean;
          /** @description Whether this person should be a make-up staff */
          makeupStaff?: boolean;
          /** @description Whether this person should be from music department */
          musicDepartment?: boolean;
          /** @description Whether this person should be a composer */
          composer?: boolean;
          /** @description Whether this person should be a personal assistant */
          personalAssistant?: boolean;
          /** @description Whether this person should be a producer */
          producer?: boolean;
          /** @description Whether this person should be a production associate */
          productionAssociate?: boolean;
          /** @description Whether this person should be a production staff */
          productionStaff?: boolean;
          /** @description Whether this person should be a publication staff */
          publicationStaff?: boolean;
          /** @description Whether this person should be a science consultant */
          scienceConsultant?: boolean;
          /** @description Whether this person should be from sound department */
          soundDepartment?: boolean;
          /** @description Whether this person should be a special and visual effects staff */
          specialAndVisualEffectsStaff?: boolean;
          /** @description Whether this person should be an author */
          author?: boolean;
          /** @description Whether this person should be an audio author */
          audioAuthor?: boolean;
          /** @description Whether this person should be a calendar artist */
          calendarArtist?: boolean;
          /** @description Whether this person should be a comic artist */
          comicArtist?: boolean;
          /** @description Whether this person should be a comic author */
          comicAuthor?: boolean;
          /** @description Whether this person should be a comic color artist */
          comicColorArtist?: boolean;
          /** @description Whether this person should be a comic interior artist */
          comicInteriorArtist?: boolean;
          /** @description Whether this person should be a comic ink artist */
          comicInkArtist?: boolean;
          /** @description Whether this person should be a comic pencil artist */
          comicPencilArtist?: boolean;
          /** @description Whether this person should be a comic letter artist */
          comicLetterArtist?: boolean;
          /** @description Whether this person should be a comic strip artist */
          comicStripArtist?: boolean;
          /** @description Whether this person should be a game artist */
          gameArtist?: boolean;
          /** @description Whether this person should be a game author */
          gameAuthor?: boolean;
          /** @description Whether this person should be a novel artist */
          novelArtist?: boolean;
          /** @description Whether this person should be a novel author */
          novelAuthor?: boolean;
          /** @description Whether this person should be a reference artist */
          referenceArtist?: boolean;
          /** @description Whether this person should be a reference author */
          referenceAuthor?: boolean;
          /** @description Whether this person should be a publication artist */
          publicationArtist?: boolean;
          /** @description Whether this person should be a publication designer */
          publicationDesigner?: boolean;
          /** @description Whether this person should be a publication editor */
          publicationEditor?: boolean;
          /** @description Whether this person should be a publicity artist */
          publicityArtist?: boolean;
          /** @description Whether this person should be a part of CBS digital staff */
          cbsDigitalStaff?: boolean;
          /** @description Whether this person should be a part of ILM production staff */
          ilmProductionStaff?: boolean;
          /** @description Whether this person should be a special features artist */
          specialFeaturesStaff?: boolean;
          /** @description Whether this person should be a story editor */
          storyEditor?: boolean;
          /** @description Whether this person should be a studio executive */
          studioExecutive?: boolean;
          /** @description Whether this person should be from stunt department */
          stuntDepartment?: boolean;
          /** @description Whether this person should be from transportation department */
          transportationDepartment?: boolean;
          /** @description Whether this person is video game production staff */
          videoGameProductionStaff?: boolean;
          /** @description Whether this person should be a writer */
          writer?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StaffBaseResponse"];
        };
      };
    };
  };
  v2GetStaff: {
    parameters: {
      query: {
        /** @description Staff unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StaffV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageStaff: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StaffV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchStaff: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Staff name */
          name?: string;
          /** @description Staff birth name */
          birthName?: string;
          /** @description Staff gender */
          gender?: string;
          /**
           * Format: date
           * @description Minimal date the staff was born
           */
          dateOfBirthFrom?: string;
          /**
           * Format: date
           * @description Maximal date the staff was born
           */
          dateOfBirthTo?: string;
          /** @description Place the staff was born */
          placeOfBirth?: string;
          /**
           * Format: date
           * @description Minimal date the staff died
           */
          dateOfDeathFrom?: string;
          /**
           * Format: date
           * @description Maximal date the staff died
           */
          dateOfDeathTo?: string;
          /** @description Place the staff died */
          placeOfDeath?: string;
          /** @description Whether this person should be from art department */
          artDepartment?: boolean;
          /** @description Whether this person should be an art director */
          artDirector?: boolean;
          /** @description Whether this person should be a production designer */
          productionDesigner?: boolean;
          /** @description Whether this person should be from camera and electrical department */
          cameraAndElectricalDepartment?: boolean;
          /** @description Whether this person should be a cinematographer */
          cinematographer?: boolean;
          /** @description Whether this person should be from casting department */
          castingDepartment?: boolean;
          /** @description Whether this person should be from costume department */
          costumeDepartment?: boolean;
          /** @description Whether this person should be a custume designer */
          costumeDesigner?: boolean;
          /** @description Whether this person should be a director */
          director?: boolean;
          /** @description Whether this person should be an assistant or second unit director director */
          assistantOrSecondUnitDirector?: boolean;
          /** @description Whether this person should be an exhibit and attraction staff */
          exhibitAndAttractionStaff?: boolean;
          /** @description Whether this person should be a film editor */
          filmEditor?: boolean;
          /** @description Whether this person should be a part of Filmation production staff */
          filmationProductionStaff?: boolean;
          /** @description Whether this person should be a linguist */
          linguist?: boolean;
          /** @description Whether this person should be a location staff */
          locationStaff?: boolean;
          /** @description Whether this person should be a make-up staff */
          makeupStaff?: boolean;
          /** @description Whether this person should be a merchandise staff */
          merchandiseStaff?: boolean;
          /** @description Whether this person should be from music department */
          musicDepartment?: boolean;
          /** @description Whether this person should be a composer */
          composer?: boolean;
          /** @description Whether this person should be a personal assistant */
          personalAssistant?: boolean;
          /** @description Whether this person should be a producer */
          producer?: boolean;
          /** @description Whether this person should be a production associate */
          productionAssociate?: boolean;
          /** @description Whether this person should be a production staff */
          productionStaff?: boolean;
          /** @description Whether this person should be a publication staff */
          publicationStaff?: boolean;
          /** @description Whether this person should be a science consultant */
          scienceConsultant?: boolean;
          /** @description Whether this person should be from sound department */
          soundDepartment?: boolean;
          /** @description Whether this person should be a special and visual effects staff */
          specialAndVisualEffectsStaff?: boolean;
          /** @description Whether this person should be an author */
          author?: boolean;
          /** @description Whether this person should be an audio author */
          audioAuthor?: boolean;
          /** @description Whether this person should be a calendar artist */
          calendarArtist?: boolean;
          /** @description Whether this person should be a comic artist */
          comicArtist?: boolean;
          /** @description Whether this person should be a comic author */
          comicAuthor?: boolean;
          /** @description Whether this person should be a comic color artist */
          comicColorArtist?: boolean;
          /** @description Whether this person should be a comic cover artist */
          comicCoverArtist?: boolean;
          /** @description Whether this person should be a comic interior artist */
          comicInteriorArtist?: boolean;
          /** @description Whether this person should be a comic ink artist */
          comicInkArtist?: boolean;
          /** @description Whether this person should be a comic pencil artist */
          comicPencilArtist?: boolean;
          /** @description Whether this person should be a comic letter artist */
          comicLetterArtist?: boolean;
          /** @description Whether this person should be a comic strip artist */
          comicStripArtist?: boolean;
          /** @description Whether this person should be a game artist */
          gameArtist?: boolean;
          /** @description Whether this person should be a game author */
          gameAuthor?: boolean;
          /** @description Whether this person should be a novel artist */
          novelArtist?: boolean;
          /** @description Whether this person should be a novel author */
          novelAuthor?: boolean;
          /** @description Whether this person should be a reference artist */
          referenceArtist?: boolean;
          /** @description Whether this person should be a reference author */
          referenceAuthor?: boolean;
          /** @description Whether this person should be a publication artist */
          publicationArtist?: boolean;
          /** @description Whether this person should be a publication designer */
          publicationDesigner?: boolean;
          /** @description Whether this person should be a publication editor */
          publicationEditor?: boolean;
          /** @description Whether this person should be a publicity artist */
          publicityArtist?: boolean;
          /** @description Whether this person should be a part of CBS digital staff */
          cbsDigitalStaff?: boolean;
          /** @description Whether this person should be a part of ILM production staff */
          ilmProductionStaff?: boolean;
          /** @description Whether this person should be a special features artist */
          specialFeaturesStaff?: boolean;
          /** @description Whether this person should be a story editor */
          storyEditor?: boolean;
          /** @description Whether this person should be a studio executive */
          studioExecutive?: boolean;
          /** @description Whether this person should be from stunt department */
          stuntDepartment?: boolean;
          /** @description Whether this person should be from transportation department */
          transportationDepartment?: boolean;
          /** @description Whether this person is video game production staff */
          videoGameProductionStaff?: boolean;
          /** @description Whether this person should be a writer */
          writer?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StaffV2BaseResponse"];
        };
      };
    };
  };
  v1GetTechnology: {
    parameters: {
      query: {
        /** @description Technology unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TechnologyFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageTechnology: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TechnologyBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchTechnology: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Technology name */
          name?: string;
          /** @description Whether it should be a Borg technology */
          borgTechnology?: boolean;
          /** @description Whether it should be a Borg component */
          borgComponent?: boolean;
          /** @description Whether it should be a communications technology */
          communicationsTechnology?: boolean;
          /** @description Whether it should be a computer technology */
          computerTechnology?: boolean;
          /** @description Whether it should be a technology related to computer programming */
          computerProgramming?: boolean;
          /** @description Whether it should be a subroutine */
          subroutine?: boolean;
          /** @description Whether it should be a database */
          database?: boolean;
          /** @description Whether it should be a energy technology */
          energyTechnology?: boolean;
          /** @description Whether it should be a fictional technology */
          fictionalTechnology?: boolean;
          /** @description Whether it should be a holographic technology */
          holographicTechnology?: boolean;
          /** @description Whether it should be a identification technology */
          identificationTechnology?: boolean;
          /** @description Whether it should be a life support technology */
          lifeSupportTechnology?: boolean;
          /** @description Whether it should be a sensor technology */
          sensorTechnology?: boolean;
          /** @description Whether it should be a shield technology */
          shieldTechnology?: boolean;
          /** @description Whether it should be a tool */
          tool?: boolean;
          /** @description Whether it should be a culinary tool */
          culinaryTool?: boolean;
          /** @description Whether it should be a engineering tool */
          engineeringTool?: boolean;
          /** @description Whether it should be a household tool */
          householdTool?: boolean;
          /** @description Whether it should be a medical equipment */
          medicalEquipment?: boolean;
          /** @description Whether it's a transporter technology */
          transporterTechnology?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TechnologyBaseResponse"];
        };
      };
    };
  };
  v2GetTechnology: {
    parameters: {
      query: {
        /** @description Technology unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TechnologyV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageTechnology: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TechnologyV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchTechnology: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Technology name */
          name?: string;
          /** @description Whether it should be a Borg technology */
          borgTechnology?: boolean;
          /** @description Whether it should be a Borg component */
          borgComponent?: boolean;
          /** @description Whether it should be a communications technology */
          communicationsTechnology?: boolean;
          /** @description Whether it should be a computer technology */
          computerTechnology?: boolean;
          /** @description Whether it should be a technology related to computer programming */
          computerProgramming?: boolean;
          /** @description Whether it should be a subroutine */
          subroutine?: boolean;
          /** @description Whether it should be a database */
          database?: boolean;
          /** @description Whether it should be a energy technology */
          energyTechnology?: boolean;
          /** @description Whether it should be a fictional technology */
          fictionalTechnology?: boolean;
          /** @description Whether it should be a holographic technology */
          holographicTechnology?: boolean;
          /** @description Whether it should be a identification technology */
          identificationTechnology?: boolean;
          /** @description Whether it should be a life support technology */
          lifeSupportTechnology?: boolean;
          /** @description Whether it should be a sensor technology */
          sensorTechnology?: boolean;
          /** @description Whether it should be a shield technology */
          shieldTechnology?: boolean;
          /** @description Whether it should be a security technology */
          securityTechnology?: boolean;
          /** @description Whether it should be a propulsion technology */
          propulsionTechnology?: boolean;
          /** @description Whether it should be a spacecraft component */
          spacecraftComponent?: boolean;
          /** @description Whether it should be a warp technology */
          warpTechnology?: boolean;
          /** @description Whether it should be a transwarp technology */
          transwarpTechnology?: boolean;
          /** @description Whether it should be a time travel technology */
          timeTravelTechnology?: boolean;
          /** @description Whether it should be a military technology */
          militaryTechnology?: boolean;
          /** @description Whether it should be a victual technology */
          victualTechnology?: boolean;
          /** @description Whether it should be a tool */
          tool?: boolean;
          /** @description Whether it should be a culinary tool */
          culinaryTool?: boolean;
          /** @description Whether it should be a engineering tool */
          engineeringTool?: boolean;
          /** @description Whether it should be a household tool */
          householdTool?: boolean;
          /** @description Whether it should be a medical equipment */
          medicalEquipment?: boolean;
          /** @description Whether it's a transporter technology */
          transporterTechnology?: boolean;
          /** @description Whether it's a transportation technology */
          transportationTechnology?: boolean;
          /** @description Whether it's a weapon component */
          weaponComponent?: boolean;
          /** @description Whether it's an artificial lifeform component */
          artificialLifeformComponent?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TechnologyV2BaseResponse"];
        };
      };
    };
  };
  v1GetTitle: {
    parameters: {
      query: {
        /** @description Title unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TitleFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageTitles: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TitleBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchTitles: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Title name */
          name?: string;
          /** @description Whether it should be a military rank */
          militaryRank?: boolean;
          /** @description Whether it should be a fleet rank */
          fleetRank?: boolean;
          /** @description Whether it should be a religious title */
          religiousTitle?: boolean;
          /** @description Whether it should be a position */
          position?: boolean;
          /** @description Whether this title should be from mirror universe */
          mirror?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TitleBaseResponse"];
        };
      };
    };
  };
  v2GetTitle: {
    parameters: {
      query: {
        /** @description Title unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TitleV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageTitles: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TitleV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchTitles: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Title name */
          name?: string;
          /** @description Whether it should be a military rank */
          militaryRank?: boolean;
          /** @description Whether it should be a fleet rank */
          fleetRank?: boolean;
          /** @description Whether it should be a religious title */
          religiousTitle?: boolean;
          /** @description Whether it should be a education title */
          educationTitle?: boolean;
          /** @description Whether this title should be from mirror universe */
          mirror?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TitleV2BaseResponse"];
        };
      };
    };
  };
  v1GetTradingCard: {
    parameters: {
      query: {
        /** @description Trading card unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageTradingCards: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchTradingCards: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Trading card name */
          name?: string;
          /** @description UID of trading card deck */
          tradingCardDeckUid?: string;
          /** @description UID of trading card set */
          tradingCardSetUid?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardBaseResponse"];
        };
      };
    };
  };
  v1GetTradingCardDeck: {
    parameters: {
      query: {
        /** @description trading card deck unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardDeckFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageTradingCardDecks: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardDeckBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchTradingCardDecks: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Trading card deck name */
          name?: string;
          /** @description UID of trading card set */
          tradingCardSetUid?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardDeckBaseResponse"];
        };
      };
    };
  };
  v1GetTradingCardSet: {
    parameters: {
      query: {
        /** @description Trading card set unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardSetFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageTradingCardSets: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardSetBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchTradingCardSets: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Trading card set name */
          name?: string;
          /**
           * Format: int32
           * @description Starting year the trading card set was released
           */
          releaseYearFrom?: number;
          /**
           * Format: int32
           * @description Ending year the trading card set was released
           */
          releaseYearTo?: number;
          /**
           * Format: int32
           * @description Minimal number of cards per deck
           */
          cardsPerPackFrom?: number;
          /**
           * Format: int32
           * @description Minimal number of cards per deck
           */
          cardsPerPackTo?: number;
          /**
           * Format: int32
           * @description Minimal number of packs per box
           */
          packsPerBoxFrom?: number;
          /**
           * Format: int32
           * @description Minimal number of packs per box
           */
          packsPerBoxTo?: number;
          /**
           * Format: int32
           * @description Minimal number of boxes per case
           */
          boxesPerCaseFrom?: number;
          /**
           * Format: int32
           * @description Minimal number of boxes per case
           */
          boxesPerCaseTo?: number;
          /**
           * Format: int32
           * @description Minimal production run
           */
          productionRunFrom?: number;
          /**
           * Format: int32
           * @description Minimal production run
           */
          productionRunTo?: number;
          /** @description Production run unit */
          productionRunUnit?: string;
          /**
           * Format: double
           * @description Minimal card width, in inches
           */
          cardWidthFrom?: number;
          /**
           * Format: double
           * @description Minimal card width, in inches
           */
          cardWidthTo?: number;
          /**
           * Format: double
           * @description Minimal card height, in inches
           */
          cardHeightFrom?: number;
          /**
           * Format: double
           * @description Minimal card height, in inches
           */
          cardHeightTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TradingCardSetBaseResponse"];
        };
      };
    };
  };
  v1GetVideoGame: {
    parameters: {
      query: {
        /** @description VideoGame unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoGameFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageVideoGames: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoGameBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchVideoGames: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Video game title */
          title?: string;
          /**
           * Format: date
           * @description Minimal date the video game was first released
           */
          releaseDateFrom?: string;
          /**
           * Format: date
           * @description Minimal date the video game was first released
           */
          releaseDateTo?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoGameBaseResponse"];
        };
      };
    };
  };
  v1GetVideoRelease: {
    parameters: {
      query: {
        /** @description Video release unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoReleaseFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageVideoReleases: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoReleaseBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchVideoReleases: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Video release title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year of video release story
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of video release story
           */
          yearTo?: number;
          /**
           * Format: int32
           * @description Minimal run time, in minutes
           */
          runTimeFrom?: number;
          /**
           * Format: int32
           * @description Minimal run time, in minutes
           */
          runTimeTo?: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoReleaseBaseResponse"];
        };
      };
    };
  };
  v2GetVideoRelease: {
    parameters: {
      query: {
        /** @description Video release unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoReleaseV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageVideoReleases: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoReleaseBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchVideoReleases: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Video release title */
          title?: string;
          /**
           * Format: int32
           * @description Starting year of video release story
           */
          yearFrom?: number;
          /**
           * Format: int32
           * @description Ending year of video release story
           */
          yearTo?: number;
          /**
           * Format: int32
           * @description Minimal run time, in minutes
           */
          runTimeFrom?: number;
          /**
           * Format: int32
           * @description Minimal run time, in minutes
           */
          runTimeTo?: number;
          /** @description Whether it should be a documentary */
          documentary?: boolean;
          /** @description Whether it should contain special features */
          specialFeatures?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VideoReleaseV2BaseResponse"];
        };
      };
    };
  };
  v1GetWeapon: {
    parameters: {
      query: {
        /** @description Weapon unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WeaponFullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1PageWeapons: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WeaponBaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v1SearchWeapons: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Weapon name */
          name?: string;
          /** @description Whether it should be a hand-help weapon */
          handHeldWeapon?: boolean;
          /** @description Whether it should be a laser technology */
          laserTechnology?: boolean;
          /** @description Whether it should be a plasma technology */
          plasmaTechnology?: boolean;
          /** @description Whether it should be a photonic technology */
          photonicTechnology?: boolean;
          /** @description Whether it should be a phaser technology */
          phaserTechnology?: boolean;
          /** @description Whether this weapon should be from mirror universe */
          mirror?: boolean;
          /** @description Whether this weapon should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WeaponBaseResponse"];
        };
      };
    };
  };
  v2GetWeapon: {
    parameters: {
      query: {
        /** @description Weapon unique ID */
        uid: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WeaponV2FullResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2PageWeapons: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WeaponV2BaseResponse"];
        };
      };
      /** @description Unexpected error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  v2SearchWeapons: {
    parameters: {
      query?: {
        /** @description Zero-based page number */
        pageNumber?: number;
        /** @description Page size */
        pageSize?: number;
        /** @description Sorting, serialized like this: fieldName,ASC;anotherFieldName,DESC */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Weapon name */
          name?: string;
          /** @description Whether it should be a hand-help weapon */
          handHeldWeapon?: boolean;
          /** @description Whether it should be a laser technology */
          laserTechnology?: boolean;
          /** @description Whether it should be a plasma technology */
          plasmaTechnology?: boolean;
          /** @description Whether it should be a photonic technology */
          photonicTechnology?: boolean;
          /** @description Whether it should be a phaser technology */
          phaserTechnology?: boolean;
          /** @description Whether it should be a directed energy weapon */
          directedEnergyWeapon?: boolean;
          /** @description Whether it should be an explosive weapon */
          explosiveWeapon?: boolean;
          /** @description Whether it should be a projectile weapon */
          projectileWeapon?: boolean;
          /** @description Whether it should be a fictional weapon */
          fictionalWeapon?: boolean;
          /** @description Whether this weapon should be from mirror universe */
          mirror?: boolean;
          /** @description Whether this weapon should be from alternate reality */
          alternateReality?: boolean;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WeaponV2BaseResponse"];
        };
      };
    };
  };
}
